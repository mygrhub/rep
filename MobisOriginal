///ВНИМАНИЮ РАЗРАБОТЧИКОВ
//Протокол обмена с КПК подробно описан на сайте 
//Все поля являются ОБЯЗАТЕЛЬНЫМИ 
//Если какое-либо поле Вам НЕ нужно, то следует передавать пустое значение соответствующего типа
//Передавать значения другого типа НЕЛЬЗЯ

Перем Конфигурация Экспорт;							// Идентификатор конфигурации
Перем РазделительСтрок Экспорт;						// Разделитель строк для обмена с КПК
Перем Таб Экспорт;									// Разделитель значений в строке для обмена с КПК
Перем Сервер Экспорт;          						// Содержит COM объект для связи с КПК 
Перем мВалютаРегламентированногоУчета Экспорт;		// Валюта регламентированного учета 
Перем ОсновнойТипЦенПоУмолчанию Экспорт;			// Основной тип цен для расчётов
Перем ОсновнаяСтатьяДвиженияДенежныхСредств Экспорт;// основная статья ДДС
Перем ЕстьЗадачиПользователя Экспорт;       		// Флаг возможности создания оповещений для пользователей
Перем ВерсияОбработки Экспорт;						// Текущая версия обработки, версия этого файла
Перем ВерсияPocketServer Экспорт;					// Версия используемой библиотеки PocketServerХХ.dll
Перем ВерсияПротокола Экспорт;						// Версия используемого протокола обмена с КПК
Перем РедакцияДистрибутива Экспорт;					// Номер редакции дистрибутива
Перем ВерсияДистрибутива Экспорт;					// Номер версии дистрибутива (ВерсияПротокола+РедакцияДистрибутива)
Перем Порт Экспорт;									// Номер порта через который происходит обмен с КПК
Перем СервернаяКомпонента Экспорт;					// Имя используемой библиотеки PocketServerХХ.dll
Перем ИмяСервера Экспорт;							// Имя объекта сервер в используемой обработке
Перем ИмяСервернойКомпоненты Экспорт;				// Имя объекта сервер в используемой обработке
Перем МодульЦенообразование Экспорт;				// Переменная для доступа к функциям модуля Ценообразование
Перем МодульОбработкаТабличныхЧастей Экспорт;		// Переменная для доступа к функциям модуля ОбработкаТабличныхЧастей
Перем МодульОбщегоНазначения Экспорт;				// Переменная для доступа к функциям модуля ОбщегоНазначения
Перем МодульМодульВалютногоУчета Экспорт;			// Переменная для доступа к функциям модуля МодульВалютногоУчета
Перем МодульУправлениеЗапасами Экспорт;				// Переменная для доступа к функциям модуля УправлениеЗапасами
Перем ВебЦвета Экспорт;								// ВебЦвета для КПК
Перем ДлинаКодаКонтрагенты Экспорт;					// длина кода для элемента справочника контрагент

Перем ЦветВыполненныеЗадания Экспорт;				// цвет выполненных заданий в формах настройки заданий
Перем ЦветПросроченныеЗадания Экспорт;				// цвет просроченных заданий в формах настройки заданий
Перем ЦветаСтиляЦветФонаПоля Экспорт;				// цвет фона поля табличной части
Перем ЦветаТекущаяДата Экспорт;						// цвет фона ячейки соответствующей текущей дате
Перем УзорЗадания Экспорт;							// узор которыми штрихуется частично выполненное/просроченное задание
Перем ПорядокОкругленияЦен Экспорт;					// Соответствие Порядок округления цен номенклатуры (для ускорения выгрузки цен)
Перем НастройкиУстройстваКодАгента Экспорт;      	// Код агента, для которого открыто окно загрузки настроек устройства
Перем НастройкиУстройстваЛокальныйАдрес Экспорт;	// Локальный адрес сервера, который будет настроен на устройстве
Перем НастройкиУстройстваВнешнийАдрес Экспорт;		// Внешний адрес сервера, который будет настроен на устройстве

Перем ИконкаКлиентПосещенный Экспорт;				//"Клиент";
Перем ИконкаКлиентНеПосещенный Экспорт;				//"КлиентНепосещенный";

Перем ФорматТТНеЗадан Экспорт;
Перем ЕстьТоварыВАнкете Экспорт;

Перем ИнтерфейсыПользователей Экспорт;

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Пользователь - текущий пользователь программы
//  Настройка    - признак, для которого возвращается значение по умолчанию
//	СписокПолей	 - список полей (реквизитов) в Настройка для которых необходимо получить значение по умолчанию
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, Настройка, СписокПолей = Неопределено)
	
	НастройкаТипЗнч = ПланыВидовХарактеристик.НастройкиПользователей[Настройка].ТипЗначения;
	НастройкаТипЗнчСправочник = Справочники.ТипВсеСсылки().СодержитТип(НастройкаТипЗнч.Типы()[0]);
	Если НастройкаТипЗнчСправочник Тогда
		МетаданныеТипаНастройки = Метаданные.НайтиПоТипу(НастройкаТипЗнч.Типы()[0]);
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Настройка"   , ПланыВидовХарактеристик.НастройкиПользователей[Настройка]);	
	
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Значение КАК Значение";
	
	Если СписокПолей <> Неопределено И НастройкаТипЗнчСправочник Тогда
		
		СправочникИмя = МетаданныеТипаНастройки.Имя;
		
		Для каждого Элемент из СписокПолей цикл
			
			ИмяРеквизита = Элемент.Значение;
			Представление = Элемент.Представление;
			Если ПустаяСтрока(Представление) Тогда
				Представление = ИмяРеквизита;
			КонецЕсли;
				
			Запрос.Текст = Запрос.Текст + ",
			|ВЫРАЗИТЬ(Значение КАК Справочник." + СправочникИмя + ")." + ИмяРеквизита + "  КАК " + Представление;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "		
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК РегистрЗначениеПрав
	|
	|ГДЕ
	|	Пользователь = &Пользователь
	| И Настройка    = &Настройка
	|";
		
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если СписокПолей = Неопределено Тогда
		ПустоеЗначение = НастройкаТипЗнч.ПривестиЗначение();
	Иначе
		ПустоеЗначение = новый Структура("Значение", НастройкаТипЗнч.ПривестиЗначение());
		Для каждого ЭлементСписка из СписокПолей цикл
			ПустоеЗначение.Вставить(?(ПустаяСтрока(ЭлементСписка.Представление), 
										ЭлементСписка.Значение, 
										ЭлементСписка.Представление));
		КонецЦикла;				
	КонецЕсли;
	
	Если Выборка.Следующий() Тогда
	
		Если НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат ПустоеЗначение;
		КонецЕсли;		
		
		Если НастройкаТипЗнчСправочник 
			И ПараметрыДоступа("Чтение", МетаданныеТипаНастройки, "Ссылка").ОграничениеУсловием Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 1 ИЗ Справочник." + МетаданныеТипаНастройки.Имя + " ГДЕ Ссылка = &Ссылка";
			Запрос.УстановитьПараметр("Ссылка", Выборка.Значение);
			РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
				Возврат ПустоеЗначение;
			КонецЕсли;
		КонецЕсли;		
		
		Если СписокПолей = Неопределено Тогда
			Возврат Выборка.Значение;
		Иначе
			ЗаполнитьЗначенияСвойств(ПустоеЗначение, Выборка);
			Возврат ПустоеЗначение;
		КонецЕсли;	
		
	Иначе
		Возврат ПустоеЗначение;
	КонецЕсли;	
	
	
КонецФункции // ПолучитьЗначениеПоУмолчаниюПользователя()

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Пользователь - текущий пользователь программы
//  Настройка    - признак, для которого возвращается значение по умолчанию
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеПоУмолчанию(Пользователь, Настройка) Экспорт

	Если Пользователь = глЗначениеПеременной("глТекущийПользователь") Тогда		
		НастройкаСсылка = ПланыВидовХарактеристик.НастройкиПользователей[Настройка];		
		КэшНастроекПользователей = новый Соответствие();
		Если Не (Конфигурация = "ТорговляКазахстан"
			ИЛИ Конфигурация = "УТПКазахстан"
			ИЛИ Конфигурация = "УППКазахстан") Тогда
			КэшНастроекПользователей = глЗначениеПеременной("ЗначенияНастроекПользователей");
		КонецЕсли;
		ЗначениеНастройки = КэшНастроекПользователей[НастройкаСсылка];
		Если ЗначениеНастройки = Неопределено Тогда
			ЗначениеНастройки = ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, Настройка);
			КэшНастроекПользователей[НастройкаСсылка] = ЗначениеНастройки;
			#Если Сервер Тогда
				глЗначениеПеременнойУстановить("ЗначенияНастроекПользователей", КэшНастроекПользователей, Истина);
			#КонецЕсли
		КонецЕсли;	
		Возврат ЗначениеНастройки;		
	КонецЕсли;
	
	Возврат ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, Настройка);

КонецФункции // ПолучитьЗначениеПоУмолчанию()

// Преобразует число в строку
Функция СтрокуВЧисло(стр) Экспорт
	А = 0;
	Попытка //проверим вдруг передали НЕ число 
		А = Число(стр);
	Исключение
		А = 0;
	КонецПопытки;
	
	Возврат А;
КонецФункции

// Преобразует число в строку
Функция ЧислоВСтроку(Значение, Точность = 0) Экспорт
	
	Попытка //проверим вдруг передали НЕ число 
		А= Значение/2;
	Исключение
		Значение = 0;
	КонецПопытки;
	
	Возврат Формат(Значение,"ЧДЦ=" + Формат(Точность, "ЧЦ=1; ЧДЦ=0; ЧН=0")+ "; ЧРД=.; ЧН=0; ЧГ=0");
КонецФункции

// Преобразует целое число в строку без разделителей групп разрядов
Функция ЦелоеВСтроку(Значение) Экспорт	
	Попытка //проверим вдруг передали НЕ число 
		А= Значение/2;
	Исключение
		Значение = 0;
	КонецПопытки;	
	Возврат Формат(Значение,"ЧДЦ=0; ЧРД=.; ЧН=0; ЧГ=0");
КонецФункции

// Преобразует число в строку без разделителей групп разрядов и десятичной точкой
Функция КоординатаВСтроку(Значение) Экспорт	
	Попытка //проверим вдруг передали НЕ число 
		А= Значение/2;
	Исключение
		Значение = 0;
	КонецПопытки;	
	Возврат Формат(Значение,"ЧДЦ=8; ЧРД=.; ЧН=0; ЧГ=0");
КонецФункции

// Преобразует число (сумма, цена, долг) в строку 
//без разделителей групп разрядов и десятичной точкой, с точностью - 2 знака после запятой
Функция СуммаВСтроку(Значение) Экспорт	
	Попытка //проверим вдруг передали НЕ число 
		А= Значение/2;
	Исключение
		Значение = 0;
	КонецПопытки;	
	Возврат Формат(Значение,"ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0");
КонецФункции

//функция возвращает только компоненту времени из дата время
Функция ТолькоВремя(ДатаВремя) Экспорт
	Возврат Дата(1, 1, 1, Час(ДатаВремя), Минута(ДатаВремя), Секунда(ДатаВремя));
КонецФункции

// преобразует строку с датой и временем выгруженную с КПК в корректную дату и время независимо 
//от настроек локали на компьютере и в 1С
Функция ДатаИзСтрокиСКПК(стрДата) Экспорт	
//с кпк дата/время всегда приходит в форматах 
//"dd.MM.yyyy HH:mm:ss" - 19 символов
//"dd.MM.yyyy H:mm:ss" - 18 символов
//"dd.MM.yyyy" - 10 символов
//"HH:mm:ss" - 8 символов
//разбор формата зависит от длины входной строки, если ни один вариант не получился, возвращаем "00010101000000"
    Год = "0001";	
	Месяц = "01";
    День = "01";
	Час = "00";
	Минута = "00";
	Секунда = "00";	
	
	стр = СокрЛП(стрДата);
	стрДлина = СтрДлина(стр);
	стр = СтрЗаменить(стр, " ", РазделительСтрок);
	стр = СтрЗаменить(стр, ".", РазделительСтрок);
	стр = СтрЗаменить(стр, ":", РазделительСтрок);
	Если (стрДлина = 19) ИЛИ (стрДлина = 18) Тогда
		Год = СтрПолучитьСтроку(стр, 3);
		Месяц = СтрПолучитьСтроку(стр, 2);
		День = СтрПолучитьСтроку(стр, 1);
		Час = СтрПолучитьСтроку(стр, 4);
		Минута = СтрПолучитьСтроку(стр, 5);
		Секунда = СтрПолучитьСтроку(стр, 6);
		//Год = Сред(стр, 7, 4);	
		//Месяц = Сред(стр, 4, 2);
		//День = Лев(стр, 2);
		//Час = Сред(стр, 12, 2);
		//Минута = Сред(стр, 15, 2);
		//Секунда = Сред(стр, 18, 2);	
//	ИначеЕсли стрДлина = 18 Тогда
		//Год = Сред(стр, 7, 4);	
		//Месяц = Сред(стр, 4, 2);
		//День = Лев(стр, 2);
		//Час = Сред(стр, 12, 1);
		//Минута = Сред(стр, 14, 2);
		//Секунда = Сред(стр, 17, 2);	
	ИначеЕсли стрДлина = 10 Тогда
		Год = СтрПолучитьСтроку(стр, 3);
		Месяц = СтрПолучитьСтроку(стр, 2);
		День = СтрПолучитьСтроку(стр, 1);
		//Год = Прав(стр, 4);	
		//Месяц = Сред(стр, 4, 2);
		//День = Лев(стр, 2);
	ИначеЕсли стрДлина = 8 Тогда
		Час = СтрПолучитьСтроку(стр, 1);
		Минута = СтрПолучитьСтроку(стр, 2);
		Секунда = СтрПолучитьСтроку(стр, 3);
		//Час = Лев(стр, 2);
		//Минута = Сред(стр, 4, 2);
		//Секунда = Прав(стр, 2);	
	КонецЕсли;
	Час = Прав("00" + Час, 2);
	Минута = Прав("00" + Минута, 2);
	Секунда = Прав("00" + Секунда, 2);
	Возврат Дата(Год + Месяц + День + Час + Минута + Секунда);
КонецФункции

// преобразует дату в строку в требуемом для КПК формате выгрузки
Функция ДатаВСтрокуДляКПК(дата) Экспорт	
	Возврат Формат(дата, "ДФ=dd.MM.yyyy");
КонецФункции

// преобразует дату в строку в требуемом для КПК формате выгрузки
Функция ДатаВремяВСтрокуДляКПК(дата) Экспорт	
	Возврат Формат(дата, "ДФ='dd.MM.yyyy HH:mm:ss'");
КонецФункции

// преобразует собирает дату и время из переданных параметров
Функция ДатаИзДатаИВремя(_дата, _время) Экспорт	
	Возврат Дата(Год(_Дата), Месяц(_Дата), День(_Дата), Час(_Время), Минута(_Время), Секунда(_Время));
КонецФункции

// возвращает пустую дату
функция ДатаПустая() Экспорт
	Возврат Дата("00010101000000");
КонецФункции

// возвращает дату из метаданных фотографии
// в метаданных фотографии дата хранится в формате yyyy.MM.dd HH:mm:ss
функция ДатаИзМетаданныхФотографии(ДатаВремя) Экспорт
	_дата = ДатаПустая();
	Попытка
		_дата = Дата(Число(Лев(ДатаВремя,4)),Число(Сред(ДатаВремя,6,2)),Число(Сред(ДатаВремя,9,2)),
			Число(Сред(ДатаВремя,12,2)),Число(Сред(ДатаВремя,15,2)),Число(Сред(ДатаВремя,18,2)));
	Исключение
	КонецПопытки;
	Возврат _дата;			
КонецФункции

// возвращает дату из метаданных фотографии
// в имени файла дата хранится в формате ddMMyyyy HHmmss
функция ДатаИзИмениФайлаДатаВремя(Дата = "01010001", Время = "000000") Экспорт
	_дата = ДатаПустая();
	Попытка
		_дата = Дата(Прав(Дата,4),Сред(Дата,3,2),Лев(Дата,2),Лев(Время,2),Сред(Время,3,2),Прав(Время,2));
	Исключение
	КонецПопытки;
	Возврат _дата;
КонецФункции

// Преобразует число (вес, количество, бонус, остаток, коэффициент единицы измерения в строку 
//без разделителей групп разрядов и десятичной точкой,  с точностью - 2 знака после запятой
Функция КоличествоВСтроку(Значение) Экспорт	
	Попытка //проверим вдруг передали НЕ число 
		А= Значение/2;
	Исключение
		Значение = 0;
	КонецПопытки;	
	Возврат Формат(Значение,"ЧДЦ=3; ЧРД=.; ЧН=0; ЧГ=0");
КонецФункции

// Добавляет строку в Лог-файл
// Параметры
//    ТекстСообщения - Строка с сообщением
//    Агент -  Справочник.Пользователи, агент к которому относится это сообщение. Необязательный
//    Способ - число: 0 - Сообщение, 1 - Состояние  Необязательный, по умолчанию =0 "Сообщение"
//    Статус - тип СтатусСообщения .Необязательный, по умолчанию Обычное. 
//	  Имеет смысл только когда  Способ = 0 "Сообщение"
Процедура ДобавитьВЛогФайл(ТекстСообщения, Агент=Неопределено, Способ=0 ,Статус=Неопределено) Экспорт
	Если Статус=Неопределено Тогда
		Статус=СтатусСообщения.Обычное
	КонецЕсли; 	
	
	текДата = ТекущаяДата();
	
	Стр =	Формат(текДата, "ДФ=HH:mm:ss") + " " + Таб
			+ ИдентификаторОбработки + " " + Таб
			+ Строка(?(Агент <> Неопределено, 
						Агент, 
						глЗначениеПеременной("глТекущийПользователь"))) + " " + Таб
			+ ТекстСообщения;	
	
	Попытка
		ИмяЛогФайла=ПолучитьКаталог("Logs")+"\PS_"+Формат(текДата,"ДФ=гггг-ММ-дд")+".txt";
		ЛогФайл = Новый ЗаписьТекста(ИмяЛогФайла, КодировкаТекста.UTF8,,Истина);
		ЛогФайл.ЗаписатьСтроку(Стр);
		ЛогФайл.Закрыть();
    Исключение
		//ЛогФайл.Закрыть();
	КонецПопытки;
 
	Если Способ=0 Тогда
		Сообщить(Стр,Статус);
	ИначеЕсли Способ=1 Тогда
		Состояние(Стр);
	КонецЕсли;
КонецПроцедуры

// Убирает из строки символы с кодами 0-31 (до кода пробела), чтобы исключить запрещенные символы в базе данных на КПК
Функция УбратьСпецСимволы(ИсхСтр,Кроме=Неопределено) Экспорт
	ВремСтр = СокрП(ИсхСтр);
	ДлСтр   = СтрДлина(ВремСтр);
	НовСтр  = "";
	Для Н=1 По ДлСтр Цикл
		Символ = Сред(ВремСтр,Н,1);
		КодСимвола=КодСимвола(Символ);
		//Символ<>Кроме
		Если КодСимвола<32 И (Найти(Кроме, Символ) = 0) Тогда Продолжить; КонецЕсли;
		НовСтр = НовСтр + Символ;
	КонецЦикла;
	
	Возврат НовСтр;
КонецФункции

// проверяет есть ли такой файл
// Истина - файл существует, ложь - файл НЕ существует
Функция СуществуетФайл(ИФ) Экспорт
   ФС = Новый Файл(ИФ);
   возврат ФС.Существует();	
КонецФункции // СуществуетФайл(ИФ)

// Передаёт серверу обмена с КПК данные о том, где сохранять файлы, поступающие из КПК
Процедура ЗадатьПапкиНаСервере(КодАгента) Экспорт
	Если НЕ АвтономныйРежим Тогда
		//Clients
		ПутьКПапке = ПолучитьКаталог("Agents\"+СокрЛП(КодАгента)+"\Photo\" + ПолучитьИмяКаталогаПоТипуОбъекта(1) + "\");
		Сервер.ЗадатьПапкуАгента(СокрЛП(КодАгента),"Client",ПутьКПапке);
		//Goods
		ПутьКПапке = ПолучитьКаталог("Agents\"+СокрЛП(КодАгента)+"\Photo\" + ПолучитьИмяКаталогаПоТипуОбъекта(4) + "\");
		Сервер.ЗадатьПапкуАгента(СокрЛП(КодАгента),"Good",ПутьКПапке);
		//Продажа
		ПутьКПапке = ПолучитьКаталог("Agents\"+СокрЛП(КодАгента)+"\Photo\" + ПолучитьИмяКаталогаПоТипуОбъекта(12) + "\");
		Сервер.ЗадатьПапкуАгента(СокрЛП(КодАгента),"Продажа",ПутьКПапке);
		//Заказ
		ПутьКПапке = ПолучитьКаталог("Agents\"+СокрЛП(КодАгента)+"\Photo\" + ПолучитьИмяКаталогаПоТипуОбъекта(14) + "\");
		Сервер.ЗадатьПапкуАгента(СокрЛП(КодАгента),"Заказ",ПутьКПапке);
		//Покупка
		ПутьКПапке = ПолучитьКаталог("Agents\"+СокрЛП(КодАгента)+"\Photo\" + ПолучитьИмяКаталогаПоТипуОбъекта(16) + "\");
		Сервер.ЗадатьПапкуАгента(СокрЛП(КодАгента),"Покупка",ПутьКПапке);
		//ПКО
		ПутьКПапке = ПолучитьКаталог("Agents\"+СокрЛП(КодАгента)+"\Photo\" + ПолучитьИмяКаталогаПоТипуОбъекта(18) + "\");
		Сервер.ЗадатьПапкуАгента(СокрЛП(КодАгента),"ПКО",ПутьКПапке);
		//Анкета
		ПутьКПапке = ПолучитьКаталог("Agents\"+СокрЛП(КодАгента)+"\Photo\" + ПолучитьИмяКаталогаПоТипуОбъекта(19) + "\");
		Сервер.ЗадатьПапкуАгента(СокрЛП(КодАгента),"Анкета",ПутьКПапке);
		//Новый клиент
		ПутьКПапке = ПолучитьКаталог("Agents\"+СокрЛП(КодАгента)+"\Photo\" + ПолучитьИмяКаталогаПоТипуОбъекта(29) + "\");
		Сервер.ЗадатьПапкуАгента(СокрЛП(КодАгента),"Новый клиент",ПутьКПапке);
		//Отчёт о выполнении
		ПутьКПапке = ПолучитьКаталог("Agents\"+СокрЛП(КодАгента)+"\Photo\" + ПолучитьИмяКаталогаПоТипуОбъекта(35) + "\");
		Сервер.ЗадатьПапкуАгента(СокрЛП(КодАгента),"Отчёт о выполнении",ПутьКПапке);
		//Наличие и цены
		ПутьКПапке = ПолучитьКаталог("Agents\"+СокрЛП(КодАгента)+"\Photo\" + ПолучитьИмяКаталогаПоТипуОбъекта(37) + "\");
		Сервер.ЗадатьПапкуАгента(СокрЛП(КодАгента),"Наличие и цены",ПутьКПапке);
		
		ПутьКПапке = ПолучитьКаталог("Agents\"+СокрЛП(КодАгента)+"\Photo\Device");
		Сервер.ЗадатьПапкуАгента(СокрЛП(КодАгента),"IncomingPhotos",ПутьКПапке);
		
	КонецЕсли;
КонецПроцедуры

//возвращает имя каталога согласно нумерации типов в Моби-С
Функция ПолучитьИмяКаталогаПоТипуОбъекта(ТипОбъекта) Экспорт
	Если ТипОбъекта = 1 Тогда
		Возврат "Clients"
	ИначеЕсли ТипОбъекта = 4 Тогда
		Возврат "Goods"
	ИначеЕсли ТипОбъекта = 12 Тогда
		Возврат "Продажа"
	ИначеЕсли ТипОбъекта = 14 Тогда
		Возврат "Заказ"
	ИначеЕсли ТипОбъекта = 16 Тогда
		Возврат "Покупка"
	ИначеЕсли ТипОбъекта = 18 Тогда
		Возврат "ПКО"
	ИначеЕсли ТипОбъекта = 19 Тогда
		Возврат "Анкета"
	ИначеЕсли ТипОбъекта = 29 Тогда
		Возврат "Новый клиент"
	ИначеЕсли ТипОбъекта = 35 Тогда
		Возврат "Отчёт о выполнении"
	ИначеЕсли ТипОбъекта = 37 Тогда
		Возврат "Наличие и цены"
	Иначе
		Возврат "Неизвестный тип документа";
	КонецЕсли;
КонецФункции

// Возвращает каталог с указанным именем внутри основного каталога программы, 
//если каталог НЕ существует, то он создается  
Функция ПолучитьКаталог(ИмяКаталога) Экспорт
	//проверить КаталогЛогФайлов на наличие закрывающего слеша
	//Если  Прав(КаталогЛогФайлов,1) <> "\" Тогда
	//	КаталогЛогФайлов = КаталогЛогФайлов + "\"; 
	//КонецЕсли;	
	//Если  (Прав(ИмяКаталога,1) <> "\") И (СтрДлина(ИмяКаталога)>0) Тогда
	//	ИмяКаталога = ИмяКаталога + "\"; 
	//КонецЕсли;
	//Кат = КаталогЛогФайлов+ИмяКаталога;
	Если  Прав(КаталогЛогФайлов,1) = "\" Тогда
		КаталогЛогФайлов = Лев(КаталогЛогФайлов,СтрДлина(КаталогЛогФайлов)-1); 
	КонецЕсли;	
	Если  (Прав(ИмяКаталога,1) = "\") И (СтрДлина(ИмяКаталога)>0) Тогда
		ИмяКаталога = Лев(ИмяКаталога,СтрДлина(ИмяКаталога)-1);
	КонецЕсли;
	Кат = КаталогЛогФайлов+"\"+ИмяКаталога;
	Попытка
		СоздатьКаталог(Кат);
		Возврат Кат;
	Исключение
		Сообщить("Не удалось создать каталог "+Кат);
		Возврат "";
	КонецПопытки;
	
КонецФункции // ПолучитьКаталог()

//Возвращает уникальный идентификатор объекта
//ссылкаНаОбъект - ссылка на объект для которого необходимо получить уникальный идентификатор
//возвращаемое значение - строка с уникальный идентификатором объекта без символов разделителей
Функция УникИдентификатор(ссылкаНаОбъект) Экспорт
	//попытка сделана чтобы не вылетали при ошибках в базе 1С, например когда 
	//в регистрах регистратор = неопределено NULL и тд...
	УникальныйКод = "";
	Попытка
		Если НЕ ссылкаНаОбъект.Пустая() Тогда 
			УникальныйКод = ссылкаНаОбъект.УникальныйИдентификатор();
		    УникальныйКод = СтрЗаменить(УникальныйКод,"-","");
		КонецЕсли;
	Исключение
	КонецПопытки;
	Возврат УникальныйКод;
КонецФункции // УникИдентификатор(ссылкаНаОбъект)()

// Читает Значение из регистра "НастройкиПользователя" с проверкой типа возвращаемого значения
// Параметры
// Агент - тип Справочник.Пользователи, торговый агент для которого читается настройка
// НаименованиеНастройки - Строка.имя под которым сохранено значение
// ЗначениеПоУмолчанию - значение которое будет возвращено, если в регистре ничего НЕ найдено
// Возвращаемое значение
// Значение сохраненное в регистре
// Если значение НЕ найдено или тип найденного значения не соответствует нужному, 
//то возвращается параметр ЗначениеПоУмолчанию
Функция ПолучитьНастройкуПользователя(Агент,Настройка,ЗначениеПоУмолчанию) Экспорт
	нп = ПолучитьНастройку(Агент, "НП_"+Строка(Настройка), ЗначениеПоУмолчанию);
	Если НЕ нп = ЗначениеПоУмолчанию Тогда
		Возврат нп;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиПользователей.Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|ГДЕ
	|	НастройкиПользователей.Пользователь = &Агент
	|	И НастройкиПользователей.Настройка  = &Настройка";
	
	Запрос.УстановитьПараметр("Агент",Агент );
	Запрос.УстановитьПараметр("Настройка", Настройка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		НастройкаПользователя = ЗначениеПоУмолчанию;
	Иначе 
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда
			НастройкаПользователя = ЗначениеПоУмолчанию;
		Иначе
			НастройкаПользователя = Выборка.Значение;			
			ЗаписатьВРегистрСохраненныеНастройки(Агент,НастройкаПользователя,Строка(Настройка))
		КонецЕсли; 
	КонецЕсли; 	
	
	Возврат НастройкаПользователя;
КонецФункции // ПолучитьНастройкуПользователя()

// Записывает Значение в регистр "НастройкиПользователя"
// Параметры
// Агент - тип Справочник.Пользователи, торговый агент для которого сохраняется настройка
// СохраняемоеЗначение - любое сохраняемое значение
// Настройка - тип ПВХ.НастройкиПользователя 
Процедура СохранитьНастройкуПользователя(Агент, Значение, Настройка) Экспорт
	ЗаписатьВРегистрСохраненныеНастройки(Агент, Значение, "НП_" + Строка(Настройка))		
КонецПроцедуры

//возвращает таблицу Складов, заданную в настройках агента ПарамАгент
Функция ПрочитатьСклады(ПарамАгент) Экспорт
	Перем Табл;	//переменная для хранения информации по набору складов из настроек
	Табл = ПрочитатьИзРегистраСохраненныеНастройки(ПарамАгент,"Склады"); //это Табл значений
	Если ТипЗнч(Табл) <> Тип("ТаблицаЗначений") Тогда
	     Табл = Новый ТаблицаЗначений;
	КонецЕсли;
	Если Табл.Колонки.Найти("Склад")= Неопределено Тогда
		 Табл.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	КонецЕсли; 	 
    Табл.Свернуть("Склад");
	УдалитьСтрокиПоКлючу(Табл,"Склад",Справочники.Склады.ПустаяСсылка());	
	Если Табл.Колонки.Найти("НомерСтроки")= Неопределено Тогда
		 Табл.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	КонецЕсли; 	 
	инд = 1;
	Для каждого стр из Табл Цикл
		стр.НомерСтроки = инд;
		инд = инд + 1;		
	КонецЦикла;
	
	Если Табл.Количество()=0 Тогда //если их нет, то возьмем склад по умолчанию
		СкладПоУмолчанию =	ПолучитьНастройкуПользователя(
			ПарамАгент,ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойСклад,Справочники.Склады.ПустаяСсылка());
		Если НЕ СкладПоУмолчанию.Пустая() Тогда  //когда он задан добавим его в табл складов
			стр = Табл.Добавить();
			стр.Склад = СкладПоУмолчанию;
		КонецЕсли; 
	КонецЕсли; 
	
	//когда запрещено использовать несколько складов, оставим в списке только первый склад
    //Если Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить() = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.НеИспользовать Тогда
    //    Если Табл.Количество()>0 Тогда
	//	    ПервыйСклад = Табл[0].Склад;
	//	    Табл.Очистить();
	//	    стр = Табл.Добавить();
	//	    стр.Склад = ПервыйСклад;
    //    КонецЕсли;
	//КонецЕсли; 
	//Если Табл.Количество()=0 Тогда //когда нет ни одного склада добавить пустую строчку
	//	стр = Табл.Добавить();
	//	стр.Склад = Справочники.Склады.ПустаяСсылка();
	//КонецЕсли;
	
	Возврат Табл;
КонецФункции // ПрочитатьСклады()

//возвращает таблицу Организаций, заданную в настройках агента ПарамАгент
Функция ПрочитатьОрганизации(ПарамАгент) Экспорт
	Табл = ПрочитатьИзРегистраСохраненныеНастройки(ПарамАгент,"Организации"); //это Табл значений
	Если ТипЗнч(Табл) <> Тип("ТаблицаЗначений") Тогда
	     Табл = Новый ТаблицаЗначений;
	КонецЕсли;
	Если Табл.Колонки.Найти("Организация")= Неопределено Тогда
		 Табл.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли; 
	Если Табл.Колонки.Найти("Грузоотправитель")= Неопределено Тогда
		 Табл.Колонки.Добавить("Грузоотправитель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	КонецЕсли; 
	Если Табл.Колонки.Найти("Касса")= Неопределено Тогда
		 Табл.Колонки.Добавить("Касса", Новый ОписаниеТипов("СправочникСсылка.Кассы"));
	КонецЕсли; 
	Если Табл.Колонки.Найти("ККМ")= Неопределено Тогда
		 Табл.Колонки.Добавить("ККМ", Новый ОписаниеТипов("СправочникСсылка.КассыККМ"));
	КонецЕсли; 
    Табл.Свернуть("Организация,Грузоотправитель,Касса, ККМ");	
	УдалитьСтрокиПоКлючу(Табл,"Организация",Справочники.Организации.ПустаяСсылка());
	Если Табл.Колонки.Найти("НомерСтроки")= Неопределено Тогда
		 Табл.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	КонецЕсли; 	 	

	инд = 1;
	Для каждого стр из Табл Цикл
		стр.НомерСтроки = инд;
		инд = инд + 1;		
	КонецЦикла;
	
	возврат Табл; 
КонецФункции // ПрочитатьОрганизации()

//возвращает таблицу Супервайзеров, заданную в настройках агента ПарамАгент
Функция ПрочитатьСупервайзеров(ПарамАгент) Экспорт
	Табл = ПрочитатьИзРегистраСохраненныеНастройки(ПарамАгент,"Супервайзеры"); //это Табл значений
	Если ТипЗнч(Табл) <> Тип("ТаблицаЗначений") Тогда
	     Табл = Новый ТаблицаЗначений;
	КонецЕсли;
	Если Табл.Колонки.Найти("Супервайзер")= Неопределено Тогда
		 Табл.Колонки.Добавить("Супервайзер", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	КонецЕсли; 
    Табл.Свернуть("Супервайзер");	
	УдалитьСтрокиПоКлючу(Табл,"Супервайзер",Справочники.Пользователи.ПустаяСсылка());
	Если Табл.Колонки.Найти("НомерСтроки")= Неопределено Тогда
		 Табл.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	КонецЕсли; 	 	
	инд = 1;
	Для каждого стр из Табл Цикл
		стр.НомерСтроки = инд;
		инд = инд + 1;		
	КонецЦикла;
	возврат Табл; 
КонецФункции // ПрочитатьСупервайзеров()

//возвращает таблицу Пользователей для оповещения, заданную в настройках агента ПарамАгент
Функция ПрочитатьПользователейДляОповещения(ПарамАгент) Экспорт
	Табл = ПрочитатьИзРегистраСохраненныеНастройки(ПарамАгент,"ПользователиОповещения"); //это Табл значений
	Если ТипЗнч(Табл) <> Тип("ТаблицаЗначений") Тогда
	     Табл = Новый ТаблицаЗначений;
	КонецЕсли;
	Если Табл.Колонки.Найти("Пользователь")= Неопределено Тогда
		 Табл.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	КонецЕсли; 
    Табл.Свернуть("Пользователь");	
	УдалитьСтрокиПоКлючу(Табл,"Пользователь",Справочники.Пользователи.ПустаяСсылка());
	Если Табл.Колонки.Найти("НомерСтроки")= Неопределено Тогда
		 Табл.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	КонецЕсли; 	 	
	инд = 1;
	Для каждого стр из Табл Цикл
		стр.НомерСтроки = инд;
		инд = инд + 1;		
	КонецЦикла;
	возврат Табл; 
КонецФункции // ПрочитатьПользователейДляОповещения()

//возвращает Таблицу значений со всеми анкетами
Функция ПрочитатьАнкеты() Экспорт
	ТаблАнкеты = ПрочитатьИзРегистраСохраненныеНастройки(МобиС,"Анкеты");
	Если ТипЗнч(ТаблАнкеты) <> Тип("ТаблицаЗначений") Тогда 
		//создадим Пустую Таблицу с Анкетами
		ТаблАнкеты = Новый ТаблицаЗначений;
		ТаблАнкеты =  Анкеты.Выгрузить();
		ТаблАнкеты.Очистить();
	КонецЕсли; 
	возврат ТаблАнкеты;
КонецФункции 

//возвращает Таблицу значений с анкетами, для контрагентов заданные для агента ПарамАгент
Функция ПрочитатьАнкетыАгента(ПарамАгент) Экспорт

	Табл =ПрочитатьИзРегистраСохраненныеНастройки(ПарамАгент,"АнкетыАгента");
	Если ТипЗнч(Табл) <> Тип("ТаблицаЗначений") Тогда
		 Табл = Новый ТаблицаЗначений;
	КонецЕсли; 
	Если Табл.Колонки.Найти("Контрагент")= Неопределено Тогда
	     Табл.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	КонецЕсли; 	 
	Если Табл.Колонки.Найти("Анкета")= Неопределено Тогда
		 Табл.Колонки.Добавить("Анкета", Новый ОписаниеТипов("СправочникСсылка.ТиповыеАнкеты"));
	КонецЕсли; 	 
	УдалитьСтрокиПоКлючу(Табл,"Анкета",Справочники.ТиповыеАнкеты.ПустаяСсылка());
	
	Возврат Табл;
 
КонецФункции // ПрочитатьАнкетыАгента()

//возвращает массив ГУИДов используемых агентов сегментов
Функция ПрочитатьСегментыНоменклатурыАгента(ПарамАгент) Экспорт
	массивСН = ПрочитатьИзРегистраСохраненныеНастройки(ПарамАгент,"СегментыНоменклатурыАгента");
	Если ТипЗнч(массивСН) <> Тип("Массив") Тогда
		 массивСН = Новый Массив;
	КонецЕсли; 	
	Возврат массивСН; 
КонецФункции

//возвращает Таблицу значений с анкетами, для Номенклатуры
Функция ПрочитатьАнкетыНоменклатура() Экспорт

	Табл =ПрочитатьИзРегистраСохраненныеНастройки(МобиС,"АнкетыНоменклатура");
	Если ТипЗнч(Табл) <> Тип("ТаблицаЗначений") Тогда
		 Табл = Новый ТаблицаЗначений;
	КонецЕсли; 
	Если Табл.Колонки.Найти("Номенклатура")= Неопределено Тогда
	     Табл.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	КонецЕсли; 	 
	Если Табл.Колонки.Найти("Анкета")= Неопределено Тогда
		 Табл.Колонки.Добавить("Анкета", Новый ОписаниеТипов("СправочникСсылка.ТиповыеАнкеты"));
	КонецЕсли; 	 
	
	УдалитьСтрокиПоКлючу(Табл,"Анкета",Справочники.ТиповыеАнкеты.ПустаяСсылка());
	
	Возврат Табл;
 
КонецФункции // ПрочитатьАнкетыНоменклатура()

//возвращает таблицу с координатами агентов
функция ПрочитатьКоординатыАгентов(ВернутьПустуюТЗ = Ложь) Экспорт
	
	ТаблТекущиеКоординаты = ПрочитатьИзРегистраСохраненныеНастройки(МобиС,"ТекущиеКоординатыАгентов");
	Если ТипЗнЧ(ТаблТекущиеКоординаты) <> Тип("ТаблицаЗначений") Тогда
		ТаблТекущиеКоординаты = Новый ТаблицаЗначений;
	КонецЕсли; 
	Если ТаблТекущиеКоординаты.Колонки.Найти("Код") = Неопределено Тогда
		ТаблТекущиеКоординаты.Колонки.Добавить("Код",
			Новый ОписаниеТипов("Строка")); 
	КонецЕсли; 	 
	Если ТаблТекущиеКоординаты.Колонки.Найти("ДатаВремя") = Неопределено Тогда
		ТаблТекущиеКоординаты.Колонки.Добавить("ДатаВремя"  ,
			Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));  
	КонецЕсли; 	 
	Если ТаблТекущиеКоординаты.Колонки.Найти("Широта") = Неопределено Тогда
		 ТаблТекущиеКоординаты.Колонки.Добавить("Широта", 
		 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 8)));
	КонецЕсли; 	 
	Если ТаблТекущиеКоординаты.Колонки.Найти("Долгота") = Неопределено Тогда
		 ТаблТекущиеКоординаты.Колонки.Добавить("Долгота", 
		 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 8)));
	КонецЕсли;	 
	Если ТаблТекущиеКоординаты.Колонки.Найти("Скорость") = Неопределено Тогда
		 ТаблТекущиеКоординаты.Колонки.Добавить("Скорость", 
		 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0)));
	КонецЕсли;
	
	Если ВернутьПустуюТЗ Тогда
		ТаблТекущиеКоординаты.Очистить();
	Иначе
		//почистить таблицу ТаблТекущиеКоординаты от старых данных
		ТекВремя = ТекущаяДата() - 8*60*60;
		СтрокиНаУдаление = Новый Массив;
		Для Каждого Стр Из ТаблТекущиеКоординаты Цикл
			Если ТекВремя > Стр.ДатаВремя Тогда
				СтрокиНаУдаление.Добавить(Стр);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Стр Из СтрокиНаУдаление Цикл
			ТаблТекущиеКоординаты.Удалить(Стр);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблТекущиеКоординаты;	
КонецФункции

// Возвращает расстояние между двумя точки на карте, по их координатам
//параметры (Широта1, Долгота1), (Широта2, Долгота2) - координаты первой и второй точки соответственно
Функция РасстояниеМеждуДвумяТочками(Знач Широта1, Знач Долгота1, Знач Широта2, Знач Долгота2) Экспорт
	Попытка
		DE2RA =  0.01745329252; //перевод градусов в радианы
		Широта1 = Широта1 * DE2RA;
		Долгота1 = Долгота1 * DE2RA;
		Широта2 = Широта2 * DE2RA;
		Долгота2 = Долгота2 * DE2RA;
		Радиус = 6371.0;//радиус земного шара
		Возврат 1000*Радиус*ACos(Sin(Широта1)*Sin(Широта2)+Cos(Широта1)*Cos(Широта2)*Cos(Долгота2-Долгота1)); 
	Исключение
		Возврат 0;
	КонецПопытки;
КонецФункции

//функция формирует и возвращает маршрут торгового агента
//Если маршрут пустой - возвращает пустую строку ""
//Агент - торговый представитель маршрут которого необходимо получить
//ДатаМаршрута - дата выполнения маршрута
//ДлинаМаршрута - выходной параметр - длина пройденного маршрута
//ПутьКФайлу - путь к файлу с треком перемещения ТП
//РасстояниеДоКонтрагента - Расстояние на которое ТП должен приблизиться к Клиенту чтобы клиент считался посещенным
//ВремяПребыванияУКонтрагента - время которое ТП должен провести у Клиента чтобы клиент считался посещенным
Функция ПолучитьДлинуМаршрутаАгента(
		Агент, 
		ДатаМаршрута, 
		ПутьКФайлу, 
		_НачалоРаботы = Неопределено, 
		_КонецРаботы = Неопределено, 
		ВремяНачалаТрека = Неопределено, 
		ВремяОкончанияТрека = Неопределено) Экспорт
	ДлинаМаршрута=0;
	
	ЧасовойПояс=ПолучитьНастройку(Агент,"ЧасовойПояс",99);	
	НачалоРабочегоДня = ?(_НачалоРаботы = Неопределено, 
							ПолучитьНастройку(Агент,"НачалоРабочегоДня",Дата("00010101090000")), 
							_НачалоРаботы);
	КонецРабочегоДня = ?(_КонецРаботы = Неопределено, 
							ПолучитьНастройку(Агент,"КонецРабочегоДня",Дата("00010101180000")), 
							_КонецРаботы);
	НачалоРабочегоДня = ДатаИзДатаИВремя(ДатаМаршрута, НачалоРабочегоДня);
	КонецРабочегоДня = ДатаИзДатаИВремя(ДатаМаршрута, КонецРабочегоДня);
		
	ТаблМаршрут=Новый ТаблицаЗначений;
	ТаблМаршрут.Колонки.Добавить("Время"   ,Новый ОписаниеТипов("Дата"));
	ТаблМаршрут.Колонки.Добавить("Индекс"   ,Новый ОписаниеТипов("Число"));
	ТаблМаршрут.Колонки.Добавить("Широта"   ,Новый ОписаниеТипов("Число"));
	ТаблМаршрут.Колонки.Добавить("Долгота"   ,Новый ОписаниеТипов("Число"));
	ТаблМаршрут.Индексы.Добавить("Индекс, Время");	
	
	//Считать данные файла
	ТекстДок = Новый ЧтениеТекста(ПутьКФайлу,КодировкаТекста.ANSI);
	
	//считываем данные из файла трека в таблицу
	стр = ТекстДок.ПрочитатьСтроку();
	Пока стр<>Неопределено Цикл
		стр = СтрЗаменить(стр,Символы.Таб,Символы.ВК+Символы.ПС);
		
		СтрВремя=СтрПолучитьСтроку(стр,1);
		Попытка
			Время = ДатаИзСтрокиСКПК(СокрЛП(СтрВремя));
		Исключение
			стр = ТекстДок.ПрочитатьСтроку();
			продолжить; //неверное время 
		КонецПопытки;
		Время = КонвертироватьUTCВремяВЛокальное(Время, ЧасовойПояс);
		Если (НачалоРабочегоДня < Время) И (Время < КонецРабочегоДня) Тогда
			Индекс = 0;
			Попытка
				Индекс=Число(СтрПолучитьСтроку(стр,6));
			Исключение
				ЕстьИндексы=Ложь;				
			КонецПопытки;

			НовСтр=ТаблМаршрут.Добавить();			
			НовСтр.Время = Время;
			НовСтр.Индекс=Индекс;
			НовСтр.Долгота = Число(СтрПолучитьСтроку(стр,2));
			НовСтр.Широта = Число(СтрПолучитьСтроку(стр,3));	
			
		КонецЕсли;
		стр = ТекстДок.ПрочитатьСтроку();
	КонецЦикла;
	
	//сортируем маршрут по индексу и времени, если в файле индексов не было, то индекс у всех строк будет одинаковый - 0.
	ТаблМаршрут.Сортировать("Индекс,Время");
	//сворачиваем по всем колонкам - убираем 100№ дубли строк из-за разрыва связи при выгрузке с КПК
	ТаблМаршрут.Свернуть("Время, Индекс, Широта, Долгота");
	
	Координаты="";
	ПредШирота = Неопределено;
	ПредДолгота = Неопределено;
	ПредВремя = Неопределено;
	
	началоТрека	= Неопределено;
	окончаниеТрека = Неопределено;
	
	Для каждого стр из ТаблМаршрут Цикл		
		Расстояние = 0;
		Если (ПредВремя<>Неопределено) Тогда
			Расстояние = РасстояниеМеждуДвумяТочками(стр.Широта,стр.Долгота,ПредШирота,ПредДолгота);
		КонецЕсли;
		ПредВремя  = стр.Время;
		ПредДолгота  = стр.Долгота;
		ПредШирота  = стр.Широта;
		ДлинаМаршрута = ДлинаМаршрута + Расстояние;
	КонецЦикла;
	//Закончили читать файл
	
	Если ВремяНачалаТрека = Неопределено Или ВремяОкончанияТрека = Неопределено Тогда
	Иначе
		Если ТаблМаршрут.Количество() > 0 Тогда
			ВремяНачалаТрека = ТаблМаршрут[0].Время;
			ВремяОкончанияТрека = ТаблМаршрут[ТаблМаршрут.Количество() - 1].Время;
		Иначе
			ВремяНачалаТрека = Неопределено;
			ВремяОкончанияТрека = Неопределено;
		КонецЕсли;
	КонецЕсли;
	Возврат ДлинаМаршрута;
КонецФункции

//функция формирует и возвращает маршрут торгового агента
//Если маршрут пустой - возвращает пустую строку ""
//Агент - торговый представитель маршрут которого необходимо получить
//ДатаМаршрута - дата выполнения маршрута
//ДлинаМаршрута - выходной параметр - длина пройденного маршрута
//ПутьКФайлу - путь к файлу с треком перемещения ТП
//РасстояниеДоКонтрагента - Расстояние на которое ТП должен приблизиться к Клиенту чтобы клиент считался посещенным
//ВремяПребыванияУКонтрагента - время которое ТП должен провести у Клиента чтобы клиент считался посещенным
Функция ПолучитьМаршрутАгента(
		Агент,
		ДатаМаршрута, 
		ДлинаМаршрута,
		ПутьКФайлу,
		РасстояниеДоКонтрагента,
		ВремяПребыванияУКонтрагента, 
		_НачалоРаботы = Неопределено, 
		_КонецРаботы = Неопределено) Экспорт
	Перем ТаблКоординаты;	//таблица для хранения координат контрагентов
	Перем СписокКонтрагентов;	//список для хранения списка доступных контрагентов
	
	ДлинаМаршрута=0;
		
	ЧасовойПояс=ПолучитьНастройку(Агент,"ЧасовойПояс",99);	
	НачалоРабочегоДня = ?(_НачалоРаботы = Неопределено, 
							ПолучитьНастройку(Агент,"НачалоРабочегоДня",Дата("00010101090000")), 
							_НачалоРаботы);
	КонецРабочегоДня = ?(_КонецРаботы = Неопределено, 
							ПолучитьНастройку(Агент,"КонецРабочегоДня",Дата("00010101180000")), 
							_КонецРаботы);
	НачалоРабочегоДня = ДатаИзДатаИВремя(ДатаМаршрута, НачалоРабочегоДня);
	КонецРабочегоДня = ДатаИзДатаИВремя(ДатаМаршрута, КонецРабочегоДня);
	
	ПостроительКлиентов=Новый ПостроительЗапроса;
	ПостроительКлиентов.Текст="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ Контрагенты.Ссылка КАК Контрагент,Контрагенты.Родитель КАК Группа
	|ИЗ Справочник.Контрагенты КАК Контрагенты
	|ГДЕ НЕ Контрагенты.ЭтоГруппа";
	ПостроительКлиентов.ЗаполнитьНастройки();
	ОтборСв=Новый Структура;
	ОтборСв.Вставить("Пользователь",Агент);
	ОтборСв.Вставить("ИмяОбъекта",РССохраненныеНастройкиИмяОбъекта);
	ОтборСв.Вставить("НаименованиеНастройки","Отбор.Контрагенты");
	Табл=РегистрыСведений.СохраненныеНастройки.Получить(ОтборСв).СохраненнаяНастройка.Получить();
	ЗаполнитьОтборИзТаб(ПостроительКлиентов.Отбор,Табл,Ложь);
	ПостроительКлиентов.Выполнить();
	СписокКонтрагентов=Новый СписокЗначений;
	СписокКонтрагентов.ЗагрузитьЗначения(ПостроительКлиентов.Результат.Выгрузить().ВыгрузитьКолонку("Контрагент"));
	
	ТаблМаршрут=Новый ТаблицаЗначений;
	ТаблМаршрут.Колонки.Добавить("Время"   ,Новый ОписаниеТипов("Дата"));
	ТаблМаршрут.Колонки.Добавить("Индекс"   ,Новый ОписаниеТипов("Число"));
	ТаблМаршрут.Колонки.Добавить("Широта"   ,Новый ОписаниеТипов("Число"));
	ТаблМаршрут.Колонки.Добавить("Долгота"   ,Новый ОписаниеТипов("Число"));
	ТаблМаршрут.Колонки.Добавить("Контрагент"  ,Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблМаршрут.Колонки.Добавить("Прибыл"   ,Новый ОписаниеТипов("Дата"));
	ТаблМаршрут.Колонки.Добавить("Убыл"    ,Новый ОписаниеТипов("Дата"));
	ТаблМаршрут.Колонки.Добавить("ВремяПребывания" ,Новый ОписаниеТипов("Число"));
	ТаблМаршрут.Колонки.Добавить("Расстояние"     ,Новый ОписаниеТипов("Число"));
	ТаблМаршрут.Индексы.Добавить("Индекс, Время");
	
	ТаблПосещений=Новый ТаблицаЗначений;
	ТаблПосещений.Колонки.Добавить("Время"   ,Новый ОписаниеТипов("Дата"));
	ТаблПосещений.Колонки.Добавить("Индекс"   ,Новый ОписаниеТипов("Число"));
	ТаблПосещений.Колонки.Добавить("Широта"   ,Новый ОписаниеТипов("Число"));
	ТаблПосещений.Колонки.Добавить("Долгота"   ,Новый ОписаниеТипов("Число"));
	ТаблПосещений.Колонки.Добавить("Контрагент"  ,Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблПосещений.Колонки.Добавить("Прибыл"   ,Новый ОписаниеТипов("Дата"));
	ТаблПосещений.Колонки.Добавить("Убыл"    ,Новый ОписаниеТипов("Дата"));
	ТаблПосещений.Колонки.Добавить("ВремяПребывания" ,Новый ОписаниеТипов("Число"));
	ТаблПосещений.Колонки.Добавить("Расстояние"     ,Новый ОписаниеТипов("Число"));
	ТаблПосещений.Колонки.Добавить("Посещение"     ,Новый ОписаниеТипов("Булево"));
	
	//Считать данные файла
	ТекстДок = Новый ЧтениеТекста(ПутьКФайлу,КодировкаТекста.ANSI);
	
	Координаты="";
	
	ЗапросПоместить=Новый Запрос;
	ЗапросПоместить.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
//	ЗапросПоместить.Параметры.Вставить("СписокКонтрагентов",СписокКонтрагентов);
	ЗапросПоместить.Параметры.Вставить("Табл",ПолучитьКоординатыКонтрагентов(СписокКонтрагентов));
	ЗапросПоместить.Текст="
	|ВЫБРАТЬ
	| ВТ.Контрагент,
	| ВТ.Широта,
	| ВТ.Долгота,
	| 0 КАК Расстояние,
	| ЛОЖЬ КАК Обработано
	|ПОМЕСТИТЬ ВремТабл
	|ИЗ &Табл КАК ВТ
//	|ГДЕ ВТ.Контрагент В (&СписокКонтрагентов)
	|";
	
	ЗапросПоместить.Выполнить();
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=ЗапросПоместить.МенеджерВременныхТаблиц;
	Запрос.Текст="ВЫБРАТЬ * ИЗ ВремТабл";
	ТаблКоординаты=Запрос.Выполнить().Выгрузить();
	
	ЕстьИндексы=Истина;
	РадиусПорог=РасстояниеДоКонтрагента / 2;
	ТекРадиус=РасстояниеДоКонтрагента;
	Время = Неопределено;
	//считываем данные из файла трека в таблицу
	стр = ТекстДок.ПрочитатьСтроку();
	Пока стр<>Неопределено Цикл
		стр = СтрЗаменить(стр,Символы.Таб,Символы.ВК+Символы.ПС);
		
		СтрВремя=СтрПолучитьСтроку(стр,1);
		Попытка
			Время = ДатаИзСтрокиСКПК(СокрЛП(СтрВремя));
		Исключение
			стр = ТекстДок.ПрочитатьСтроку();
			продолжить; //неверное время 
		КонецПопытки;
		Время = КонвертироватьUTCВремяВЛокальное(Время, ЧасовойПояс);
		Если (НачалоРабочегоДня < Время) И (Время < КонецРабочегоДня) Тогда
			Индекс = 0;
			Попытка
				Индекс=Число(СтрПолучитьСтроку(стр,6));
			Исключение
				ЕстьИндексы=Ложь;				
			КонецПопытки;

			НовСтр=ТаблМаршрут.Добавить();			
			НовСтр.Время = Время;
			НовСтр.Индекс=Индекс;
			НовСтр.Долгота = Число(СтрПолучитьСтроку(стр,2));
			НовСтр.Широта = Число(СтрПолучитьСтроку(стр,3));	
			НовСтр.Расстояние = -1;
			
		КонецЕсли;
		стр = ТекстДок.ПрочитатьСтроку();
	КонецЦикла;
	//Закончили читать файл
	
	//сортируем маршрут по индексу и времени, если в файле индексов не было, то индекс у всех строк будет одинаковый - 0.
	ТаблМаршрут.Сортировать("Индекс,Время");
	//сворачиваем по всем колонкам - убираем 100№ дубли строк из-за разрыва связи при выгрузке с КПК
	ТаблМаршрут.Свернуть("Время, Индекс, Широта, Долгота, Контрагент, Прибыл, Убыл, ВремяПребывания, Расстояние");
	
	ПредШирота = Неопределено;
	ПредДолгота = Неопределено;
	ПредВремя = Неопределено;	
	
	Для каждого стр из ТаблМаршрут Цикл
		
		Расстояние = 0;
		Если (ПредВремя<>Неопределено) Тогда
			Расстояние = РасстояниеМеждуДвумяТочками(стр.Широта,стр.Долгота,ПредШирота,ПредДолгота);
		КонецЕсли;
		ТекРадиус=ТекРадиус+Расстояние;
		Если ТекРадиус>РадиусПорог Тогда
			ТаблКоординаты.ЗаполнитьЗначения(0,"Расстояние");
			Для Каждого СтрКоорд Из ТаблКоординаты Цикл
				Если СтрКоорд.Расстояние < РасстояниеДоКонтрагента + ТекРадиус Тогда
				//пересчитаем расстояние только для тех, кто теоретически может попасть в зону посещения агентом
					СтрКоорд.Расстояние=РасстояниеМеждуДвумяТочками(стр.Широта,стр.Долгота,СтрКоорд.Широта,СтрКоорд.Долгота);
				КонецЕсли;
			КонецЦикла;
			ТаблКоординаты.Сортировать("Расстояние");
			ТекРадиус=0;
		КонецЕсли;
		ПредВремя  = стр.Время;
		ПредДолгота  = стр.Долгота;
		ПредШирота  = стр.Широта;
		ДлинаМаршрута = ДлинаМаршрута + Расстояние;
		
		//для каждого незакрытого посещения из ТаблПосещений необходимо проверить,
		// что он входит в радиус посещения для рассматриваемой точки
		Для Каждого посещение из ТаблПосещений Цикл
			Если посещение.Посещение Тогда
			Иначе
				стрКоординаты = ТаблКоординаты.НайтиСтроки(
					Новый Структура("Контрагент", посещение.Контрагент));
				Если стрКоординаты.Количество() > 0 Тогда
				//для данного клиента есть данные по расстоянии от текущей точки
					стрКоорд = стрКоординаты[0];
					стрКоорд.Обработано = Истина;
					Если СтрКоорд.Расстояние - ТекРадиус <= РасстояниеДоКонтрагента Тогда 
					//расстояние меньше разрешенного порога
						посещение.Расстояние=РасстояниеМеждуДвумяТочками(стр.Широта,стр.Долгота,СтрКоорд.Широта,СтрКоорд.Долгота);							
						посещение.убыл = Стр.Время;
					Иначе
						посещение.Посещение = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		//для каждого .Обработано = Ложь элемента из ТаблКоординаты, входящего
		//в радиус посещения необходимо добавить новую строку в ТаблПосещений
		Для Каждого коорд из ТаблКоординаты Цикл
			Если коорд.Обработано Тогда
				коорд.Обработано = Ложь;
			Иначе
				Если Коорд.Расстояние - ТекРадиус <= РасстояниеДоКонтрагента Тогда 
					Расстояние=РасстояниеМеждуДвумяТочками(стр.Широта,стр.Долгота,Коорд.Широта,Коорд.Долгота);
					//Если расстояние от текущей точки до клиента меньше необходимого минимума, 
					//и если он меньше чем расстояние до найденного ранее клиента, то приписываем эту точку в текущему клиенту
					Если Расстояние <= РасстояниеДоКонтрагента
							И ((Стр.Расстояние < 0) ИЛИ (Расстояние < Стр.Расстояние)) Тогда  //отклонение координат в пределах нормы
						//ищем в таблице посещений точку соотвествтвующую СтрКоорд
						посещения = ТаблПосещений.НайтиСтроки(
							новый Структура("Контрагент, Посещение", коорд.Контрагент, Ложь));
						Если посещения.Количество()>0 Тогда
						//должны были отловить в предыдущем цикле
						Иначе
							новПосещ = ТаблПосещений.Добавить();
							новПосещ.Время				= Стр.Время;
							новПосещ.Индекс				= Стр.Индекс;
							новПосещ.Контрагент			= коорд.Контрагент;
							новПосещ.Расстояние			= Расстояние;
							новПосещ.Широта				= Стр.Широта;
							новПосещ.Долгота			= Стр.Долгота;							
							новПосещ.Прибыл				= Стр.Время;
							новПосещ.Убыл				= Стр.Время;																
						КонецЕсли;
					КонецЕсли;
				Иначе
					//расстояние до клиента больше разрешенного, если посещение этог клиента фиксировалось, 
					//тогда оно должно было быть закрыто ранее							
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;			
	
	КонецЦикла;
	
//собираем 2 последовательных посещения одного клиента в одно посещение	
	Посещения = ТаблПосещений.СкопироватьКолонки();
    ЕстьИзменения = Истина;
	
    Пока ЕстьИзменения Цикл
		ЕстьИзменения = Ложь;
		Посещения.Очистить();
		
		Для каждого стр из ТаблПосещений Цикл
			Если Посещения.Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(Посещения.Добавить(), стр);
			Иначе
				последнееПосещение = Посещения[Посещения.Количество() - 1];
				Если стр.Контрагент = последнееПосещение.Контрагент 
					И последнееПосещение.Убыл + ВремяПребыванияУКонтрагента > стр.Прибыл Тогда
					последнееПосещение.Убыл = стр.Убыл;
				    ЕстьИзменения = Истина;
				Иначе
					ЗаполнитьЗначенияСвойств(Посещения.Добавить(), стр);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ТаблПосещений.Очистить();
		
		//Для каждого стр из ТаблПосещений Цикл
		Для каждого стр из Посещения Цикл
			Если стр.Убыл - стр.Прибыл >= ВремяПребыванияУКонтрагента Тогда		
				новСтр = ТаблПосещений.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, стр);		
				новСтр.ВремяПребывания = стр.Убыл - стр.Прибыл;
			Иначе
			    ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЦикла;		
	КонецЦикла;
	
	//Для каждого стр из ТаблПосещений Цикл
	Для каждого стр из ТаблПосещений Цикл
		Если стр.Убыл - стр.Прибыл >= ВремяПребыванияУКонтрагента Тогда		
			новСтр = ТаблМаршрут.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, стр);		
			новСтр.ВремяПребывания = стр.Убыл - стр.Прибыл;
		КонецЕсли;
	КонецЦикла;
	
	//сортируем маршрут по индексу и времени, если в файле индексов не было, то индекс у всех строк будет одинаковый - 0.
	ТаблМаршрут.Сортировать("Индекс,Время");
	//сворачиваем по всем колонкам - убираем 100№ дубли строк из-за разрыва связи при выгрузке с КПК
	ТаблМаршрут.Свернуть("Время, Индекс, Широта, Долгота, Контрагент, Прибыл, Убыл, ВремяПребывания, Расстояние");
	
	Возврат ТаблМаршрут;
КонецФункции

//функция возвращает описание задания для группы
Функция ПолучитьОписаниеГруппы(Группа) Экспорт
	группаОписание = Группа.ОписаниеСобытия;
	Если ПустаяСтрока(группаОписание) Тогда
		Запрос=Новый Запрос;
		Запрос.Текст="
			|ВЫБРАТЬ ПЕРВЫЕ 1 События.СодержаниеСобытия КАК Описание
			|ИЗ Документ.Событие КАК События
			|ГДЕ События.ГруппаСобытия=&Группа
			|УПОРЯДОЧИТЬ ПО События.Ссылка УБЫВ
			|";
		Запрос.Параметры.Вставить("Группа",Группа);
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Описание;
		КонецЕсли;
	Иначе
		Возврат группаОписание;
	КонецЕсли;	
КонецФункции

//функция возвращает таблицу значений содержащую данные о маршруте торгового представителя Агент
//на дату Дата, 
//Если ТолькоЗапланированные, то будут выгружены только запланированные события
Функция ПолучитьПланПосещений(
		Агент,
		Дата,
		ТолькоЗапланированные,
		спКонтрагенты, 
		списокРазрешенныхЗаданий = Неопределено) Экспорт
	Запрос=Новый Запрос;
	ТекстЗапроса=
		"ВЫБРАТЬ
		|	События.Ссылка КАК Событие,
		|	События.СостояниеСобытия КАК Состояние,
		|	События.Контрагент КАК Контрагент,
		|	События.ОписаниеСобытия КАК Задание,
		|	События.СодержаниеСобытия КАК Описание,
		|	События.Комментарий КАК Отчет,
		|	События.НачалоСобытия КАК НачалоСобытия
		|ИЗ
		|	Документ.Событие КАК События
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(События.Дата, ДЕНЬ) МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ), ДЕНЬ, -31) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
		|	И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ) МЕЖДУ НАЧАЛОПЕРИОДА(События.НачалоСобытия, ДЕНЬ) И КОНЕЦПЕРИОДА(События.ОкончаниеСобытия, ДЕНЬ)
		|	И События.Ответственный = &Агент
		|	И НЕ События.ПометкаУдаления" + ?(спКонтрагенты = Неопределено, "", "
		|	И События.Контрагент В(&Контрагенты)");
	Если ТолькоЗапланированные Тогда
		ТекстЗапроса=ТекстЗапроса+"
			|	И События.СостояниеСобытия=ЗНАЧЕНИЕ(Перечисление.СостоянияСобытий.Запланировано)";
	КонецЕсли;
	
	Если списокРазрешенныхЗаданий = Неопределено Тогда
	Иначе
		ТекстЗапроса=ТекстЗапроса+"
			|	И События.ОписаниеСобытия В(&СписокРазрешенныхЗаданий)";
		Запрос.Параметры.Вставить("СписокРазрешенныхЗаданий", списокРазрешенныхЗаданий);
	КонецЕсли;
	ТекстЗапроса=ТекстЗапроса+"
		|УПОРЯДОЧИТЬ ПО События.НачалоСобытия,События.Контрагент
		|АВТОУПОРЯДОЧИВАНИЕ
		|";
	Запрос.Текст=ТекстЗапроса;
	Запрос.Параметры.Вставить("Агент",Агент);
	Запрос.Параметры.Вставить("Контрагенты",спКонтрагенты);
	Запрос.Параметры.Вставить("Дата",НачалоДня(Дата));
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

//функция возвращает таблицу значений содержащую данные о маршруте торгового представителя Агент
//на дату Дата, 
//Если ТолькоЗапланированные, то будут выгружены только запланированные события
Функция ПолучитьПланПосещенийWM(Агент, Дата, спКонтрагенты) Экспорт
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Данные.Ссылка.Контрагент КАК Контрагент
	|ИЗ
	|	(ВЫБРАТЬ
	|		События.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.Событие КАК События
	|	ГДЕ
	|		НЕ События.ПометкаУдаления 
	|		И События.СостояниеСобытия = ЗНАЧЕНИЕ(Перечисление.СостоянияСобытий.Запланировано)
	|		И События.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаНачала, ДЕНЬ, -31) И &ДатаОкончания) КАК Данные
	|ГДЕ
	|	Данные.Ссылка.НачалоСобытия >= &ДатаНачала
	|	И Данные.Ссылка.ОкончаниеСобытия <= &ДатаОкончания
	|	И Данные.Ссылка.Ответственный = &Агент"
		+ ?(спКонтрагенты = Неопределено, 
			"", 
			"	И Данные.Ссылка.Контрагент В(&Контрагенты)") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Данные.Ссылка.НачалоСобытия,
	|	Данные.Ссылка.Контрагент
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос = Новый Запрос;
	Запрос.Текст=ТекстЗапроса;
	Запрос.Параметры.Вставить("Агент", Агент);
	Запрос.Параметры.Вставить("Контрагенты", спКонтрагенты);
	Запрос.Параметры.Вставить("ДатаНачала", НачалоДня(Дата));
	Запрос.Параметры.Вставить("ДатаОкончания", КонецДня(Дата));
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Процедура проверяет реквизиты на заполненность
// Если хотя бы один из них НЕ заполнен то Отказ становится Истина и в сообщении
// пишется о незаполненном реквизите
// Параметры:
// ОбъектПроверки - тот объект реквизиты которого нужно проверить на заполненность
// СписокИменРеквизитов - список реквизитов для проверки (В значении - Имя реквизиты, 
//										в представлении - строковое название реквизита)
// Отказ (выходное значение) - есть ли незаполненный реквизит или нет
//незаполненных реквизитах, а Отказ НЕ изменяется
Процедура ПроверитьЗаполнениеРеквизитов(ОбъектПроверки, СписокИменРеквизитов, Отказ) Экспорт
	Если (СписокИменРеквизитов = Неопределено) Тогда Возврат КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокИменРеквизитов Цикл
		Если НЕ ЗначениеЗаполнено(ОбъектПроверки[ЭлементСписка.Значение]) Тогда
			СообщениеОНевозможностиЗаписи = "Реквизит """+СокрЛП(ЭлементСписка.Представление)+""" НЕ заполнен!";
			
			Отказ = Истина;
			Предупреждение(СообщениеОНевозможностиЗаписи);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//Функция формирует и возвращает таблицу значений содержащую информацию о географических координатах контрагентов
Функция ПолучитьКоординатыКонтрагентов(МассивКонтрагентов) Экспорт
	ТаблКоординат=Новый ТаблицаЗначений;
	ТаблКоординат.Колонки.Добавить("Контрагент",Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблКоординат.Колонки.Добавить("Широта",Новый ОписаниеТипов("Число"));
	ТаблКоординат.Колонки.Добавить("Долгота",Новый ОписаниеТипов("Число"));
	
	Запрос=Новый Запрос;
	Запрос.Текст="
		|ВЫБРАТЬ
		|	Координаты.Контрагент,
		|	МАКСИМУМ(Координаты.Широта) КАК Широта,
		|	МАКСИМУМ(Координаты.Долгота) КАК Долгота
		|ИЗ
		|	(ВЫБРАТЬ
		|		Контакты.Объект КАК Контрагент,
		|		ВЫРАЗИТЬ(Контакты.Представление КАК СТРОКА(20)) КАК Широта,
		|		NULL КАК Долгота
		|	ИЗ
		|		РегистрСведений.КонтактнаяИнформация КАК Контакты
		|	ГДЕ
		|		Контакты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Другое)
		|		И Контакты.Вид = &ВидШирота "
		+ ?(МассивКонтрагентов = Неопределено, "", "
		|		И Контакты.Объект В(&Контрагенты)") + "
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Контакты.Объект,
		|		NULL,
		|		ВЫРАЗИТЬ(Контакты.Представление КАК СТРОКА(20))
		|	ИЗ
		|		РегистрСведений.КонтактнаяИнформация КАК Контакты
		|	ГДЕ
		|		Контакты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Другое)
		|		И Контакты.Вид = &ВидДолгота "
		+ ?(МассивКонтрагентов = Неопределено, "", "
		|		И Контакты.Объект В(&Контрагенты)") + ") КАК Координаты
		|
		|СГРУППИРОВАТЬ ПО
		|	Координаты.Контрагент";
		
	Запрос.параметры.Вставить("ВидШирота",
		Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Географическая широта"));
	Запрос.параметры.Вставить("ВидДолгота",
		Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Географическая долгота"));
	Запрос.параметры.Вставить("Контрагенты",
		МассивКонтрагентов);
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НовСтр=ТаблКоординат.Добавить();
		НовСтр.Контрагент=Выборка.Контрагент;
		Попытка
			НовСтр.Широта=Число(Выборка.Широта);
		Исключение
		КонецПопытки;
		Попытка
			НовСтр.Долгота=Число(Выборка.Долгота);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Возврат ТаблКоординат;
КонецФункции

//процедура устанавливает координаты указанному контрагенту
//контрагент - ссылка на контрагента которому необходимо установить координаты
// (Широта, Долгота) - устанавливаемые координаты
Процедура УстановитьКоординатыКонтрагента(Контрагент,Широта,Долгота) Экспорт
	Запись=РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
	Запись.Объект=Контрагент;
	Запись.Тип=Перечисления.ТипыКонтактнойИнформации.Другое;
	Запись.Вид=Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Географическая широта");
	Запись.Представление=Строка(Широта);
	Запись.Записать();
	
	Запись=РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
	Запись.Объект=Контрагент;
	Запись.Тип=Перечисления.ТипыКонтактнойИнформации.Другое;
	Запись.Вид=Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Географическая долгота");
	Запись.Представление=Строка(Долгота);
	Запись.Записать();
КонецПроцедуры

//Возвращает запись регистра сведений соответствующую отбору
//Агент - пользователь владелец настройки
//НаименованиеНастройки - название настройки, значение которой необходимо прочитать
Функция ПолучитьЗначениеНастройки(Агент,НаименованиеНастройки) Экспорт
	Отбор=Новый Структура;
	Отбор.Вставить("Пользователь",Агент);
	Отбор.Вставить("ИмяОбъекта",РССохраненныеНастройкиИмяОбъекта);
	Отбор.Вставить("НаименованиеНастройки",НаименованиеНастройки);
	Возврат РегистрыСведений.СохраненныеНастройки.Получить(Отбор).СохраненнаяНастройка.Получить();
КонецФункции

//функция возвращает текст запроса для отбора по агентам
Процедура ИнициализироватьПостроительОтчетаАгенты(ПО_Агенты) Экспорт
	ПО_Агенты.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Пользователи.Ссылка КАК Агент
	|ИЗ
	|	Справочник.ГруппыПользователей КАК Группа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппаПользователи
	|		ПО Группа.Ссылка = ГруппаПользователи.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (ГруппаПользователи.Пользователь = Пользователи.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО (Пользователи.ФизЛицо = ФизическиеЛица.Ссылка)
	|ГДЕ
	|	Группа.Ссылка = &ГруппаМобиС
	|	И Пользователи.ЭтоГруппа = ЛОЖЬ
	|	И Пользователи.ПометкаУдаления = ЛОЖЬ
	|	И ФизическиеЛица.ПометкаУдаления = ЛОЖЬ
	|{ГДЕ
	|	ГруппаПользователи.Пользователь.* КАК Агент}
	|
	|УПОРЯДОЧИТЬ ПО
	|	Агент
	|АВТОУПОРЯДОЧИВАНИЕ";
	ПО_Агенты.Параметры.Вставить("ГруппаМобиС", ГруппаМобиС);
	ПО_Агенты.ЗаполнитьНастройки();
КонецПроцедуры

//функция возвращает список кодов агентов доступных для данного супервайзера
функция ПолучитьМассивПодчиненныхАгентовСупервайзера(Супервайзер) Экспорт
	Табл = ПолучитьТаблицуАгентов();
	МассивАгентов = новый Массив;
	//необходимо проверить вхождение текущего пользователя в список супервайзеров для агента
	МассивАгентов.Добавить(Супервайзер);
	для каждого стр из Табл Цикл
		тзСупервайзеры = ПрочитатьСупервайзеров(стр.Агент);
		Если (тзСупервайзеры.Найти(Супервайзер, "Супервайзер") <> Неопределено) Тогда
			МассивАгентов.Добавить(стр.Агент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивАгентов;
КонецФункции

//функция возвращает список кодов агентов доступных для данного супервайзера
функция ПолучитьТаблицуАгентовСупервайзера(Супервайзер = Неопределено) Экспорт
	Табл = ПолучитьТаблицуАгентов();	
	ЕстьПолныеПрава = Супервайзер = Неопределено;
	Если НЕ ЕстьПолныеПрава Тогда
		Попытка
			пользовательИБ = Неопределено;
			Если Метаданные.Справочники.Пользователи.Реквизиты.Найти("ИдентификаторПользователяИБ") = Неопределено Тогда
				пользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Супервайзер.ФизЛицо.Наименование);
			Иначе
				пользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Супервайзер.ИдентификаторПользователяИБ);
			КонецЕсли;
			Если пользовательИБ = Неопределено Тогда
			Иначе
				ЕстьПолныеПрава = пользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава);
			КонецЕсли;
		Исключение
			ЕстьПолныеПрава = Ложь;
		КонецПопытки;
	КонецЕсли;
	Если ЕстьПолныеПрава Тогда
		Возврат Табл;
	Иначе		
		тзАгенты = новый ТаблицаЗначений;
		тзАгенты.Колонки.Добавить("Агент");
		тзАгенты.Колонки.Добавить("Код");
		//необходимо проверить вхождение текущего пользователя в список супервайзеров для агента
		для каждого стр из Табл Цикл
			тзСупервайзеры = ПрочитатьСупервайзеров(стр.Агент);
			Если (тзСупервайзеры.Количество() = 0) или (тзСупервайзеры.Найти(Супервайзер, "Супервайзер") <> Неопределено) Тогда
				ЗаполнитьЗначенияСвойств(тзАгенты.Добавить(), стр);
			КонецЕсли;
		КонецЦикла;
		Возврат тзАгенты;
	КонецЕсли;	
КонецФункции

//функция возвращает список кодов агентов доступных для данного супервайзера
функция ПолучитьМассивКодовАгентовСупервайзера(Супервайзер = Неопределено) Экспорт
	Табл = ПолучитьТаблицуАгентов();
	МассивАгентов = новый Массив;
	ЕстьПолныеПрава = Супервайзер = Неопределено;
	Если НЕ ЕстьПолныеПрава Тогда
		Попытка
			пользовательИБ = Неопределено;
			Если Метаданные.Справочники.Пользователи.Реквизиты.Найти("ИдентификаторПользователяИБ") = Неопределено Тогда
				пользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Супервайзер.ФизЛицо.Наименование);
			Иначе
				пользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Супервайзер.ИдентификаторПользователяИБ);
			КонецЕсли;
			Если пользовательИБ = Неопределено Тогда
				пользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Супервайзер.Наименование);
				Если пользовательИБ = Неопределено Тогда
					ЕстьПолныеПрава = Ложь;
				Иначе
					ЕстьПолныеПрава = пользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава);
				КонецЕсли;
			Иначе
				ЕстьПолныеПрава = пользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава);
			КонецЕсли;
		Исключение
			ЕстьПолныеПрава = Ложь;
		КонецПопытки;
	КонецЕсли;
	Если ЕстьПолныеПрава Тогда
		для каждого стр из Табл Цикл
			МассивАгентов.Добавить(стр.Код);
		КонецЦикла;
	Иначе		
	//необходимо проверить вхождение текущего пользователя в список супервайзеров для агента
		для каждого стр из Табл Цикл
			тзСупервайзеры = ПрочитатьСупервайзеров(стр.Агент);
			Если (тзСупервайзеры.Количество() = 0) или (тзСупервайзеры.Найти(Супервайзер, "Супервайзер") <> Неопределено) Тогда
				МассивАгентов.Добавить(стр.Код);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	Возврат МассивАгентов;
КонецФункции

// Формирует таблицу зарегистрированных в системе торговых агентов
// Возвращаемое значение: ТаблицаЗначений с колонками:
// 		Агент - ссылка на элемент справочника Пользователи, агент
// 		Код - Строка, код агента для КПК
Функция ПолучитьТаблицуАгентов() Экспорт
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Пользователи.Ссылка КАК Агент,
	|	ВЫРАЗИТЬ(ФизическиеЛица.Код КАК СТРОКА) КАК Код
	|ИЗ
	|	Справочник.ГруппыПользователей КАК Группа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппаПользователи
	|		ПО Группа.Ссылка = ГруппаПользователи.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (ГруппаПользователи.Пользователь = Пользователи.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО (Пользователи.ФизЛицо = ФизическиеЛица.Ссылка)
	|ГДЕ
	|	Группа.Ссылка = &ГруппаМобиС
	|	И Пользователи.ЭтоГруппа = ЛОЖЬ
	|	И Пользователи.ПометкаУдаления = ЛОЖЬ
	|	И ФизическиеЛица.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Агент
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.Параметры.Вставить("ГруппаМобиС", ГруппаМобиС);
				 
	Рез=Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр Из Рез Цикл
		Стр.Код=СокрЛП(Стр.Код);
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

// Формирует таблицу с параметрами всех выгружаемых договоров
// Параметры:
// 		спКонтрагентов - СписокЗначений, список контрагентов, выгружаемых на КПК
// 		тзОрганизаций - ТаблицаЗначений, таблица организаций, выгружаемых на КПК
// Возвращаемое значение:
// 		ТаблицаЗначений с колонками:
// 			Наименование - Строка, наименование договора
// 			КОД - Строка, код договора
// 			ТипЦен - ссылка на элемент справочника ТипыЦенНоменклатуры
// 			КонтрагентКод - Строка, код контрагента
// 			Организация_Код - Строка, код организации
// 			Долг - Число, долг по договору
// 			ВидДоговора - соответствующее поле справочника ДоговорыКонтрагентов
// 			ДопустимаяСуммаЗадолженности - соответствующее поле справочника ДоговорыКонтрагентов,
// 			ДопустимоеЧислоДнейЗадолженности - соответствующее поле справочника ДоговорыКонтрагентов
// 			КонтролироватьСуммуЗадолженности - соответствующее поле справочника ДоговорыКонтрагентов
// 			КонтролироватьЧислоДнейЗадолженности - соответствующее поле справочника ДоговорыКонтрагентов
// 			ВалютаВзаиморасчетов - соответствующее поле справочника ДоговорыКонтрагентов
// 			Контрагент - ссылка на элемент справочника Контрагенты, контрагент, с которым оформлен
// 				договор
// 			Договор - ссылка на элемент справочника ДоговорыКонтрагентов, собственно, сам договор
Функция ПолучитьТаблицуДоговоров(
		спКонтрагентов,
		тзОрганизаций, 
		ТипЦенПоУмолчанию, 
		ТипСоздаваемогоДокументаПокупка, 
		ТорговляСКолес) Экспорт
//07.11.13 - договора выгружаются в зависимости от флага "Торговля с колес",
//Если агент работает по схеме торговля с колес, то он получает на КПК все договора иначе только договора "По договору в целом"
//Если агнету разрешна покупака товара (документ Поступление товаров услуг) тогда в выгрузку добавляются договора "С поставщиком"

//27.02.14 - изменения в выгрузке договоров
//1. Если в параметрах Моби-С указана работа по холдингам, то список договоров, выгружаемый на КПК необходимо формировать согласно:
// 1) если клиент соответствует грузополучателю, то для контрагентов необходимо выгружать договора зарегистрированные на головное предприятие
//    для самого головного предприятия Контрагент.Ссылка = Контрагент.ГоловнойКонтрагент - выгрузятся договора на само предприятие
//    для входящих в холдинг - выгрузятся договора на головное предприятие холдинга
// 2) если клиент соответствует Контрагенту(Покупателю), то для контрагентов необходимо выгрузить договора,
//    зарегистрированные именно на этих контрагентов
//2. Если в параметрах Моби-С указана работа по адресам доставки, то на КПК необходимо выгружать договора, зарегистрированные на контрагентов

//СпособОрганизацииТТ:
//0 - холдинг
//1 - адрес доставки
//СоответствиеКонтрагента:
//0 - контрагент
//1 - грузополучатель		
	
	ВладелецДоговора = ?(
		СпособОрганизацииТТ = 0 И СоответствиеКонтрагента = 1,
		"ГоловнойКонтрагент",
		"Ссылка");

	ТекстЗапроса=
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Договоры.Наименование КАК Наименование,
		|	Договоры.Код КАК Код,
		|	Договоры.ТипЦен КАК ТипЦен,
		|	Контрагенты.Код КАК КонтрагентКод,
		|	Договоры.Организация.Код КАК Организация_Код,
		|	ЕСТЬNULL(Долги.СуммаУпрОстаток, 0) КАК Долг,
		|	Договоры.КонтролироватьСуммуЗадолженности,
		|	Договоры.КонтролироватьЧислоДнейЗадолженности,
		|	Договоры.ДопустимоеЧислоДнейЗадолженности,
		|	Договоры.ДопустимаяСуммаЗадолженности * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) / ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1) КАК ДопустимаяСуммаЗадолженности,
		|	Договоры.ВалютаВзаиморасчетов,
		|	Договоры.Владелец.Ссылка КАК Контрагент,
		|	Договоры.Ссылка КАК Договор,
		|	МИНИМУМ(ДолгиПоДокументам.ДокументРасчетовСКонтрагентом.Дата) КАК ДатаПервогоДокумента
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки КАК Долги
		|			ПО Договоры.Ссылка = Долги.ДоговорКонтрагента
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки КАК ДолгиПоДокументам
		|			ПО Договоры.Ссылка = ДолгиПоДокументам.ДоговорКонтрагента
		|				И (ДолгиПоДокументам.СуммаВзаиморасчетовОстаток > 0)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
		|			ПО Договоры.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
		|		ПО Контрагенты." + ВладелецДоговора + " = Договоры.Владелец				 
		|ГДЕ
		|	Договоры.ПометкаУдаления = ЛОЖЬ
		|	И Договоры.ВидДоговора В(&СпТиповДоговоров)
		|	И Контрагенты.Ссылка В(&спКонтрагентов)
		|	И Договоры.Организация В(&спОрганизаций)" + ?(ТорговляСКолес, "", "
		|	И Договоры.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом)") + "
		|
		|СГРУППИРОВАТЬ ПО
		|	Договоры.Наименование,
		|	Договоры.Код,
		|	Договоры.ТипЦен,
		|	Контрагенты.Код,
		|	Договоры.Организация.Код,
		|	Договоры.КонтролироватьСуммуЗадолженности,
		|	Договоры.КонтролироватьЧислоДнейЗадолженности,
		|	Договоры.ДопустимоеЧислоДнейЗадолженности,
		|	Договоры.ДопустимаяСуммаЗадолженности * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) / ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1),
		|	Договоры.ВалютаВзаиморасчетов,
		|	Договоры.Ссылка,
		|	Договоры.Владелец.Ссылка,
		|	ЕСТЬNULL(Долги.СуммаУпрОстаток, 0)";	
					 
	Запрос=Новый Запрос(ТекстЗапроса);  
	СпТиповДоговоров = Новый СписокЗначений;
	СпТиповДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Если ТипСоздаваемогоДокументаПокупка=1 Тогда //поступление товаров и УСЛУГ
	    СпТиповДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	КонецЕсли; 	
	//спВедениеВзаиморасчетов = Новый СписокЗначений;
	//спВедениеВзаиморасчетов.Добавить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
	//Если (ТорговляСКолес) Тогда
	//	спВедениеВзаиморасчетов.Добавить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	//	спВедениеВзаиморасчетов.Добавить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам);
	//КонецЕсли; 
	//Запрос.УстановитьПараметр("спВедениеВзаиморасчетов",спВедениеВзаиморасчетов);
	Запрос.УстановитьПараметр("спКонтрагентов",спКонтрагентов);
	Запрос.УстановитьПараметр("СпТиповДоговоров",СпТиповДоговоров);
	Запрос.УстановитьПараметр("спОрганизаций",тзОрганизаций.ВыгрузитьКолонку("Организация"));
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Для каждого стрТЗ из ТЗ цикл
		ТипЦен=стрТЗ.ТипЦен;
		Если ТипЗнч(ТипЦен)=Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов") Тогда
			ТипЦен=ТипЦенПоУмолчанию;
		КонецЕсли;
		Если ТипЦен=Неопределено Тогда 
			ТипЦен=ТипЦенПоУмолчанию; 
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда 
			ТипЦен=ТипЦенПоУмолчанию; 
		КонецЕсли;
		стрТЗ.ТипЦен = ТипЦен;
	КонецЦикла; 

	возврат ТЗ;
КонецФункции // ПолучитьТаблДоговора()

// функция для конвертации даты и времени из формата UTC в локальное время
// из КПК в UTC выгружаются данные GPS
// функция ConvertUTCtoLocal берется из PocketServer.dll
// ГлобальноеВремя - время по Гринвичу. GMT0
// ЧасовойПояс - часовой пояс в котором работает агент
// Если часовой пояс = 99, то берется часовой пояс как на текущем компьютере
Функция КонвертироватьUTCВремяВЛокальное(ГлобальноеВремя,ЧасовойПояс=99) Экспорт
	Если ЧасовойПояс=99 Тогда
		//если переданы дата и время, тогда преобразуем 
		Если Год(ГлобальноеВремя) > 1900 Тогда
			ДатаИзDll = ДатаИзСтрокиСКПК(Сервер.ConvertUTCtoLocal(ГлобальноеВремя));
		Иначе
		//передано только время, значит подставляем текущую дату, а потом подставим пустую дату
			Дата = ДатаИзДатаИВремя(ТекущаяДата(), ГлобальноеВремя);
			_ДатаИзDll = ДатаИзСтрокиСКПК(Сервер.ConvertUTCtoLocal(Дата));
			ДатаИзDll = ДатаИзДатаИВремя(ДатаПустая(), _ДатаИзDll);
		КонецЕсли;
		Возврат ДатаИзDll;
	Иначе
		Возврат ГлобальноеВремя+ЧасовойПояс*60*60;
	КонецЕсли;	
КонецФункции	

функция ПолучитьАгентаПоКоду(КодАгента) Экспорт
	ТаблАгентов=ПолучитьТаблицуАгентов();
	Стр=ТаблАгентов.Найти(СокрЛП(КодАгента),"Код");
	Если Стр=Неопределено Тогда 
		Возврат Неопределено; 
	Иначе
		Возврат Стр.Агент;
	КонецЕсли;
		
	
КонецФункции

// Сформировать структуру со ВСЕМИ параметрами Агента по его коду. Используется для связи с КПК
// Параметры 
//     КодАгента - Строка, код агента, переданный из КПК
// Возвращаемое значение - Структура 
Функция ПолучитьВсеНастройкиАгента(КодАгента) Экспорт
	агент = ПолучитьАгентаПоКоду(КодАгента);
	Если агент = Неопределено Тогда 
		Возврат Неопределено; 
	КонецЕсли;
	
	ПараметрыАгента = Новый Структура();
	
	ВыбАгент = Агент;
	ПараметрыАгента.Вставить("Агент",
		ВыбАгент);
	ПараметрыАгента.Вставить("ПапкаКоординат",
		ПолучитьКаталог("Agents\"+СокрЛП(ВыбАгент.ФизЛицо.код)));
	
	ПараметрыАгента.Вставить("Склады",
		ПрочитатьСклады(ВыбАгент));
	ПараметрыАгента.Вставить("СкладПолучатель",
		ПолучитьНастройку(ВыбАгент,"СкладПолучатель",Справочники.Склады.ПустаяСсылка()));	
	ПараметрыАгента.Вставить("СкладОтправитель",
		ПолучитьНастройку(ВыбАгент,"СкладОтправитель",Справочники.Склады.ПустаяСсылка()));	
	
	ПараметрыАгента.Вставить("Организации",
		ПрочитатьОрганизации(ВыбАгент));
	
	ПараметрыАгента.Вставить("Подразделение",
		ПолучитьНастройкуПользователя(
			ВыбАгент,ПланыВидовХарактеристик.НастройкиПользователей.ОсновноеПодразделение,
			Справочники.Подразделения.ПустаяСсылка()));
   	ПараметрыАгента.Вставить("ГруппаДляНовыхКонтрагентов", 
		ПолучитьНастройку(ВыбАгент,"ГруппаДляНовыхКонтрагентов", Справочники.Контрагенты.ПустаяСсылка())); 
		
	ПараметрыАгента.Вставить("ТипЦенПоУмолчанию",
		ПолучитьНастройкуПользователя(
			ВыбАгент,ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойТипЦенПродажи,ОсновнойТипЦенПоУмолчанию));
	ПараметрыАгента.Вставить("ВыгружатьТипыЦенИзДоговоров", 
		ПолучитьНастройку(ВыбАгент,"ВыгружатьТипыЦенИзДоговоров",Истина));
	ПараметрыАгента.Вставить("ВыгружатьТипыСкидокИзДоговоров", 
		ПолучитьНастройку(ВыбАгент,"ВыгружатьТипыСкидокИзДоговоров",Истина));
	
	ПараметрыАгента.Вставить("СтатьяДвиженияДенежныхСредств", 
		ПолучитьНастройку(ВыбАгент,"СтатьяДвиженияДенежныхСредств",ОсновнаяСтатьяДвиженияДенежныхСредств));
	ПараметрыАгента.Вставить("ОграничиватьОстатокПоСкладу",
		ПолучитьНастройку(ВыбАгент,"ОграничиватьОстатокПоСкладу",Ложь));
	ПараметрыАгента.Вставить("МаксимальныйОстатокПоСкладу",
		ПолучитьНастройку(ВыбАгент,"МаксимальныйОстатокПоСкладу",240));
	ПараметрыАгента.Вставить("ВыгружатьВсюНоменклатуру", 
		ПолучитьНастройку(ВыбАгент,"ВыгружатьВсюНоменклатуру",Истина));
	ПараметрыАгента.Вставить("УчитыватьРезервПриРасчетеОстатков", 
		ПолучитьНастройку(ВыбАгент,"УчитыватьРезервПриРасчетеОстатков",Истина));
	ПараметрыАгента.Вставить("СпособОтображенияОстатка", 
		ПолучитьНастройку(ВыбАгент,"СпособОтображенияОстатка",Ложь));
	ПараметрыАгента.Вставить("ДобавлятьАртикул", 
		ПолучитьНастройку(ВыбАгент,"ДобавлятьАртикул",0));
	ПараметрыАгента.Вставить("СегментыНоменклатурыАгента", 
		ПрочитатьСегментыНоменклатурыАгента(ВыбАгент));		
		
	ПараметрыАгента.Вставить("ПроводитьПродажа",
		ПолучитьНастройку(ВыбАгент,"ПроводитьПродажа",Ложь));
	ПараметрыАгента.Вставить("ПроводитьЗаказ",
		ПолучитьНастройку(ВыбАгент,"ПроводитьЗаказ",Ложь));
	ПараметрыАгента.Вставить("ПроводитьПокупка",
		ПолучитьНастройку(ВыбАгент,"ПроводитьПокупка",Ложь));
	ПараметрыАгента.Вставить("ПроводитьПКО",
		ПолучитьНастройку(ВыбАгент,"ПроводитьПКО",Ложь));
	ПараметрыАгента.Вставить("ПроводитьНаличиеИЦены",
		ПолучитьНастройку(ВыбАгент,"ПроводитьНаличиеИЦены",Ложь));
	ПараметрыАгента.Вставить("ПроводитьАнкета",
		ПолучитьНастройку(ВыбАгент,"ПроводитьАнкета",Истина));
	ПараметрыАгента.Вставить("ОплаченоПКО",
		ПолучитьНастройку(ВыбАгент,"ОплаченоПКО",Ложь));
	
	ПараметрыАгента.Вставить("НаименованиеДокументаПродажа",
		ПолучитьНастройку(ВыбАгент,"НаименованиеДокументаПродажа","Продажа"));
	ПараметрыАгента.Вставить("НаименованиеДокументаЗаказ",
		ПолучитьНастройку(ВыбАгент,"НаименованиеДокументаЗаказ","Заказ"));
	ПараметрыАгента.Вставить("НаименованиеДокументаПокупка",
		ПолучитьНастройку(ВыбАгент,"НаименованиеДокументаПокупка","Покупка"));
	ПараметрыАгента.Вставить("НаименованиеДокументаИнвентаризация",
		ПолучитьНастройку(ВыбАгент,"НаименованиеДокументаИнвентаризация","Наличие и цены"));
		
	ПараметрыАгента.Вставить("ПечатьФормБезНомера", 
		ПолучитьНастройку(ВыбАгент,"ПечатьФормБезНомера",Ложь));
    ПараметрыАгента.Вставить("РасчитыватьЦены1С", 
		ПолучитьНастройку(ВыбАгент,"РасчитыватьЦены1С",Ложь));
	ПараметрыАгента.Вставить("СоздаватьСчетФактуру", 
		ПолучитьНастройку(ВыбАгент,"СоздаватьСчетФактуру", Ложь));
    ПараметрыАгента.Вставить("КонтролироватьСозданиеДокументаПродажа", 
		ПолучитьНастройку(ВыбАгент,"КонтролироватьСозданиеДокументаПродажа", Ложь));
    ПараметрыАгента.Вставить("КонтролироватьСозданиеДокументаЗаказ", 
		ПолучитьНастройку(ВыбАгент,"КонтролироватьСозданиеДокументаЗаказ", Ложь));
    ПараметрыАгента.Вставить("КонтролироватьСозданиеДокументаПокупка", 
		ПолучитьНастройку(ВыбАгент,"КонтролироватьСозданиеДокументаПокупка", Ложь));
    ПараметрыАгента.Вставить("КонтролироватьСозданиеДокументаПКО", 
		ПолучитьНастройку(ВыбАгент,"КонтролироватьСозданиеДокументаПКО", Ложь));
    ПараметрыАгента.Вставить("КонтролироватьСозданиеДокументаАнкета", 
		ПолучитьНастройку(ВыбАгент,"КонтролироватьСозданиеДокументаАнкета", Ложь));
    ПараметрыАгента.Вставить("КонтролироватьСозданиеДокументаИнвентаризация", 
		ПолучитьНастройку(ВыбАгент,"КонтролироватьСозданиеДокументаИнвентаризация", Ложь));
    ПараметрыАгента.Вставить("КонтролироватьСозданиеФотографий", 
		ПолучитьНастройку(ВыбАгент,"КонтролироватьСозданиеФотографий", Ложь));
    ПараметрыАгента.Вставить("КонтролироватьМестоВыполненияЗаданий", 
		ПолучитьНастройку(ВыбАгент,"КонтролироватьМестоВыполненияЗаданий", Ложь));
	
	ПараметрыАгента.Вставить("ТипСоздаваемогоДокумента",
		ПолучитьНастройку(ВыбАгент,"ТипСоздаваемогоДокумента",0));
	ПараметрыАгента.Вставить("ТипСоздаваемогоДокументаЗаявка",
		ПолучитьНастройку(ВыбАгент,"ТипСоздаваемогоДокументаЗаявка" ,0));
	ПараметрыАгента.Вставить("ТипСоздаваемогоДокументаПокупка", 
		ПолучитьНастройку(ВыбАгент,"ТипСоздаваемогоДокументаПокупка",0));
	ПараметрыАгента.Вставить("ТипСоздаваемогоДокументаПКО",
		ПолучитьНастройку(ВыбАгент,"ТипСоздаваемогоДокументаПКО",0));
	ПараметрыАгента.Вставить("ТипСоздаваемогоДокументаАнкета",
		ПолучитьНастройку(ВыбАгент,"ТипСоздаваемогоДокументаАнкета",0));
	ПараметрыАгента.Вставить("ТипСоздаваемогоДокументаИнвентаризация", 
		ПолучитьНастройку(ВыбАгент,"ТипСоздаваемогоДокументаИнвентаризация",0));
	ПараметрыАгента.Вставить("СпособНумерацииДокументов", 
		ПолучитьНастройку(ВыбАгент,"СпособНумерацииДокументов",0));
	ПараметрыАгента.Вставить("ЧасовойПояс", 
		ПолучитьНастройку(ВыбАгент,"ЧасовойПояс",99));

	ПараметрыАгента.Вставить("ВремяОтветаСервера", 
		ПолучитьНастройку(ВыбАгент,"ВремяОтветаСервера",20));
	ПараметрыАгента.Вставить("ПериодGPS", 
		ПолучитьНастройку(ВыбАгент,"ПериодGPS",0));
	ПараметрыАгента.Вставить("ПериодОтправкиКоординат", 
		?(ПолучитьНастройку(ВыбАгент,"ПериодGPS",0) > 0, 15, 0));
	ПараметрыАгента.Вставить("ВключитьGPSМониторинг", 
		ПараметрыАгента.ПериодGPS > 0);
	//ПараметрыАгента.Вставить("ПериодОтправкиКоординат", 
	//	ПолучитьНастройку(ВыбАгент,"ПериодОтправкиКоординат",0));
	//ПараметрыАгента.Вставить("ВключитьGPSМониторинг", 
	//	ПолучитьНастройку(ВыбАгент,"ВключитьGPSМониторинг",Ложь));
	ПараметрыАгента.Вставить("ЗапретитьРаботуБезGPS", 
		ПолучитьНастройку(ВыбАгент,"ЗапретитьРаботуБезGPS",Ложь));

	ПараметрыАгента.Вставить("АнкетаПоУмолчаниюДляНовогоКлиента", 
		ПолучитьНастройку(ВыбАгент,"АнкетаПоУмолчаниюДляНовогоКлиента","<без анкеты>"));
		
	ПараметрыАгента.Вставить("ВыбКатИзмЦен", 
		ПолучитьНастройку(ВыбАгент,"ВыбКатИзмЦен",Справочники.КатегорииОбъектов.ПустаяСсылка())); 
	ПараметрыАгента.Вставить("ВыделятьОранжевымЦветом",
		ПолучитьНастройку(ВыбАгент,"ВыделятьОранжевымЦветом", Справочники.КатегорииОбъектов.ПустаяСсылка())); 
	ПараметрыАгента.Вставить("ВыделятьЦветомКонтрагентов", 
		ПолучитьНастройку(ВыбАгент,"ВыделятьЦветомКонтрагентов", Справочники.КатегорииОбъектов.ПустаяСсылка())); 
	ПараметрыАгента.Вставить("ТипРекомендуемогоПлана", 
		ПолучитьНастройку(ВыбАгент,"ТипРекомендуемогоПлана", 0)); 
	ПараметрыАгента.Вставить("ФорматОтображенияИсторииПродажНаКПК",
		ПолучитьНастройку(ВыбАгент,"ФорматОтображенияИсторииПродажНаКПК",0)); 
	ПараметрыАгента.Вставить("ЕдИзмПоУмолчанию",
		ПолучитьНастройку(ВыбАгент,"ЕдИзмПоУмолчанию", 0));
	ПараметрыАгента.Вставить("ДетализироватьНаКПКПоСериям",
		ПолучитьНастройку(ВыбАгент, "ДетализироватьНаКПКПоСериям", Ложь));	
	
	ПараметрыАгента.Вставить("СпособПредоставленияБонусов",
		ПолучитьНастройку(ВыбАгент,"СпособПредоставленияБонусов",0)); 
	ПараметрыАгента.Вставить("ЗапретитьИзменятьТипЦен",
		ПолучитьНастройку(ВыбАгент,"ЗапретитьИзменятьТипЦен", Справочники.КатегорииОбъектов.ПустаяСсылка())); 
	ПараметрыАгента.Вставить("ЗапретитьИзменятьСкидку",
		ПолучитьНастройку(ВыбАгент, ЛОЖЬ, Справочники.КатегорииОбъектов.ПустаяСсылка())); 
	
	//ПараметрыАгента.Вставить("ВыгружатьАнкеты",
	//	ПолучитьНастройку(ВыбАгент,"ВыгружатьАнкеты", Истина));
	ПараметрыАгента.Вставить("ВыгружатьОтчеты",
		ПолучитьНастройку(ВыбАгент,"ВыгружатьОтчеты", Ложь));
	ПараметрыАгента.Вставить("ВыгружатьПодсказкиПродаж",
		ПолучитьНастройку(ВыбАгент,"ВыгружатьПодсказкиПродаж", Ложь));
	ПараметрыАгента.Вставить("ВыгружатьСообщения",
		ПолучитьНастройку(ВыбАгент,"ВыгружатьСообщения", Истина));
	ПараметрыАгента.Вставить("ВыгружатьМаршруты",
		ПолучитьНастройку(ВыбАгент,"ВыгружатьМаршруты", Истина));
	ПараметрыАгента.Вставить("СоздаватьЗадания",
		ПолучитьНастройку(ВыбАгент,"СоздаватьЗадания", Истина));
	ПараметрыАгента.Вставить("ВыгружатьКаналыСбыта",
		ПолучитьНастройку(ВыбАгент,"ВыгружатьКаналыСбыта", Истина));
	ПараметрыАгента.Вставить("ВыгружатьФормы",
		ПолучитьНастройку(ВыбАгент,"ВыгружатьФормы", Истина));
	
	ПараметрыАгента.Вставить("РазрешитьПродажу",
		ПолучитьНастройку(ВыбАгент,"РазрешитьПродажу", Истина));
	ПараметрыАгента.Вставить("РазрешитьЗаявку",
		ПолучитьНастройку(ВыбАгент,"РазрешитьЗаявку", Истина));
	ПараметрыАгента.Вставить("РазрешитьПКО",
		ПолучитьНастройку(ВыбАгент,"РазрешитьПКО", Истина));
	ПараметрыАгента.Вставить("РазрешитьПокупку",
		ПолучитьНастройку(ВыбАгент,"РазрешитьПокупку", Истина));
	ПараметрыАгента.Вставить("РазрешитьИнвентаризацию",
		ПолучитьНастройку(ВыбАгент,"РазрешитьИнвентаризацию", Истина));
	
	ПараметрыАгента.Вставить("РазрешитьСниматьКоординатыКлиентов",
		ПолучитьНастройку(ВыбАгент,"РазрешитьСниматьКоординатыКлиентов", Истина));
	ПараметрыАгента.Вставить("РазрешитьДобавлениеКлиентов",
		ПолучитьНастройку(ВыбАгент,"РазрешитьДобавлениеКлиентов", Истина));
	ПараметрыАгента.Вставить("ИспользоватьСправочникТовары",
		ПолучитьНастройку(ВыбАгент,"ИспользоватьСправочникТовары", Истина));
	ПараметрыАгента.Вставить("ИспользоватьМерчендайзинг",
		ПолучитьНастройку(ВыбАгент,"ИспользоватьМерчендайзинг", Истина));
	ПараметрыАгента.Вставить("РазрешитьДокументыДляНовыхКлиентов",
		ПолучитьНастройку(ВыбАгент,"РазрешитьДокументыДляНовыхКлиентов", Истина));
	ПараметрыАгента.Вставить("КонтролироватьСборОстатков",
		ПолучитьНастройку(ВыбАгент,"КонтролироватьСборОстатков", Ложь));
	ПараметрыАгента.Вставить("РазрешитьРедактированиеДокументов",
		ПолучитьНастройку(ВыбАгент,"РазрешитьРедактированиеДокументов", Истина));
	ПараметрыАгента.Вставить("ЗапретитьНарушатьПорядокВыполненияЗаданий",
		ПолучитьНастройку(ВыбАгент,"ЗапретитьНарушатьПорядокВыполненияЗаданий", Ложь));
	ПараметрыАгента.Вставить("ЗапретитьПечатьНеВыгруженныхДокументов",
		ПолучитьНастройку(ВыбАгент,"ЗапретитьПечатьНеВыгруженныхДокументов", Ложь));
	ПараметрыАгента.Вставить("ЗапретитьВыбиратьКрасныхКлиентов",
		ПолучитьНастройку(ВыбАгент,"ЗапретитьВыбиратьКрасныхКлиентов", Ложь));
	ПараметрыАгента.Вставить("ВыгружатьДокументыПередЗагрузкойДанных",
		ПолучитьНастройку(ВыбАгент,"ВыгружатьДокументыПередЗагрузкойДанных", Ложь));
	ПараметрыАгента.Вставить("ПарольНастроек",
		ПолучитьНастройку(ВыбАгент,"ПарольНастроек",""));
	ПараметрыАгента.Вставить("ПарольОбменДанными",
		ПолучитьНастройку(ВыбАгент,"ПарольОбменДанными",""));

	ПараметрыАгента.Вставить("ТорговляСКолес",
		ПолучитьНастройку(ВыбАгент,"ТорговляСКолес"	,Ложь));
	ПараметрыАгента.Вставить("ОбязательнаяПолнаяЗагрузка",
		ПолучитьНастройку(ВыбАгент,"ОбязательнаяПолнаяЗагрузка"	,Истина));
	ПараметрыАгента.Вставить("ВыгружатьФотоВместеСДокументами",
		ПолучитьНастройку(ВыбАгент,"ВыгружатьФотоВместеСДокументами"	,Ложь));
	
	возврат ПараметрыАгента;
	
КонецФункции //ПолучитьВсеНастройкиАгента(КодАгента)

// преобразует дату в формат Access для работы с внешними данными формата MDB
// http://www.sql.ru/faq/faq_topic.aspx?fid=157	
// Параметры
//	ТекущаяДата - преобразуемая дата
//  ТекущееВремя - если необходиом заменить время в формируемой дате для Access
// возвращает строку с датой в формате MS Access
Функция ДатаДляAccess(ТекущаяДата, ТекущееВремя = Неопределено) Экспорт
	//#09/03/2009 13:43:54#
	текВр = ?(ТекущееВремя = Неопределено, ТекущаяДата, ТекущееВремя);
	ДатаAccess = "#"+Формат(Месяц(ТекущаяДата),"ЧЦ=2; ЧВН=") + "/"
				 + Формат(День(ТекущаяДата), "ЧЦ=2; ЧВН=") + "/"
	             + Формат(Год(ТекущаяДата), "ЧЦ=4; ЧВН=; ЧГ=") + " " 
				 + Формат(Час(текВр), "ЧЦ=2; ЧН=; ЧВН=") + ":"
				 + Формат(Минута(текВр), "ЧЦ=2; ЧН=; ЧВН=") + ":"
				 + Формат(Секунда(текВр), "ЧЦ=2; ЧН=; ЧВН=") + "#";
	возврат ДатаAccess;
	
КонецФункции //ПолучитьВсеНастройкиАгента(КодАгента)

// Проверяет есть ли ПВХ.СвойстваОбъектов с указанным названием 
// Если такого нет, то создает его. 
// Возвращает ссылку на эту настройку
// Параметры
//	Наименование - Наименование искомого объекта
//	ТипЗнач - Тип значения характеристики (значения какого типа может принимать данное свойство)
//	НазначениеСвойства - Вид объекта к которому относится свойство
//
Функция ИнициализироватьСвойствоОбъекта(Наименование,ТипЗнач,НазначениеСвойства) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвойстваОбъектов.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|ГДЕ
	|	СвойстваОбъектов.Наименование = &Наименование
	|	И СвойстваОбъектов.НазначениеСвойства = &НазначениеСвойства";
	
	Запрос.УстановитьПараметр("Наименование",Наименование );
	Запрос.УстановитьПараметр("НазначениеСвойства",НазначениеСвойства );
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ПВХ=ПланыВидовХарактеристик.СвойстваОбъектов.СоздатьЭлемент();
		ПВХ.НазначениеСвойства	= НазначениеСвойства;
		ПВХ.Наименование		= Наименование;
		ПВХ.ТипЗначения			= ТипЗнач;
		ПВХ.Записать();
		Сообщить("Создан элемент плана видов характеристик ""СвойстваОбъектов"" с наименованием '" + Наименование 
				+ "' назначение "+НазначениеСвойства);
		возврат ПВХ.Ссылка;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий(); 
		Если Выборка.Ссылка.ТипЗначения = ТипЗнач Тогда
			возврат Выборка.Ссылка;	
		Иначе
			объектСвойство = Выборка.Ссылка.ПолучитьОбъект();
			объектСвойство.ТипЗначения = ТипЗнач;
			объектСвойство.Записать();
			Возврат объектСвойство.Ссылка;
		КонецЕсли;
	КонецЕсли; 
КонецФункции //

//функция возвращает значение реквизита объекта если реквизита нет - вернет значение по умолчанию
функция ПолучитьРеквизитПоСсылкеДокумента(Ссылка, ИмяРеквизита, ПоУмолчанию) Экспорт
	Если Ссылка.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		Возврат Ссылка[ИмяРеквизита];
	КонецЕсли;
	Возврат ПоУмолчанию;	
КонецФункции

//////////////////////////////////////////////////////
//РАБОТА С ОТБОРАМИ

//формирует отбор по Справочник.ТипОбъектов с учетом свойств
Процедура ИнициализацияОтбораОбъектов(ТипОбъектов, ПостроительОбъектов) Экспорт
	ИдСправочника=ТипОбъектов;
	ТекстВыбрать="ВЫБРАТЬ %ИдСпр%.Ссылка КАК Ссылка";
	ТекстИз="ИЗ Справочник.%ИдСпр% КАК %ИдСпр%";
		
	НазначениеСвойства=Неопределено;
	Попытка
		НазначениеСвойства=ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов["Справочник_"+ИдСправочника];
	Исключение
	КонецПопытки;
	Если НазначениеСвойства<>Неопределено Тогда
		Отбор=Новый Структура("НазначениеСвойства", НазначениеСвойства);
		Выборка=ПланыВидовХарактеристик.СвойстваОбъектов.Выбрать(,Отбор);
		Пока Выборка.Следующий() Цикл
			ИмяСвойства = "Свойство" + СтрЗаменить(Строка(Выборка.Ссылка.УникальныйИдентификатор()), "-", "");
			
			ТекстВыбрать=ТекстВыбрать+",
				|	" + ИмяСвойства + ".Значение КАК " + ИмяСвойства + "Значение";
			ТекстИз=ТекстИз+"
				|    {ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК " + ИмяСвойства + "
				|        ПО " + ИмяСвойства + ".Объект = %ИдСпр%.Ссылка И "+ИмяСвойства+".Свойство=&Параметр"+ИмяСвойства+"}";
			ПостроительОбъектов.Параметры.Вставить("Параметр"+ИмяСвойства, Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса=ТекстВыбрать+Символы.ПС+ТекстИз;
	ТекстЗапроса=СтрЗаменить(ТекстЗапроса, "%ИдСпр%", ИдСправочника);
	ПостроительОбъектов.Текст=ТекстЗапроса;
	ПостроительОбъектов.ЗаполнитьНастройки();
	Если НазначениеСвойства<>Неопределено Тогда
		Отбор=Новый Структура("НазначениеСвойства", НазначениеСвойства);
		Выборка=ПланыВидовХарактеристик.СвойстваОбъектов.Выбрать(,Отбор);
		Пока Выборка.Следующий() Цикл
			ИмяСвойства = "Свойство" + СтрЗаменить(Строка(Выборка.Ссылка.УникальныйИдентификатор()), "-", "");
			
			Поле=ПостроительОбъектов.ДоступныеПоля.Найти(ИмяСвойства+"Значение");
			Поле.Представление=Выборка.Наименование;
			Поле.ТипЗначения=Выборка.ТипЗначения;
		КонецЦикла;
	КонецЕсли;
	
	Поле=ПостроительОбъектов.ДоступныеПоля.Найти("Ссылка");
	Поле.Представление=Метаданные.Справочники[ТипОбъектов].Представление();
КонецПроцедуры

// Заполняет отбор построителя запроса значениями из ТаблицыЗначений
// ТЗ - таблица значений с параметрами отбора
// Постр - Построитель отчета для которого необходимо настроить отбор
// Бланк - Шаблонное значение параметров отбора
Процедура ЗаполнитьОтборПостроителя(ТЗ,Постр,Бланк) Экспорт
	ЗаполнитьЗначенияСвойств(Постр, Бланк);
	//переносим наименования дополнительный полей отбора (свойства и категории)
	//из Бланк в Постр
	//колвоПолей = Бланк.ДоступныеПоля.Количество() - 1;
	//Для й = 0 по колвоПолей Цикл
	//	Постр.ДоступныеПоля[й].Представление = Бланк.ДоступныеПоля[й].Представление;
	//	Постр.ДоступныеПоля[й].ТипЗначения = Бланк.ДоступныеПоля[й].ТипЗначения;		
	//КонецЦикла;
	//
	//для каждого парам из Бланк.Параметры Цикл
	//	Постр.Параметры.Вставить(парам.Ключ, парам.Значение);
	//КонецЦикла;
	
	// Очистим отбор
	ОтборКоличество = Постр.Отбор.Количество();
	Для Н = 1 По ОтборКоличество Цикл
	    Постр.Отбор.Удалить(ОтборКоличество - Н);
	КонецЦикла;
	
	Если ТипЗнч(ТЗ) = Тип("ТаблицаЗначений") Тогда  //получено значение типа ТаблицаЗначений
		Для Каждого ЭлемОтбора Из ТЗ Цикл
			Попытка
				НовЭлемОтбора=Постр.Отбор.Добавить(ЭлемОтбора.ПутьКДанным,ЭлемОтбора.Имя,ЭлемОтбора.Представление);
				НовЭлемОтбора.ВидСравнения	= ЭлемОтбора.ВидСравнения;
				НовЭлемОтбора.Значение		= ЭлемОтбора.Значение;
				Если ЭлемОтбора.ВидСравнения = ВидСравнения.Интервал Тогда
					НовЭлемОтбора.ЗначениеПо = ЭлемОтбора.ЗначениеПо;
					НовЭлемОтбора.ЗначениеС	 = ЭлемОтбора.ЗначениеС;
				КонецЕсли; 
				НовЭлемОтбора.Использование = ЭлемОтбора.Использование;
			Исключение
				Сообщить("Неверный отбор "+ЭлемОтбора.ПутьКДанным+" "+ЭлемОтбора.ВидСравнения+" "+ЭлемОтбора.Значение);
			КонецПопытки;
		КонецЦикла;
	КонецЕсли; 
КонецПроцедуры

// Создает пустую таблицу значений для хранения отбор построителя запроса Номенклатуры и Контрагента
Функция СоздатьТаблицуОтбор() Экспорт
	ТЗ =Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Использование");
	ТЗ.Колонки.Добавить("Значение");
	ТЗ.Колонки.Добавить("ВидСравнения");
	ТЗ.Колонки.Добавить("ЗначениеС");
	ТЗ.Колонки.Добавить("ЗначениеПо");
	ТЗ.Колонки.Добавить("Имя");
	ТЗ.Колонки.Добавить("Представление");
	ТЗ.Колонки.Добавить("ТипЗначения");
	ТЗ.Колонки.Добавить("ПутьКДанным");
	возврат ТЗ;
КонецФункции

//Сохраняет отбор в регистре "СохраненныеНастройки"
//Агент - Ссылка на элемент справочника Пользователи для которого сохраняем настройку
//Постр - Построитель отчета, из которого сохраняем настройку
//Название отбора - название под которым сохраняется настройка
Процедура СохранитьОтбор(Агент,Постр,НазваниеОтбора) Экспорт
	ТЗ = СоздатьТаблицуОтбор();
	Для Каждого ЭлемОтбора Из Постр.Отбор Цикл
		Если ЗначениеЗаполнено(ЭлемОтбора.ПутьКДанным) Тогда
			стрТЗ =ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(стрТЗ,ЭлемОтбора);
		КонецЕсли; 
	КонецЦикла;
	ЗаписатьВРегистрСохраненныеНастройки(Агент,ТЗ,"Отбор."+НазваниеОтбора);
КонецПроцедуры

//Читает отбор из сохраненных настроек агента.
//Если такой настройки НЕ существует, то создает пустую таблицу с отбором.
//Агент - Ссылка на элемент справочника Пользователи для которого читаем настройку
//Название отбора - название настройки, которую необходимо прочитать
Функция ПрочитатьОтбор(Агент,НазваниеОтбора) Экспорт
	ТаблСОтбором = ПрочитатьИзРегистраСохраненныеНастройки(Агент,"Отбор."+НазваниеОтбора); 
	Если ТипЗнч(ТаблСОтбором) <> Тип("ТаблицаЗначений") Тогда  //нет настройки
		ТаблСОтбором = СоздатьТаблицуОтбор();                        //создаем пустую
	КонецЕсли; 
	возврат ТаблСОтбором;	
КонецФункции

//////////////////////////////////////////////////////
/// РАБОТА С ВНЕШНИМИ ДАННЫМИ

//процедура выполняет сжатие внешней mdb базы данных
//при отсутствии внешней базы данных будет создана пустая база данных
Процедура СжатьMDB() Экспорт
	БД = ОткрытьВнешнююБД();
	ТекстЗапроса="DELETE FROM [Log] WHERE [DateTime]<="+ДатаДляAccess(КонецДня(ДобавитьМесяц(ТекущаяДата(), -3)))+" ";
	БД.Execute(ТекстЗапроса);
	ЗакрытьВнешнююБД(БД);
	
	ВнешняяБД = КаталогЛогФайлов + "\mobi_s.mdb";
	//проверить есть ли файл с таблицей для хранения сообщений
	Файл = Новый Файл(ВнешняяБД);                                   
	Если Не Файл.Существует() Тогда
		Попытка
			Кат = Новый COMОбъект("ADOX.Catalog");
			Кат.Create("Provider='Microsoft.Jet.OLEDB.4.0';Data Source=" + ВнешняяБД);
		Исключение
			Ошибка = ОписаниеОшибки();
			ДобавитьВЛогФайл(
				"Не удалось создать файл " + ВнешняяБД + " для работы с внешними данными." + РазделительСтрок 
				+ Ошибка);
		КонецПопытки
	КонецЕсли;
	Попытка		
		JRO = Новый COMОбъект("JRO.JetEngine");
		JRO.CompactDatabase("Provider=Microsoft.Jet.OLEDB.4.0; Data Source=" + ВнешняяБД + ";",
				   			"Provider=Microsoft.Jet.OLEDB.4.0; Data Source=" + ВнешняяБД + "_new.mdb; "
							+ "Jet OLEDB:Engine Type=5");		
		ПереместитьФайл(ВнешняяБД + "_new.mdb", ВнешняяБД);		
		ДобавитьВЛогФайл("База данных " + ВнешняяБД + " сжата, ошибок нет");		
	Исключение
		Ошибка = ОписаниеОшибки();
		ДобавитьВЛогФайл("Ошибка при сжатии данных " + ВнешняяБД + РазделительСтрок + Ошибка);		
	КонецПопытки;
КонецПроцедуры

Процедура Ждем(сек)
	
	//Шел=СоздатьОбъект("WScript.Shell");
	//Шел.run("ping -n 1 -w 2000 0.0.0.1",0,-1);
	
	scr = новый COMОбъект("WScript.Shell");
	scr.Run("ping 127.0.0.1 -n "+СокрЛП(Число(Сек)+1),0,1);	
	
	//ЗапуститьПриложение("ping 127.0.0.1 -n "+СокрЛП(Число(Сек)+1), , Истина);	
	
КонецПроцедуры

//Функция выполняет открытие внешней базы данных
//возвращает объект для доступа к базе данных
Функция ОткрытьВнешнююБД(ОткрытьНаЗапись = Истина) Экспорт
	ВнешняяБД = КаталогЛогФайлов + "\mobi_s.mdb";
	//проверить есть ли файл с таблицей для хранения сообщений
	Файл = Новый Файл(ВнешняяБД);                                   
	Если Не Файл.Существует() Тогда
		Попытка
			Кат = Новый COMОбъект("ADOX.Catalog");
			Кат.Create("Provider='Microsoft.Jet.OLEDB.4.0';Data Source=" + ВнешняяБД);
		Исключение
			Ошибка = ОписаниеОшибки();
			текстОшибки = "Не удалось создать файл "+ВнешняяБД+" для работы с внешними данными."+РазделительСтрок+Ошибка;
			Состояние(текстОшибки);
			Сообщить(текстОшибки);
			//Предупреждение(текстОшибки);
			ДобавитьВЛогФайл(текстОшибки,0);
			возврат Ложь;
		КонецПопытки
	КонецЕсли;
	
	//прочитать данные можно и из файла доступного только для чтения
	Если ОткрытьНаЗапись И Файл.ПолучитьТолькоЧтение() Тогда
		Ошибка = ОписаниеОшибки();
		ДобавитьВЛогФайл(
			"У файла с внешними данными " + ВнешняяБД + " установлен атрибут 'Только чтение'." + РазделительСтрок 
			+ Ошибка);
		возврат Ложь;
	КонецЕсли;
		
	МаксимумПопытокОткрытьMDB = 10;
	ВремяОжиданияОткрытьMDB = 5;
	КоличествоПопыток = 0;
			
	Пока КоличествоПопыток < МаксимумПопытокОткрытьMDB Цикл
		КоличествоПопыток = КоличествоПопыток + 1;
		Попытка //попробуем открыть файл
			DBConn = Новый COMОбъект("ADODB.Connection");
			//Открываем соединение
			DBConn.Mode = 3;
			DBConn.ConnectionTimeout = 30;
			DBConn.CommandTimeout = 30;
			DBConn.ConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0; Data Source=" + ВнешняяБД + ";";
			DBConn.Open();
			Прервать;
		Исключение	
			Ошибка = ОписаниеОшибки();
			текстОшибки = "Не удалось открыть файл по работе с внешними данными "+ВнешняяБД+РазделительСтрок+Ошибка;
			Состояние(текстОшибки);			
			Если КоличествоПопыток = МаксимумПопытокОткрытьMDB Тогда
				Сообщить(текстОшибки);
				//Предупреждение(текстОшибки);
				ДобавитьВЛогФайл(текстОшибки,0);
				возврат Ложь;
			Иначе
				//ждем ВремяОжиданияФайла секунд и пробуем снова
				Ждем(ВремяОжиданияОткрытьMDB);
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;;
	
	//COM-объект для работы с базой данных получен,
	//Если необходимо - проверяем возможность записи в этот объект
	Если ОткрытьНаЗапись Тогда
		МаксимумПопытокЗаписатьВФайлMDB = 10;
		ВремяОжиданияЗаписатьВФайлMDB = 5;
		КоличествоПопыток = 0;
		Пока КоличествоПопыток < МаксимумПопытокЗаписатьВФайлMDB Цикл
			КоличествоПопыток = КоличествоПопыток + 1;
			
			стрПорт = Формат(Порт, "ЧДЦ=0; ЧГ=0");			
			
			//попробуем что-нибудь записать в этот файл
			Попытка
				DBConn.Execute("Drop Table Proverka" + стрПорт);
			Исключение
			КонецПопытки;
			Попытка
				DBConn.Execute("Create Table Proverka" + стрПорт + " (CODE char(20))");
				DBConn.Execute("Drop Table Proverka" + стрПорт);
				Прервать;
			Исключение
				Ошибка = ОписаниеОшибки();
				текстОшибки = "Не удалось произвести запись в файл с внешними данными "+ВнешняяБД+РазделительСтрок+Ошибка;
				Состояние(текстОшибки);
				Если КоличествоПопыток = МаксимумПопытокЗаписатьВФайлMDB Тогда
					Сообщить(текстОшибки);
					//Предупреждение(текстОшибки);
					ДобавитьВЛогФайл(текстОшибки,0);
					возврат Ложь;
				Иначе
					//ждем ВремяОжиданияФайла секунд и пробуем снова					
					Ждем(ВремяОжиданияЗаписатьВФайлMDB);
				КонецЕсли;
			КонецПопытки;			
		КонецЦикла;		
	КонецЕсли;
	
	Возврат DBConn;
КонецФункции

//Функция выполняет открытие внешней базы данных
//возвращает объект для доступа к базе данных
//Функция ОткрытьВнешнююБД()Экспорт
//	ВнешняяБД=КаталогЛогФайлов+"\mobi_s.mdb";
//	//проверить есть ли файл с таблицей для хранения сообщений
//	Файл=Новый Файл(ВнешняяБД);                                   
//	Если НЕ Файл.Существует() Тогда                          
//		Попытка
//			Кат=Новый COMОбъект("ADOX.Catalog");
//			Кат.Create("Provider='Microsoft.Jet.OLEDB.4.0';Data Source="+ВнешняяБД);
//		Исключение
//			Ошибка=ОписаниеОшибки();
//			ДобавитьВЛогФайл("Не удалось создать файл "+ВнешняяБД+" для работы с внешними данными."+РазделительСтрок+Ошибка,0);
//			возврат Ложь;
//		КонецПопытки
//	КонецЕсли;
//	
//	Если Файл.ПолучитьТолькоЧтение() Тогда
//		Ошибка=ОписаниеОшибки();
//		ДобавитьВЛогФайл("У файла с внешними данными "+ВнешняяБД+" установлен атрибут 'Только чтение'."+РазделительСтрок+Ошибка,0);
//		возврат Ложь;
//	КонецЕсли; 	  
//	
//	Попытка //попробуем открыть файл
//		DBConn = Новый COMОбъект("ADODB.Connection");
//		//Открываем соединение
//		DBConn.Mode=3;
//		DBConn.Open("Provider=Microsoft.Jet.OLEDB.4.0; Data Source=" + ВнешняяБД +";");
//		
//		//попробуем что-нибудь записать в этот файл
//		Попытка
//			DBConn.Execute("Drop Table Proverka");
//		Исключение
//		КонецПопытки;
//		Попытка
//			DBConn.Execute("Create Table Proverka (CODE char(20))");
//			DBConn.Execute("Drop Table Proverka");
//		Исключение
//			Ошибка=ОписаниеОшибки();
//			ДобавитьВЛогФайл("Не удалось произвести запись в файл с внешними данными "+ВнешняяБД+РазделительСтрок+Ошибка);
//			возврат Ложь;
//		КонецПопытки;
//	Исключение	
//		Ошибка=ОписаниеОшибки();
//		ДобавитьВЛогФайл("Не удалось открыть файл по работе с внешними данными "+ВнешняяБД+РазделительСтрок+Ошибка);
//		возврат Ложь;
//	КонецПопытки;
//	
//	Возврат DBConn;
//КонецФункции

//Процедура выполняет закрытие подключения к базе данных
//DBConn - подключение к базе данных, которое надо закрыть
Процедура ЗакрытьВнешнююБД(DBConn) Экспорт
	Попытка
		DBConn.Close(); //Закрываем соединение
	Исключение
	КонецПопытки;
КонецПроцедуры

// Записывает Значение в регистр "СохраненныеНастройки"
// Параметры
// Агент - тип Справочник.Пользователи, торговый агент для которого сохраняется настройка
// СохраняемоеЗначение - любое сохраняемое значение
// НаименованиеНастройки - Строка.имя под которым сохраняется значение
Процедура ЗаписатьВРегистрСохраненныеНастройки(Агент,СохраняемоеЗначение,НаименованиеНастройки) Экспорт
	Хранилище = Новый ХранилищеЗначения(СохраняемоеЗначение);
	МенеджерЗаписи = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь          = Агент;
	МенеджерЗаписи.ИмяОбъекта            = РССохраненныеНастройкиИмяОбъекта;
	МенеджерЗаписи.НаименованиеНастройки = НаименованиеНастройки;
	МенеджерЗаписи.СохраненнаяНастройка  = Хранилище;
	МенеджерЗаписи.Записать(Истина);
КонецПроцедуры

// Читает Значение из регистра "СохраненныеНастройки" 
// Параметры
// Агент - тип Справочник.Пользователи, торговый агент для которого читается настройка
// НаименованиеНастройки - Строка.имя под которым сохранено значение
// Возвращаемое значение
// Значение  сохраненное в регистре
// Если значение НЕ найдено, то возвращается  Неопределено
Функция ПрочитатьИзРегистраСохраненныеНастройки(Агент,НаименованиеНастройки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СохраненныеНастройки.СохраненнаяНастройка
	|ИЗ
	|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.Пользователь = &Агент
	|	И СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|	И СохраненныеНастройки.НаименованиеНастройки = &НаименованиеНастройки";
	
	Запрос.УстановитьПараметр("Агент"                ,Агент);
	Запрос.УстановитьПараметр("ИмяОбъекта"           ,РССохраненныеНастройкиИмяОбъекта);
	Запрос.УстановитьПараметр("НаименованиеНастройки",НаименованиеНастройки);
	Результат = Запрос.Выполнить();
	
	СохраненнаяНастройка = Неопределено;	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий(); 
		Попытка 
			СохраненнаяНастройка = Выборка.СохраненнаяНастройка.Получить();
		Исключение
			ДобавитьВЛогФайл(
				"Не удалось загрузить настройку " + НаименованиеНастройки 
				+ " для объекта " + РССохраненныеНастройкиИмяОбъекта 
				+ " у агента " + Агент, 
				Агент, , СтатусСообщения.Важное);
		КонецПопытки;
	КонецЕсли;
	возврат  СохраненнаяНастройка;
	
КонецФункции // ПрочитатьИзРегистраСохраненныеНастройки()

// Читает Значение из регистра "СохраненныеНастройки" с проверкой типа возвращаемого значения
// Параметры
// Агент - тип Справочник.Пользователи, торговый агент для которого читается настройка
// НаименованиеНастройки - Строка.имя под которым сохранено значение
// ЗначениеПоУмолчанию - значение которое будет возвращено, если в регистре ничего НЕ найдено
// ЗначениеПоУмолчанию2 - второй допустимый тип значения настройки
// Возвращаемое значение
// Значение сохраненное в регистре
// Если значение НЕ найдено или тип найденного значения не соответствует нужному, 
// то возвращается параметр ЗначениеПоУмолчанию
Функция ПолучитьНастройку(Агент,НаименованиеНастройки,ЗначениеПоУмолчанию,ЗначениеПоУмолчанию2=Ложь) Экспорт
	Значение = ПрочитатьИзРегистраСохраненныеНастройки(Агент,НаименованиеНастройки);
	Если ТипЗнч(Значение) <> Тип("Цвет") Тогда 
	//Для обхода Мутабельности ЗначениеЗаполнено(ТипЗнч("Цвет"))
		Если Значение = Неопределено Тогда  
		//нет такого параметра
			Значение = ЗначениеПоУмолчанию;
		ИначеЕсли (ТипЗнч(Значение) <> ТипЗнч(ЗначениеПоУмолчанию)) 
			И (ТипЗнч(Значение) <> ТипЗнч(ЗначениеПоУмолчанию2))Тогда 
		//тип значения НЕ соответствует значению по умолчанию
			Значение = ЗначениеПоУмолчанию;
		ИначеЕсли (НЕ ЗначениеЗаполнено(Значение)) И (ТипЗнч(Значение)<> Тип("Число")) Тогда 
		//ПустоеЗначение
			Значение = ЗначениеПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	Возврат Значение;
КонецФункции // ПолучитьНастройку()

// Читает Значение из регистра "СохраненныеНастройки" с проверкой типа возвращаемого значения
// Параметры
// Агент - тип Справочник.Пользователи, торговый агент для которого читается настройка
// НаименованиеНастройки - Строка.имя под которым сохранено значение
// ЗначениеПоУмолчанию - значение которое будет возвращено, если в регистре ничего НЕ найдено
// ЗначениеПоУмолчанию2 - второй допустимый тип значения настройки
// Возвращаемое значение
// Значение сохраненное в регистре
// Если значение НЕ найдено или тип найденного значения не соответствует нужному, 
// то возвращается параметр ЗначениеПоУмолчанию
Функция ПолучитьНастройкуМаршрутизации(
		Агент,
		НаименованиеНастройки,
		НаименованиеНастройкиСтарое,
		ЗначениеПоУмолчанию) Экспорт
	Значение = ПрочитатьИзРегистраСохраненныеНастройки(Агент,НаименованиеНастройки);
	Если ТипЗнч(Значение) <> Тип("Цвет") Тогда // Для обхода Мутабельности ЗначениеЗаполнено(ТипЗнч("Цвет"))
		Если Значение = Неопределено Тогда
		//нет такого параметра			
			Значение = ВосстановитьЗначение(НаименованиеНастройкиСтарое);
			Значение = ?(Значение = Неопределено, ЗначениеПоУмолчанию, Значение)
		ИначеЕсли (ТипЗнч(Значение)<> ТипЗнч(ЗначениеПоУмолчанию)) Тогда  
		//тип значения НЕ соответствует значению по умолчанию
			Значение = ЗначениеПоУмолчанию;
		ИначеЕсли (НЕ ЗначениеЗаполнено(Значение)) 
				И (ТипЗнч(Значение)<> Тип("Число")) 
				И (ТипЗнч(Значение)<> Тип("Дата")) Тогда
		//ПустоеЗначение			
			Значение = ЗначениеПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	Возврат Значение;
КонецФункции // ПолучитьНастройку()

//читает настройку сегментов номенклатуры
Функция ПолучитьСегментыНоменклатуры() Экспорт
	тзСегменты = ПрочитатьИзРегистраСохраненныеНастройки(МобиС, "СегментыНоменклатуры");
	Если ТипЗнч(тзСегменты) <> Тип("ТаблицаЗначений") Тогда
		тзСегменты = новый ТаблицаЗначений();
		тзСегменты.Колонки.Добавить("Пометка");
		тзСегменты.Колонки.Добавить("СохранятьИерархию");
		тзСегменты.Колонки.Добавить("НаименованиеСегмента");
		тзСегменты.Колонки.Добавить("ГУИД");
		тзСегменты.Колонки.Добавить("Отбор");
	КонецЕсли;
	
	Возврат тзСегменты;
КонецФункции

//возвращает строковое наименование сегмента или неопределено если такого сегмента нет
Функция ПолучитьНаименованиеСегментаПоГУИД(стрГУИД) Экспорт
	Сегменты = ПолучитьСегментыНоменклатуры();
	сегмент = Сегменты.НайтиСтроки(новый Структура("ГУИД", стрГУИД));
	Если сегмент.Количество() > 0 Тогда
		Возврат Сегмент[0].НаименованиеСегмента;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Сформировать всех Контрагентов для агента
// Возвращаемое значение ТаблицаЗначений
Функция ПолучитьТаблицуКонтрагентов(
		ПарамАгент,
		ПарамЗапретитьИзменятьТипЦен,
		ПарамЗапретитьИзменятьСкидку,
		ПарамВыделятьЦветомКонтрагентов,
		ТолькоСсылки) Экспорт
	
	РезультатЗапроса = СформироватьПостроительОтчетаКонтрагенты(
						ПарамАгент,
						ПарамЗапретитьИзменятьТипЦен,
						ПарамЗапретитьИзменятьСкидку,
						ПарамВыделятьЦветомКонтрагентов, 
						ТолькоСсылки);
	
	ТЗ = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой); //получим всех Контрагентов этого агента
	Если ТолькоСсылки Тогда
		Возврат ТЗ;
	КонецЕсли;
	
	//проверка на уникальность
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ Табл.Код, 1 КАК Колво ПОМЕСТИТЬ ТЗ ИЗ &Табл КАК Табл;
	|ВЫБРАТЬ ТЗ.Код, СУММА(ТЗ.Колво) КАК Колво ПОМЕСТИТЬ Свернуть ИЗ ТЗ КАК ТЗ СГРУППИРОВАТЬ ПО ТЗ.Код;
	|ВЫБРАТЬ Свернуть.Код, Свернуть.Колво ИЗ Свернуть КАК Свернуть ГДЕ Свернуть.Колво <> 1";
	
	Запрос.УстановитьПараметр("Табл",ТЗ );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	     ДобавитьВЛогФайл("Неуникальные коды контрагентов " + Выборка.Код + " " + Выборка.Колво + " шт.");
	КонецЦикла;
	 
	возврат ТЗ;
КонецФункции // ПолучитьВыборкуКонтрагентов()

// Возвращает ПостроительОтчета Номенклатура с заполненными параметрами
// Параметры
// ПарамАгент - Агент для которого формируется построитель
// ПарамВыгружатьВсе - Булево, признак выгрузки номенклатуры:  Истина - всю номенклатуру, 
// Ложь - только ту которая есть на остатке
// ПарамВыбКатИзмЦен - Справочник.КатегорииОбъектов, категория номенклатуры, для которой  разрешено менять цены
// ПарамВыделятьОранжевымЦветом - Справочник.КатегорииОбъектов, номенклатура с этой категорией будет 
// выделена на КПК оранжевым цветом
// ПарамСклад - Справочник.Склады, склад по которому будут определяться остатки
// Возвращаемое значение типа ПостроительОтчета с результатами 
Процедура СформироватьПостроительОтчетаНоменклатура(
		ПарамАгент,
		ПарамВыгружатьВсе,
		ПарамУчитыватьРезервПриРасчетеОстатков,
		ДетализироватьНаКПКПоСериям,
		ПарамВыбКатИзмЦен,
		ПарамВыделятьОранжевымЦветом,
		ПарамСклады,
		ОграничиватьОстатокПоСкладу,
		МаксимальныйОстатокПоСкладу,
		ТаблТоваров,
		ТаблОстатков,
		ИмяОтбораНоменклатуры = "Номенклатура") Экспорт
	Построитель = Новый ПостроительОтчета;
	ТаблСОтбором = ПрочитатьОтбор(ПарамАгент,ИмяОтбораНоменклатуры); //прочитаем из регистра отбор
	
	Если ПарамВыгружатьВсе Тогда //Чтобы выгружать всю номенклатуру, отключим использование отбора с Остатками
		Для каждого стр Из ТаблСОтбором Цикл
			Если Стр.ПутьКДанным   = "Остаток" Тогда
				Стр.Использование = Ложь;
			КонецЕсли; 
		КонецЦикла; 
		//доделка для работы на старых платформах например на 8.1.11 без данного кода
		//не работает флажок Выгружать всю номенклатуру, при попытке сформировать список
		//номенклатуры 1С вываливается из процедуры с ошибкой
		//Нов=ТаблСОтбором.Добавить();
		//Нов.ПутьКДанным 	= "Остаток";
		//Нов.Имя 			= "";
		//Нов.Представление	= "Остаток";
		//Нов.ВидСравнения	= ВидСравнения.Больше;
		//Нов.Значение		= -1000000000000000;
		//Нов.ЗначениеПо	= 0;                                           
		//Нов.ЗначениеС		= 0;
		//Нов.Использование	= Истина;
	Иначе //Если нужно контролировать выгрузку товаров по остаткам,
		//то добавим отбор по полю КонтролироватьОстаток > 0
		//при такой выгрузке на КПК будут выгружены наборы, услуги и тд
		Нов=ТаблСОтбором.Добавить();
		Нов.ПутьКДанным 	= "КонтролироватьОстаток";
		Нов.Имя 			= "";
		Нов.Представление 	= "КонтролироватьОстаток";
		Нов.ВидСравнения	= ВидСравнения.Больше;
		Нов.Значение		= 0;
		Нов.ЗначениеПо		= 0;                                           
		Нов.ЗначениеС		= 0;
		Нов.Использование 	= Истина;
	КонецЕсли;
	
	ЗаполнитьОтборПостроителя(ТаблСОтбором,Построитель, БланкПостроителяОтчетаНоменклатура);
	Построитель.Параметры.Вставить(
		"РазрешенУчетПоХарактеристикам", Константы.ИспользоватьХарактеристикиНоменклатуры.Получить());
	//НЕ детализировать тк проще проверить - (на равенство серий) или (флаг - не проверять серии)
	БезСерийНаКПК = (НЕ ДетализироватьНаКПКПоСериям) ИЛИ (НЕ Константы.ИспользоватьСерииНоменклатуры.Получить());
	Построитель.Параметры.Вставить(
		"НеДетализироватьНаКПКПоСериям", БезСерийНаКПК);
	Построитель.Параметры.Вставить(
		"КатегорияМенятьЦены",ПарамВыбКатИзмЦен);
	Построитель.Параметры.Вставить(
		"ВыделятьОранжевымЦветом",ПарамВыделятьОранжевымЦветом);
	Построитель.Параметры.Вставить(
		"УчитыватьРезервПриРасчетеОстатков",ПарамУчитыватьРезервПриРасчетеОстатков);
	//когда склады НЕ заданы, то по всем складам
	Построитель.Параметры.Вставить(
		"ПоВсемСкладам", ПарамСклады.Количество() = 0);
	Построитель.Параметры.Вставить(
		"Склады",ПарамСклады.ВыгрузитьКолонку("Склад"));
	Цвет = ПолучитьНастройку(ПарамАгент, "ЦветКатегории", Новый Цвет(255, 165, 0));
	Построитель.Параметры.Вставить(
		"ЦветКатегории", ЦелоеВСтроку(ЦветВЧисло(Цвет)));
	Построитель.Параметры.Вставить(
		"ОграничиватьОстаток", ОграничиватьОстатокПоСкладу);
	Построитель.Параметры.Вставить(
		"МаксимальныйОстаток", МаксимальныйОстатокПоСкладу);
	
	Пакет=Построитель.ПолучитьЗапрос().ВыполнитьПакет();
	Если ТаблТоваров<>Неопределено Тогда 
		ТаблТоваров=Пакет[Пакет.Количество()-2].Выгрузить(); 
	КонецЕсли;
	Если ТаблОстатков<>Неопределено Тогда 
		ТаблОстатков=Пакет[Пакет.Количество()-1].Выгрузить(); 
	КонецЕсли;
		
КонецПроцедуры // СформироватьПостроительОтчетаНоменклатура()

// Возвращает ПостроительОтчета Контрагентами с заполненными параметрами
// Параметры
// ПарамАгент - Справочник.Пользователи, агент для которого формируется построитель
// ПарамЗапретитьИзменятьТипЦен - Спр.КатегорииОбъектов, у контрагентов с этой категорией запрещено менять тип цен
// ПарамЗапретитьИзменятьСкидку - Спр.КатегорииОбъектов, у контрагентов с этой категорией запрещено менять скидку
// ПарамВыделятьЦветомКонтрагентов - Спр.КатегорииОбъектов, контрагенты с этой категорией будут помечены цветом на КПК
// Возвращаемое значение типа ПостроительОтчета с результатами 
Функция СформироватьПостроительОтчетаКонтрагенты(
		ПарамАгент,
		ПарамЗапретитьИзменятьТипЦен,
		ПарамЗапретитьИзменятьСкидку,
		ПарамВыделятьЦветомКонтрагентов, 
		ТолькоСсылки) Экспорт
	Построитель=Новый ПостроительОтчета;
	
	ТаблСОтбором = ПрочитатьОтбор(ПарамАгент,"Контрагенты"); //прочитаем из регистра отбор
	
	ЗаполнитьОтборПостроителя(ТаблСОтбором,Построитель,БланкПостроителяОтчетаКонтрагенты);
	Построитель.Выполнить();
	Если ТолькоСсылки Тогда
		Возврат Построитель.Результат;
	КонецЕсли;
	
	Клиенты = Построитель.Результат.Выгрузить();
	СписокКонтрагентов = Клиенты.ВыгрузитьКолонку("Контрагент");
	
	ТекстПодготовкаДанных = "";
	Если Истина Тогда
		ТекстПодготовкаДанных = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Контрагенты.ГоловнойКонтрагент КАК Контрагент
		|ПОМЕСТИТЬ ТаблХолдингов
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка <> Контрагенты.ГоловнойКонтрагент
		|	И НЕ Контрагенты.ЭтоГруппа
		|
		|СГРУППИРОВАТЬ ПО
		|	Контрагенты.ГоловнойКонтрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(ВремТабл.Контрагент КАК Справочник.Контрагенты) КАК Контрагент,
		|	ВЫБОР
		|		КОГДА ВремТабл.КонтролироватьЧислоДнейЗадолженности
		|			ТОГДА ВремТабл.ДнейПросрочки
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК ДнейПросрочки
		|ПОМЕСТИТЬ ПросроченныеДолги
		|ИЗ
		|	&ВремТабл КАК ВремТабл
		|ГДЕ
		|	ВремТабл.ДнейПросрочки > -1
		|	И ВремТабл.ДолгКонтрагента > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КатегорииОбъектов.Объект КАК Объект
		|ПОМЕСТИТЬ ЗапретИзменятьЦены
		|ИЗ
		|	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
		|ГДЕ
		|	КатегорииОбъектов.Категория = &ЗапретитьИзменятьТипЦен
		|	И (КатегорииОбъектов.Объект В (&МассивКонтрагентов)
		|			ИЛИ КатегорииОбъектов.Объект В (&МассивГоловныхКонтрагентов))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КатегорииОбъектов.Объект КАК Объект
		|ПОМЕСТИТЬ ВыделятьЦветомКонтрагентов
		|ИЗ
		|	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
		|ГДЕ
		|	КатегорииОбъектов.Категория = &ВыделятьЦветомКонтрагентов
		|	И (КатегорииОбъектов.Объект В (&МассивКонтрагентов)
		|			ИЛИ КатегорииОбъектов.Объект В (&МассивГоловныхКонтрагентов))" + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Если Конфигурация = "ТорговляУкраина" 
		ИЛИ Конфигурация = "УТПУкраина" 
		ИЛИ Конфигурация = "УППУкраина" Тогда
		Если Истина Тогда
			Запрос.Текст=ТекстПодготовкаДанных + "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Контрагенты.Ссылка КАК Контрагент,
			|	ЕСТЬNULL(Контрагенты.ОсновнойДоговорКонтрагента.КонтролироватьСуммуЗадолженности, ЛОЖЬ) КАК КонтролироватьСуммуЗадолженности,
			|	ЕСТЬNULL(Контрагенты.ОсновнойДоговорКонтрагента.ДопустимаяСуммаЗадолженности, 0) КАК ДопустимаяСуммаЗадолженности,
			|	Контрагенты.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	Контрагенты.ОсновнойДоговорКонтрагента.ТипЦен КАК ТипЦен,
			|	Контрагенты.Код КАК Код,
			|	Контрагенты.Родитель,
			|	ЕСТЬNULL(Контрагенты.Родитель.Код, """") КАК РодительКод,
			|	Контрагенты.ИНН КАК ИНН,
			|	"""" КАК КПП,
			|	"""" КАК КодПоОКПО,
			|	Контрагенты.Наименование КАК Наименование,
			|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
			|	ЕСТЬNULL(Контрагенты.ОсновнойБанковскийСчет, ЛОЖЬ) КАК РасчетныйСчет,
			|	Контрагенты.ОсновнойБанковскийСчет.НомерСчета КАК РасчетныйСчет_НомерСчета,
			|	Контрагенты.ОсновнойБанковскийСчет.Банк.Наименование КАК РасчетныйСчет_Банк_Наименование,
			|	Контрагенты.ОсновнойБанковскийСчет.Банк.Город КАК РасчетныйСчет_Банк_Город,
			|	Контрагенты.ОсновнойБанковскийСчет.Банк.Код КАК РасчетныйСчет_Банк_Код,
			|	Контрагенты.ОсновнойБанковскийСчет.Банк.КоррСчет КАК РасчетныйСчет_Банк_КоррСчет,
			|	"""" КАК РасчетныйСчет_БанкДляРасчетов,
			|	"""" КАК РасчетныйСчет_БанкДляРасчетов_Наименование,
			|	"""" КАК РасчетныйСчет_БанкДляРасчетов_Город,
			|	"""" КАК РасчетныйСчет_БанкДляРасчетов_Код,
			|	"""" КАК РасчетныйСчет_БанкДляРасчетов_КоррСчет,
			|	ЕСТЬNULL(Долги.СуммаУпрОстаток, 0) КАК Долг,
			|	ЕСТЬNULL(ПросроченныеДолги.ДнейПросрочки, -1) КАК ДнейПросрочки,
			|	ВЫБОР
			|		КОГДА &ЗапретитьИзменятьТипЦен = ИСТИНА
			|			ТОГДА 1
			|		КОГДА &ЗапретитьИзменятьТипЦен = ЛОЖЬ
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА ЕСТЬNULL(ЗапретИзменятьЦены.Объект, ИСТИНА) = ИСТИНА
			|					ТОГДА 0
			|				ИНАЧЕ 1
			|			КОНЕЦ
			|	КОНЕЦ КАК ЗапретитьИзменятьТипЦен,
			|	ВЫБОР
			|		КОГДА &ЗапретитьИзменятьТипЦен = ИСТИНА
			|			ТОГДА 1
			|		КОГДА &ЗапретитьИзменятьТипЦен = ЛОЖЬ
			|			ТОГДА 0
			|		ИНАЧЕ ВЫБОР
			|				КОГДА ЕСТЬNULL(ЗапретИзменятьЦены.Объект, ИСТИНА) = ИСТИНА
			|					ТОГДА 0
			|				ИНАЧЕ 1
			|			КОНЕЦ
			|	КОНЕЦ КАК ЗапретитьИзменятьСкидку,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ВыделятьЦветомКонтрагентов.Объект, ИСТИНА) = ИСТИНА
			|			ТОГДА ""0""
			|		ИНАЧЕ &ЦветКонтрагентов
			|	КОНЕЦ КАК Цвет,
			|	Контрагенты.ГоловнойКонтрагент.Наименование КАК ЮрЛицоНаименование,
			|	Контрагенты.ГоловнойКонтрагент.Код КАК ЮрЛицоКод,
			|	Контрагенты.ГоловнойКонтрагент КАК ЮрЛицо,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ТаблХолдингов.Контрагент, ИСТИНА) = ИСТИНА
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ЭтоХолдинг,
			|	Контрагенты.ОсновнойДоговорКонтрагента.Организация.Код КАК ОсновнаяОрганизация,
			|	Контрагенты.ОсновнойДоговорКонтрагента,
			|	Контрагенты.Комментарий,
			|	Контрагенты.ДополнительноеОписание,
			|	КонтактнаяИнформацияЮрАдр.Представление КАК ЮрАдрес,
			|	КонтактнаяИнформацияФактАдр.Представление КАК ФактАдрес
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|		ЛЕВОЕ СОЕДИНЕНИЕ ЗапретИзменятьЦены КАК ЗапретИзменятьЦены
			|		ПО Контрагенты.Ссылка = ЗапретИзменятьЦены.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВыделятьЦветомКонтрагентов КАК ВыделятьЦветомКонтрагентов
			|		ПО Контрагенты.Ссылка = ВыделятьЦветомКонтрагентов.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(, ) КАК Долги
			|		ПО Контрагенты.Ссылка = Долги.Контрагент
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияЮрАдр
			|		ПО Контрагенты.Ссылка = КонтактнаяИнформацияЮрАдр.Объект
			|			И (КонтактнаяИнформацияЮрАдр.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияФактАдр
			|		ПО Контрагенты.Ссылка = КонтактнаяИнформацияФактАдр.Объект
			|			И (КонтактнаяИнформацияФактАдр.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента))
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПросроченныеДолги КАК ПросроченныеДолги
			|		ПО Контрагенты.Ссылка = ПросроченныеДолги.Контрагент
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблХолдингов КАК ТаблХолдингов
			|		ПО Контрагенты.Ссылка = ТаблХолдингов.Контрагент
			|ГДЕ
			|	(Контрагенты.Ссылка В (&МассивКонтрагентов)
			|			ИЛИ Контрагенты.Ссылка В (&МассивГоловныхКонтрагентов))
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЮрЛицо,
			|	ВЫБОР
			|		КОГДА Контрагенты.ГоловнойКонтрагент = Контрагенты.Ссылка
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ,
			|	Контрагент
			|АВТОУПОРЯДОЧИВАНИЕ";			
		КонецЕсли;
	ИначеЕсли Конфигурация = "ТорговляКазахстан" 
		ИЛИ Конфигурация = "УТПКазахстан"
		ИЛИ Конфигурация = "УППКазахстан" Тогда		
		Если Истина Тогда
			Запрос.Текст=ТекстПодготовкаДанных + "
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Контрагенты.Ссылка КАК Контрагент,
				|	ЕСТЬNULL(Контрагенты.ОсновнойДоговорКонтрагента.КонтролироватьСуммуЗадолженности, ЛОЖЬ) КАК КонтролироватьСуммуЗадолженности,
				|	ЕСТЬNULL(Контрагенты.ОсновнойДоговорКонтрагента.ДопустимаяСуммаЗадолженности, 0) КАК ДопустимаяСуммаЗадолженности,
				|	Контрагенты.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
				|	Контрагенты.ОсновнойДоговорКонтрагента.ТипЦен КАК ТипЦен,
				|	Контрагенты.Код КАК Код,
				|	Контрагенты.Родитель,
				|	ЕСТЬNULL(Контрагенты.Родитель.Код, """") КАК РодительКод,
				|	Контрагенты.ИдентификационныйКодЛичности КАК ИНН,
				|	Контрагенты.РНН КАК КПП,
				|	Контрагенты.КодПоОКПО КАК КодПоОКПО,
				|	Контрагенты.Наименование КАК Наименование,
				|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
				|	ЕСТЬNULL(Контрагенты.ОсновнойБанковскийСчет, ЛОЖЬ) КАК РасчетныйСчет,
				|	Контрагенты.ОсновнойБанковскийСчет.НомерСчета КАК РасчетныйСчет_НомерСчета,
				|	Контрагенты.ОсновнойБанковскийСчет.Банк.Наименование КАК РасчетныйСчет_Банк_Наименование,
				|	Контрагенты.ОсновнойБанковскийСчет.Банк.Город КАК РасчетныйСчет_Банк_Город,
				|	Контрагенты.ОсновнойБанковскийСчет.Банк.Код КАК РасчетныйСчет_Банк_Код,
				|	Контрагенты.ОсновнойБанковскийСчет.Банк.КоррСчет КАК РасчетныйСчет_Банк_КоррСчет,
				|	Контрагенты.ОсновнойБанковскийСчет.БанкДляРасчетов КАК РасчетныйСчет_БанкДляРасчетов,
				|	"""" КАК РасчетныйСчет_БанкДляРасчетов_Наименование,
				|	"""" КАК РасчетныйСчет_БанкДляРасчетов_Город,
				|	"""" КАК РасчетныйСчет_БанкДляРасчетов_Код,
				|	"""" КАК РасчетныйСчет_БанкДляРасчетов_КоррСчет,
				|	ЕСТЬNULL(Долги.СуммаУпрОстаток, 0) КАК Долг,
				|	ЕСТЬNULL(ПросроченныеДолги.ДнейПросрочки, -1) КАК ДнейПросрочки,
				|	ВЫБОР
				|		КОГДА &ЗапретитьИзменятьТипЦен = ИСТИНА
				|			ТОГДА 1
				|		КОГДА &ЗапретитьИзменятьТипЦен = ЛОЖЬ
				|			ТОГДА 0
				|		ИНАЧЕ ВЫБОР
				|				КОГДА ЕСТЬNULL(ЗапретИзменятьЦены.Объект, ИСТИНА) = ИСТИНА
				|					ТОГДА 0
				|				ИНАЧЕ 1
				|			КОНЕЦ
				|	КОНЕЦ КАК ЗапретитьИзменятьТипЦен,
				|	ВЫБОР
				|		КОГДА &ЗапретитьИзменятьТипЦен = ИСТИНА
				|			ТОГДА 1
				|		КОГДА &ЗапретитьИзменятьТипЦен = ЛОЖЬ
				|			ТОГДА 0
				|		ИНАЧЕ ВЫБОР
				|				КОГДА ЕСТЬNULL(ЗапретИзменятьЦены.Объект, ИСТИНА) = ИСТИНА
				|					ТОГДА 0
				|				ИНАЧЕ 1
				|			КОНЕЦ
				|	КОНЕЦ КАК ЗапретитьИзменятьСкидку,
				|	ВЫБОР
				|		КОГДА ЕСТЬNULL(ВыделятьЦветомКонтрагентов.Объект, ИСТИНА) = ИСТИНА
				|			ТОГДА ""0""
				|		ИНАЧЕ &ЦветКонтрагентов
				|	КОНЕЦ КАК Цвет,
				|	Контрагенты.ГоловнойКонтрагент.Наименование КАК ЮрЛицоНаименование,
				|	Контрагенты.ГоловнойКонтрагент.Код КАК ЮрЛицоКод,
				|	Контрагенты.ГоловнойКонтрагент КАК ЮрЛицо,
				|	ВЫБОР
				|		КОГДА ЕСТЬNULL(ТаблХолдингов.Контрагент, ИСТИНА) = ИСТИНА
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ИСТИНА
				|	КОНЕЦ КАК ЭтоХолдинг,
				|	Контрагенты.ОсновнойДоговорКонтрагента.Организация.Код КАК ОсновнаяОрганизация,
				|	Контрагенты.ОсновнойДоговорКонтрагента,
				|	Контрагенты.Комментарий,
				|	Контрагенты.ДополнительноеОписание,
				|	КонтактнаяИнформацияЮрАдр.Представление КАК ЮрАдрес,
				|	КонтактнаяИнформацияФактАдр.Представление КАК ФактАдрес
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|		ЛЕВОЕ СОЕДИНЕНИЕ ЗапретИзменятьЦены КАК ЗапретИзменятьЦены
				|		ПО Контрагенты.Ссылка = ЗапретИзменятьЦены.Объект
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВыделятьЦветомКонтрагентов КАК ВыделятьЦветомКонтрагентов
				|		ПО Контрагенты.Ссылка = ВыделятьЦветомКонтрагентов.Объект
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(, ) КАК Долги
				|		ПО Контрагенты.Ссылка = Долги.Контрагент
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияЮрАдр
				|		ПО Контрагенты.Ссылка = КонтактнаяИнформацияЮрАдр.Объект
				|			И (КонтактнаяИнформацияЮрАдр.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента))
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияФактАдр
				|		ПО Контрагенты.Ссылка = КонтактнаяИнформацияФактАдр.Объект
				|			И (КонтактнаяИнформацияФактАдр.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента))
				|		ЛЕВОЕ СОЕДИНЕНИЕ ПросроченныеДолги КАК ПросроченныеДолги
				|		ПО Контрагенты.Ссылка = ПросроченныеДолги.Контрагент
				|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблХолдингов КАК ТаблХолдингов
				|		ПО Контрагенты.Ссылка = ТаблХолдингов.Контрагент
				|ГДЕ
				|	(Контрагенты.Ссылка В (&МассивКонтрагентов)
				|			ИЛИ Контрагенты.Ссылка В (&МассивГоловныхКонтрагентов))
				|
				|УПОРЯДОЧИТЬ ПО
				|	ЮрЛицо,
				|	ВЫБОР
				|		КОГДА Контрагенты.ГоловнойКонтрагент = Контрагенты.Ссылка
				|			ТОГДА 0
				|		ИНАЧЕ 1
				|	КОНЕЦ,
				|	Контрагент
				|АВТОУПОРЯДОЧИВАНИЕ";					
		КонецЕсли;
	Иначе
		Если Истина Тогда
			Запрос.Текст=ТекстПодготовкаДанных + "
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Контрагенты.Ссылка КАК Контрагент,
				|	ЕСТЬNULL(Контрагенты.ОсновнойДоговорКонтрагента.КонтролироватьСуммуЗадолженности, ЛОЖЬ) КАК КонтролироватьСуммуЗадолженности,
				|	ЕСТЬNULL(Контрагенты.ОсновнойДоговорКонтрагента.ДопустимаяСуммаЗадолженности, 0) КАК ДопустимаяСуммаЗадолженности,
				|	Контрагенты.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
				|	Контрагенты.ОсновнойДоговорКонтрагента.ТипЦен КАК ТипЦен,
				|	Контрагенты.Код КАК Код,
				|	Контрагенты.Родитель,
				|	ЕСТЬNULL(Контрагенты.Родитель.Код, """") КАК РодительКод,
				|	Контрагенты.ИНН КАК ИНН,
				|	Контрагенты.КПП КАК КПП,
				|	Контрагенты.КодПоОКПО КАК КодПоОКПО,
				|	Контрагенты.Наименование КАК Наименование,
				|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
				|	ЕСТЬNULL(Контрагенты.ОсновнойБанковскийСчет, ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)) КАК РасчетныйСчет,
				|	Контрагенты.ОсновнойБанковскийСчет.НомерСчета КАК РасчетныйСчет_НомерСчета,
				|	Контрагенты.ОсновнойБанковскийСчет.Банк.Наименование КАК РасчетныйСчет_Банк_Наименование,
				|	Контрагенты.ОсновнойБанковскийСчет.Банк.Город КАК РасчетныйСчет_Банк_Город,
				|	Контрагенты.ОсновнойБанковскийСчет.Банк.Код КАК РасчетныйСчет_Банк_Код,
				|	Контрагенты.ОсновнойБанковскийСчет.Банк.КоррСчет КАК РасчетныйСчет_Банк_КоррСчет,
				|	Контрагенты.ОсновнойБанковскийСчет.БанкДляРасчетов КАК РасчетныйСчет_БанкДляРасчетов,
				|	Контрагенты.ОсновнойБанковскийСчет.БанкДляРасчетов.Наименование КАК РасчетныйСчет_БанкДляРасчетов_Наименование,
				|	Контрагенты.ОсновнойБанковскийСчет.БанкДляРасчетов.Город КАК РасчетныйСчет_БанкДляРасчетов_Город,
				|	Контрагенты.ОсновнойБанковскийСчет.БанкДляРасчетов.Код КАК РасчетныйСчет_БанкДляРасчетов_Код,
				|	Контрагенты.ОсновнойБанковскийСчет.БанкДляРасчетов.КоррСчет КАК РасчетныйСчет_БанкДляРасчетов_КоррСчет,
				|	ЕСТЬNULL(Долги.СуммаУпрОстаток, 0) КАК Долг,
				|	ЕСТЬNULL(ПросроченныеДолги.ДнейПросрочки, -1) КАК ДнейПросрочки,
				|	ВЫБОР
				|		КОГДА &ЗапретитьИзменятьТипЦен = ИСТИНА
				|			ТОГДА 1
				|		КОГДА &ЗапретитьИзменятьТипЦен = ЛОЖЬ
				|			ТОГДА 0
				|		ИНАЧЕ ВЫБОР
				|				КОГДА ЕСТЬNULL(ЗапретИзменятьЦены.Объект, ИСТИНА) = ИСТИНА
				|					ТОГДА 0
				|				ИНАЧЕ 1
				|			КОНЕЦ
				|	КОНЕЦ КАК ЗапретитьИзменятьТипЦен,
				|	ВЫБОР
				|		КОГДА &ЗапретитьИзменятьТипЦен = ИСТИНА
				|			ТОГДА 1
				|		КОГДА &ЗапретитьИзменятьТипЦен = ЛОЖЬ
				|			ТОГДА 0
				|		ИНАЧЕ ВЫБОР
				|				КОГДА ЕСТЬNULL(ЗапретИзменятьЦены.Объект, ИСТИНА) = ИСТИНА
				|					ТОГДА 0
				|				ИНАЧЕ 1
				|			КОНЕЦ
				|	КОНЕЦ КАК ЗапретитьИзменятьСкидку,
				|	ВЫБОР
				|		КОГДА ЕСТЬNULL(ВыделятьЦветомКонтрагентов.Объект, ИСТИНА) = ИСТИНА
				|			ТОГДА ""0""
				|		ИНАЧЕ &ЦветКонтрагентов
				|	КОНЕЦ КАК Цвет,
				|	Контрагенты.ГоловнойКонтрагент.Наименование КАК ЮрЛицоНаименование,
				|	Контрагенты.ГоловнойКонтрагент.Код КАК ЮрЛицоКод,
				|	Контрагенты.ГоловнойКонтрагент КАК ЮрЛицо,
				|	ВЫБОР
				|		КОГДА ЕСТЬNULL(ТаблХолдингов.Контрагент, ИСТИНА) = ИСТИНА
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ИСТИНА
				|	КОНЕЦ КАК ЭтоХолдинг,
				|	Контрагенты.ОсновнойДоговорКонтрагента.Организация.Код КАК ОсновнаяОрганизация,
				|	Контрагенты.ОсновнойДоговорКонтрагента,
				|	Контрагенты.Комментарий,
				|	Контрагенты.ДополнительноеОписание,
				|	КонтактнаяИнформацияЮрАдр.Представление КАК ЮрАдрес,
				|	КонтактнаяИнформацияФактАдр.Представление КАК ФактАдрес
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|		ЛЕВОЕ СОЕДИНЕНИЕ ЗапретИзменятьЦены КАК ЗапретИзменятьЦены
				|		ПО Контрагенты.Ссылка = ЗапретИзменятьЦены.Объект
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВыделятьЦветомКонтрагентов КАК ВыделятьЦветомКонтрагентов
				|		ПО Контрагенты.Ссылка = ВыделятьЦветомКонтрагентов.Объект
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(, ) КАК Долги
				|		ПО Контрагенты.Ссылка = Долги.Контрагент
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияЮрАдр
				|		ПО Контрагенты.Ссылка = КонтактнаяИнформацияЮрАдр.Объект
				|			И (КонтактнаяИнформацияЮрАдр.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента))
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияФактАдр
				|		ПО Контрагенты.Ссылка = КонтактнаяИнформацияФактАдр.Объект
				|			И (КонтактнаяИнформацияФактАдр.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента))
				|		ЛЕВОЕ СОЕДИНЕНИЕ ПросроченныеДолги КАК ПросроченныеДолги
				|		ПО Контрагенты.Ссылка = ПросроченныеДолги.Контрагент
				|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблХолдингов КАК ТаблХолдингов
				|		ПО Контрагенты.Ссылка = ТаблХолдингов.Контрагент
				|ГДЕ
				|	(Контрагенты.Ссылка В (&МассивКонтрагентов)
				|			ИЛИ Контрагенты.Ссылка В (&МассивГоловныхКонтрагентов))
				|
				|УПОРЯДОЧИТЬ ПО
				|	ЮрЛицо,
				|	ВЫБОР
				|		КОГДА Контрагенты.ГоловнойКонтрагент = Контрагенты.Ссылка
				|			ТОГДА 0
				|		ИНАЧЕ 1
				|	КОНЕЦ,
				|	Контрагент
				|АВТОУПОРЯДОЧИВАНИЕ";
		КонецЕсли;
	КонецЕсли;	
	
	ЗапросПросроченныеДолги = новый запрос();
	Если Истина Тогда
		ЗапросПросроченныеДолги.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Календарь.ДатаКалендаря КАК ДатаКалендаря,
		|	КОЛИЧЕСТВО(*) КАК Ранг
		|ПОМЕСТИТЬ Календарь
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК Календарь
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК КалендарьКопия
		|		ПО Календарь.ДатаКалендаря >= КалендарьКопия.ДатаКалендаря
		|			И (КалендарьКопия.ВидДня В (&ВидыДней))
		|ГДЕ
		|	Календарь.ВидДня В(&ВидыДней)
		|
		|СГРУППИРОВАТЬ ПО
		|	Календарь.ДатаКалендаря
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДатаКалендаря
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВзаиморасчетыОстатки.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
		|	ВзаиморасчетыОстатки.Контрагент КАК Контрагент,
		|	ВзаиморасчетыОстатки.ДоговорКонтрагента.ДопустимаяСуммаЗадолженности КАК ДопустимаяСуммаЗадолженности,
		|	ВзаиморасчетыОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток,
		|	ВзаиморасчетыОстатки.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности КАК ДопустимоеЧислоДнейЗадолженности,
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыОстатки.ДокументРасчетовСКонтрагентом.Дата, ДЕНЬ) КАК Дата,
		|	ВзаиморасчетыОстатки.ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности КАК КонтролироватьЧислоДнейЗадолженности
		|ПОМЕСТИТЬ ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
		|			&ТекДата,
		|			ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
//		|			И ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности > 0
		|			И ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом = ИСТИНА
		|			И Контрагент В (&СписокКонтрагентов)) КАК ВзаиморасчетыОстатки
		|ГДЕ
		|	ВзаиморасчетыОстатки.СуммаВзаиморасчетовОстаток > 0"
		+ ?(НЕ (Конфигурация = "ТорговляУкраина" ИЛИ Конфигурация = "УППУкраина" ИЛИ Конфигурация = "УТПУкраина"), "
		|	И ВзаиморасчетыОстатки.УпрУчет",
		"") + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВзаиморасчетыОстатки.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
		|	МИНИМУМ(ВзаиморасчетыОстатки.ДопустимоеЧислоДнейЗадолженности) КАК ДопустимоеЧислоДнейЗадолженности,
		|	НАЧАЛОПЕРИОДА(МИНИМУМ(ВзаиморасчетыОстатки.ДокументРасчетовСКонтрагентом.Дата), ДЕНЬ) КАК Дата
		|ПОМЕСТИТЬ ВзаиморасчетыОстатки
		|ИЗ
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки КАК ВзаиморасчетыОстатки
        |
		|СГРУППИРОВАТЬ ПО
		|	ВзаиморасчетыОстатки.ДокументРасчетовСКонтрагентом
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВзаиморасчетыОстатки.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
		|	МИНИМУМ(Календарь.Ранг) + МИНИМУМ(ВзаиморасчетыОстатки.ДопустимоеЧислоДнейЗадолженности) КАК РангСоединения
		|ПОМЕСТИТЬ КалендарьРанг
		|ИЗ
		|	ВзаиморасчетыОстатки КАК ВзаиморасчетыОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Календарь КАК Календарь
		|		ПО ВзаиморасчетыОстатки.Дата <= Календарь.ДатаКалендаря
		|			И (ДОБАВИТЬКДАТЕ(ВзаиморасчетыОстатки.Дата, ДЕНЬ, 14) >= Календарь.ДатаКалендаря)
		|СГРУППИРОВАТЬ ПО
		|	ВзаиморасчетыОстатки.ДокументРасчетовСКонтрагентом
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КалендарьРанг.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
		|	Календарь.ДатаКалендаря КАК ДатаКалендаря
		|ПОМЕСТИТЬ РабочаяДатаВзаиморасчетыОстатки
		|ИЗ
		|	Календарь КАК Календарь
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КалендарьРанг КАК КалендарьРанг
		|		ПО (КалендарьРанг.РангСоединения = Календарь.Ранг)
        |
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументРасчетовСКонтрагентом
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВзаиморасчетыОстатки.Контрагент КАК Контрагент,
		|	ВзаиморасчетыОстатки.СуммаВзаиморасчетовОстаток КАК ДолгКонтрагента,
		|	ВзаиморасчетыОстатки.ДопустимаяСуммаЗадолженности КАК ГлубинаКредитнойЛинии,
		|	РАЗНОСТЬДАТ(ВЫБОР
		|			КОГДА &СпособКонтроляДнейЗадолженности = ЗНАЧЕНИЕ(Перечисление.СпособыКонтроляДнейЗадолженности.ПоРабочимДням)
		|				ТОГДА ЕСТЬNULL(РабочаяДатаВзаиморасчетыОстатки.ДатаКалендаря, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|			ИНАЧЕ ДОБАВИТЬКДАТЕ(ВзаиморасчетыОстатки.ДокументРасчетовСКонтрагентом.Дата, ДЕНЬ, ВзаиморасчетыОстатки.ДопустимоеЧислоДнейЗадолженности)
		|		КОНЕЦ, &ТекДата, ДЕНЬ) - 1 КАК ДнейПросрочки,
		|	ВзаиморасчетыОстатки.ДопустимоеЧислоДнейЗадолженности КАК ЧислоДней,
		|	NULL КАК Флаг,
		|	ВзаиморасчетыОстатки.КонтролироватьЧислоДнейЗадолженности КАК КонтролироватьЧислоДнейЗадолженности,
		|	РабочаяДатаВзаиморасчетыОстатки.ДатаКалендаря
		|ИЗ
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки КАК ВзаиморасчетыОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РабочаяДатаВзаиморасчетыОстатки КАК РабочаяДатаВзаиморасчетыОстатки
		|		ПО (РабочаяДатаВзаиморасчетыОстатки.ДокументРасчетовСКонтрагентом = ВзаиморасчетыОстатки.ДокументРасчетовСКонтрагентом)
		|ИТОГИ
		|	СУММА(ДолгКонтрагента),
		|	МИНИМУМ(ГлубинаКредитнойЛинии),
		|	МАКСИМУМ(ДнейПросрочки),
		|	МИНИМУМ(ЧислоДней),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Флаг),
		|	МАКСИМУМ(КонтролироватьЧислоДнейЗадолженности),
		|	МИНИМУМ(ДатаКалендаря)
		|ПО
		|	Контрагент";
	КонецЕсли;
	
	ЗапросПросроченныеДолги.УстановитьПараметр(
		"СписокКонтрагентов", СписокКонтрагентов);
	ЗапросПросроченныеДолги.УстановитьПараметр(
		"ТекДата", КонецДня(ТекущаяДата()));
	ЗапросПросроченныеДолги.УстановитьПараметр(
		"СпособКонтроляДнейЗадолженности", Константы.СпособКонтроляДнейЗадолженности.Получить());
	
	ВидыДней = новый Массив();
	Если Конфигурация = "ТорговляУкраина" 
		ИЛИ Конфигурация = "УТПУкраина" 
		ИЛИ Конфигурация = "УППУкраина" Тогда
		ВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
		ВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	ИначеЕсли Конфигурация = "ТорговляКазахстан" 
		ИЛИ Конфигурация = "УТПКазахстан"
		ИЛИ Конфигурация = "УППКазахстан" Тогда		
		ВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	Иначе
		ВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
		ВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	КонецЕсли;	
	
	ЗапросПросроченныеДолги.Параметры.Вставить("ВидыДней", ВидыДней);
	
	ПросроченныеДолги = ЗапросПросроченныеДолги.Выполнить().Выгрузить();
	ПросроченныеДолги = ПросроченныеДолги.Скопировать(ПросроченныеДолги.НайтиСтроки(новый Структура("Флаг", 0)));
	
	Запрос.Параметры.Вставить("ВремТабл", ПросроченныеДолги);
	Запрос.Параметры.Вставить("МассивКонтрагентов", СписокКонтрагентов);
	Запрос.Параметры.Вставить("МассивГоловныхКонтрагентов",Клиенты.ВыгрузитьКолонку("ГоловнойКонтрагент"));
	Запрос.Параметры.Вставить("ЗапретитьИзменятьТипЦен"   ,ПарамЗапретитьИзменятьТипЦен);

	Запрос.Параметры.Вставить("ВыделятьЦветомКонтрагентов",ПарамВыделятьЦветомКонтрагентов);
	Запрос.Параметры.Вставить("ВалютаУправленческогоУчета",Константы.ВалютаУправленческогоУчета.Получить());
	Цвет = ПолучитьНастройку(ПарамАгент, "ЦветКонтрагентов", Новый Цвет(255, 165, 0));
	Запрос.Параметры.Вставить("ЦветКонтрагентов", ЦелоеВСтроку(ЦветВЧисло(Цвет)));
	
	Возврат Запрос.Выполнить();
КонецФункции // СформироватьПостроительОтчетаКонтрагенты(Агент)

//Инициализирует ПостроительОтчета для отбора контрагентов
Процедура ИнициализироватьПостроительЗапросаКонтрагенты() Экспорт

	БланкПостроителяОтчетаКонтрагенты = Новый ПостроительОтчета; 
	БланкПостроителяОтчетаКонтрагенты.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                                        |	Контрагенты.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
	                                        |	Контрагенты.Ссылка КАК Контрагент
	                                        |ИЗ
	                                        |	Справочник.Контрагенты КАК Контрагенты
	                                        |ГДЕ
	                                        |	Контрагенты.ЭтоГруппа = ЛОЖЬ
	                                        |{ГДЕ
	                                        |	Контрагенты.Ссылка.* КАК Контрагент}
	                                        |
	                                        |УПОРЯДОЧИТЬ ПО
	                                        |	ГоловнойКонтрагент ИЕРАРХИЯ,
	                                        |	Контрагент
	                                        |АВТОУПОРЯДОЧИВАНИЕ";

	БланкПостроителяОтчетаКонтрагенты.ЗаполнитьНастройки();
	ПостроительОтчетаКонтрагенты=Новый ПостроительОтчета;
	ЗаполнитьЗначенияСвойств(ПостроительОтчетаКонтрагенты,БланкПостроителяОтчетаКонтрагенты);
	ПостроительОтчетаКонтрагенты.ЗаполнитьНастройки();
	//ПостроительОтчетаКонтрагенты.Параметры.Вставить("ЗапретитьИзменятьТипЦен",Истина);
	//ПостроительОтчетаКонтрагенты.Параметры.Вставить("ЗапретитьИзменятьСкидку",
	//												  Справочники.КатегорииОбъектов.ПустаяСсылка());
	//ПостроительОтчетаКонтрагенты.Параметры.Вставить("ВыделятьЦветомКонтрагентов",
	//												  Справочники.КатегорииОбъектов.ПустаяСсылка());
	//ПостроительОтчетаКонтрагенты.Параметры.Вставить("ВалютаУправленческогоУчета",
	//												  Константы.ВалютаУправленческогоУчета.Получить());
	
КонецПроцедуры

// В текст для построителя отчета вставляет свойства и категории
Процедура ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, Текст, СтруктураПредставлениеПолей, мСоответствиеНазначений, 
	                                          СтруктураПараметры, ТекстИсточникиСведений="", ТекстПоляКатегорий="", 
	                                          ТекстПоляСвойств="", ТекстПоляСгруппироватьПо = "", 
	                                          ЗаменятьСвойства = "//СВОЙСТВА", ЗаменятьКатегории = "//КАТЕГОРИИ", 
	                                          ЗаменятьСоединения = "//СОЕДИНЕНИЯ", ЗаменятьСгруппироватьПо = "//СГРУППИРОВАТЬПО",
	                                          ИдентификаторыПараметровДляОтборовПоКатегориям = "") Экспорт

	// Добавляемые фрагменты запроса
	ТекстПоляКатегорийДляГруппировки = "";
	ТекстПоляСвойствДляГруппировки = "";
	ТекстИсточникиСведений = "";
	ТекстПоляКатегорий = "";
	ТекстПоляСвойств = "";
	
	Если НЕ ТипЗнч(ИдентификаторыПараметровДляОтборовПоКатегориям) = Тип("Структура") Тогда
		
		ИдентификаторыПараметровДляОтборовПоКатегориям = Новый Структура;
		
	КонецЕсли;

	Индекс = 0;

	СвойстваОбъектов = ПланыВидовХарактеристик.СвойстваОбъектов.Выбрать();
	
	Пока СвойстваОбъектов.Следующий() Цикл

		Если СвойстваОбъектов.ЭтоГруппа ИЛИ СвойстваОбъектов.ПометкаУдаления Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если СвойстваОбъектов.ТипЗначения.Типы().Количество() > 1 Тогда
			
			ПараметрПустоеЗначениеСвойства = "Неопределено";
			
		Иначе
			
			ТипСвойства = СвойстваОбъектов.ТипЗначения.Типы()[0];
			ВозможныеТипыСвойств = Метаданные.ПланыВидовХарактеристик.СвойстваОбъектов.Тип.Типы();
			
			ИндексТекущегоВозможногоТипа = 0;
			
			Для каждого ВозможныйТипСвойства из ВозможныеТипыСвойств Цикл
				
				Если ВозможныйТипСвойства = ТипСвойства Тогда
					
					ПараметрПустоеЗначениеСвойства = "&ПараметрПустоеЗначениеСвойства" + ИндексТекущегоВозможногоТипа;
					
				КонецЕсли;
				
				ИндексТекущегоВозможногоТипа = ИндексТекущегоВозможногоТипа + 1;
				
			КонецЦикла;
			
		КонецЕсли;

		Поля = ТаблицаПолей.НайтиСтроки(Новый Структура("Назначение", СвойстваОбъектов.НазначениеСвойства));
		
		Для каждого Поле из Поля Цикл
			
			// Для списка всех полей
			ТекстПоляСвойств = ТекстПоляСвойств + ",
			|	ЕСТЬNULL (Свойство" + Индекс + ".Значение, " + ПараметрПустоеЗначениеСвойства + ") КАК Свойство" + Индекс + "Значение";
			
			ТекстПоляСвойствДляГруппировки = ТекстПоляСвойствДляГруппировки + ",
			|	Свойство" + Индекс + ".Значение";

			// Источник для свойств
			ТекстИсточникиСведений = ТекстИсточникиСведений + Символы.ПС + 
			"	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК Свойство" + Индекс + "
			|	ПО Свойство" + Индекс + ".Объект = " + Поле.ПутьКДанным + "
			|	И  Свойство" + Индекс + ".Свойство = &ПараметрСвойство" + Индекс + "}";

			СтруктураПараметры.Вставить("ПараметрСвойство" + Индекс, СвойстваОбъектов.Ссылка);

			СтруктураПредставлениеПолей.Вставить("Свойство" + Индекс + "Значение", СвойстваОбъектов.Наименование + " (св-во " + Поле.Представление + ")");

			мСоответствиеНазначений.Вставить(СвойстваОбъектов.Наименование + " (св-во " + Поле.Представление + ")", СвойстваОбъектов.Ссылка);

			Индекс = Индекс + 1;

		КонецЦикла;	

	КонецЦикла;

	Для каждого Строка Из ТаблицаПолей Цикл

	//добавляем каждую категорию отдельной строкой
		КатегорииОбъектов = Справочники.КатегорииОбъектов.Выбрать(, , новый Структура("НазначениеКатегории", строка.Назначение));
		Пока КатегорииОбъектов.Следующий() Цикл
			Если КатегорииОбъектов.ЭтоГруппа ИЛИ КатегорииОбъектов.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			Поля = ТаблицаПолей.НайтиСтроки(Новый Структура("Назначение", строка.Назначение));
			Для каждого Поле из Поля Цикл
				Если Поле.НетКатегорий = Ложь Тогда
				// Для списка всех полей
					ТекстПоляКатегорий = ТекстПоляКатегорий + ",
					|	ВЫБОР КОГДА ЕСТЬNULL(Категории" + Индекс + ".Категория, Истина) = Истина ТОГДА Ложь ИНАЧЕ Истина КОНЕЦ КАК Категории" + Индекс + "Категория";
//					|	ЕСТЬNULL(Категории" + Индекс + ".Категория, " + Строка.ПутьКДанным + ") КАК Категории" + Индекс + "Категория";
					
					ТекстПоляКатегорийДляГруппировки = ТекстПоляКатегорийДляГруппировки + ",
					|	Категории" + Индекс + ".Категория";

					// Источник для свойств
					ТекстИсточникиСведений = ТекстИсточникиСведений + Символы.ПС + 
					"	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК Категории" + Индекс + "
					|	ПО Категории" + Индекс + ".Объект = " + Строка.ПутьКДанным + "
					|	И  Категории" + Индекс + ".Категория = &ПараметрКатегории" + Индекс + "}";
					
					СтруктураПараметры.Вставить("ПараметрКатегории" + Индекс, КатегорииОбъектов.Ссылка);
					СтруктураПредставлениеПолей.Вставить("Категории" + Индекс + "Категория", КатегорииОбъектов.Наименование + " ( категория " + Поле.Представление + ")");
					ИдентификаторыПараметровДляОтборовПоКатегориям.Вставить("Категории" + Индекс + "Категория", "ПараметрКатегории" + Индекс);
					мСоответствиеНазначений.Вставить(КатегорииОбъектов.Наименование + " ( категория " + Поле.Представление + ")", Тип("Булево"));//Строка.Назначение
					Индекс = Индекс + 1;
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;

		//ТекстИсточникиСведений = ТекстИсточникиСведений + Символы.ПС + 
		//"	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК Категории" + Индекс + "
		//|	ПО Категории" + Индекс + ".Объект = " + Строка.ПутьКДанным + "
		//|	И  Категории" + Индекс + ".Категория В (&ПараметрКатегории" + Индекс + ")}";

		//ТекстПоляКатегорий = ТекстПоляКатегорий + ",
		//|	ЕСТЬNULL(Категории" + Индекс + ".Категория, " + Строка.ПутьКДанным + ") КАК Категории" + Индекс + "Категория";

		//ТекстПоляКатегорийДляГруппировки = ТекстПоляКатегорийДляГруппировки + ",
		//|	Категории" + Индекс + ".Категория";

		//СтруктураПредставлениеПолей.Вставить("Категории" + Индекс + "Категория", "Категории " + Строка.Представление);

		//ИдентификаторыПараметровДляОтборовПоКатегориям.Вставить("Категории" + Индекс + "Категория", "ПараметрКатегории" + Индекс);

		//мСоответствиеНазначений.Вставить("Категории " + Строка.Представление, Строка.Назначение);

		//Индекс = Индекс + 1;
	
	КонецЦикла; 

	//ВЫБРАТЬ РАЗЛИЧНЫЕ съедает достаточно много ресурсов - поэтому если 
	//не надо, то обойдемся без него.
	Если ТекстПоляКатегорийДляГруппировки <> "" Тогда

		Текст = СтрЗаменить(Текст, "//РАЗЛИЧНЫЕ", "РАЗЛИЧНЫЕ");

	КонецЕсли;
	
	Текст = СтрЗаменить(Текст, ЗаменятьСвойства, ТекстПоляСвойств);
	Текст = СтрЗаменить(Текст, ЗаменятьКатегории, ТекстПоляКатегорий);
	Текст = СтрЗаменить(Текст, ЗаменятьСоединения, ТекстИсточникиСведений);
	Текст = СтрЗаменить(Текст, ЗаменятьСгруппироватьПо, ТекстПоляСвойствДляГруппировки + ТекстПоляКатегорийДляГруппировки);

КонецПроцедуры // ДобавитьВТекстСвойстваИКатегории()

// Устанавливает типы значений доступных полей отбора, соответствующих свойствам и категориям
//
// Параметры:
//	ПостроительОтчета      - ПостроительОтчета, его доступные поля анализируются
//	ТекстПоляКатегорий,
//	ТекстПоляСвойств       - Строки, используются для определений того, является ли
//                            ДоступноеПоле значением свойства или категрии
//	мСоответствиеНазначений - Соответствие между представлениями и ПВХ,
//                            используется для установки правильных типов Свойств
//
Процедура УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, мСоответствиеНазначений, СтруктураПредставлениеПолей) Экспорт
	
	Для Каждого КлючИЗначение из СтруктураПредставлениеПолей Цикл
		
		Если Найти(ТекстПоляСвойств, "КАК " + КлючИЗначение.Ключ)>0 Тогда

			Назначение = мСоответствиеНазначений.Получить(КлючИЗначение.Значение);
			
			Если Назначение = Неопределено Тогда
				Продолжить;
				
			КонецЕсли;

			ДоступноеПоле = ПостроительОтчета.ДоступныеПоля.Найти(КлючИЗначение.Ключ);
			
			Если ДоступноеПоле = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;

			Если ДоступноеПоле.Отбор Тогда
				
				ДоступноеПоле.ТипЗначения = Назначение.ТипЗначения;
				
			КонецЕсли;

		ИначеЕсли Найти(ТекстПоляКатегорий, "КАК " + КлючИЗначение.Ключ)>0 Тогда
			
			ДоступноеПоле = ПостроительОтчета.ДоступныеПоля.Найти(КлючИЗначение.Ключ);

			Если ДоступноеПоле <> Неопределено Тогда
				
				ДоступноеПоле.ТипЗначения = Новый ОписаниеТипов("Булево");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВозможныеТипыСвойств = Метаданные.ПланыВидовХарактеристик.СвойстваОбъектов.Тип.Типы();
	
	ИндексТекущегоВозможногоТипа = 0;
			
	Для каждого ВозможныйТипСвойства из ВозможныеТипыСвойств Цикл
				
		ПостроительОтчета.Параметры.Вставить("ПараметрПустоеЗначениеСвойства" + ИндексТекущегоВозможногоТипа, ОбщегоНазначения.ПустоеЗначениеТипа(ВозможныйТипСвойства));
		ИндексТекущегоВозможногоТипа = ИндексТекущегоВозможногоТипа + 1;
				
	КонецЦикла;
	
КонецПроцедуры // УстановитьТипыЗначенийСвойствИКатегорийДляОтбора()

//Инициализирует ПостроительОтчета для отбора номенклатуры
Процедура ИнициализироватьПостроительЗапросаНоменклатура() Экспорт
	ЗапросПодготовкаДанных = "";
//05.09.13 включена выгрузка товаров с включенным учетом по характеристикам и с пустым списком характеристик
//05.09.13 включена выгрузка товаров с включенным учетом по сериям и с пустым серией
	Если Истина Тогда
		ЗапросПодготовкаДанных =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика
		|ПОМЕСТИТЬ НоменклатураХарактеристика
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ЭтоГруппа = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ХарактеристикиНоменклатуры.Владелец,
		|	ХарактеристикиНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	&РазрешенУчетПоХарактеристикам = ИСТИНА
		|	И ХарактеристикиНоменклатуры.Владелец.ВестиУчетПоХарактеристикам = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НомХар.Номенклатура КАК Номенклатура,
		|	НомХар.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА &РазрешенУчетПоХарактеристикам = ИСТИНА
		|			ТОГДА (НЕ НомХар.Номенклатура.ВестиУчетПоХарактеристикам)
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК БезХарактеристик,
		|	ЕСТЬNULL(Серии.Ссылка, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК Серия,
		|	ВЫБОР
		|		КОГДА &НеДетализироватьНаКПКПоСериям = ИСТИНА
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ (НЕ НомХар.Номенклатура.ВестиУчетПоСериям)
		|	КОНЕЦ КАК БезСерий
		|ПОМЕСТИТЬ НоменклатураХарактеристикаСерия
		|ИЗ
		|	НоменклатураХарактеристика КАК НомХар
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК Серии
		|		ПО (&НеДетализироватьНаКПКПоСериям = ЛОЖЬ)
		|			И (НомХар.Номенклатура.ВестиУчетПоСериям = ИСТИНА)
		|			И НомХар.Номенклатура = Серии.Владелец
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НомХар.Номенклатура,
		|	НомХар.Характеристика,
		|	ВЫБОР
		|		КОГДА &РазрешенУчетПоХарактеристикам = ИСТИНА
		|			ТОГДА (НЕ НомХар.Номенклатура.ВестиУчетПоХарактеристикам)
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
		|	ВЫБОР
		|		КОГДА &НеДетализироватьНаКПКПоСериям = ИСТИНА
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ (НЕ НомХар.Номенклатура.ВестиУчетПоСериям)
		|	КОНЕЦ
		|ИЗ
		|	НоменклатураХарактеристика КАК НомХар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Подзапрос.Номенклатура,
		|	Подзапрос.Характеристика,
		|	Подзапрос.БезХарактеристик,
		|	Подзапрос.Серия,
		|	Подзапрос.БезСерий,
		|	Подзапрос.Склад,
		|	СУММА(Подзапрос.Остаток) КАК Остаток
		|ПОМЕСТИТЬ ОстаткиВРегистрах
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		НомХарСер.Номенклатура КАК Номенклатура,
		|		НомХарСер.Характеристика КАК Характеристика,
		|		НомХарСер.БезХарактеристик КАК БезХарактеристик,
		|		НомХарСер.Серия КАК Серия,
		|		НомХарСер.БезСерий КАК БезСерий,
		|		ТоварыНаСкладахОстатки.Склад КАК Склад,
		|		СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток) КАК Остаток
		|	ИЗ
		|		РегистрНакопления.ТоварыНаСкладах.Остатки(
		|				,
		|				ВЫБОР
		|					КОГДА &ПоВсемСкладам
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ Склад В (&Склады)
		|							И (Склад.ВидСклада = ЗНАЧЕНИЕ(Перечисление.ВидыСкладов.Оптовый)
		|								ИЛИ Склад.ВидСклада = ЗНАЧЕНИЕ(Перечисление.ВидыСкладов.ПустаяСсылка))
		|				КОНЕЦ) КАК ТоварыНаСкладахОстатки
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменклатураХарактеристикаСерия КАК НомХарСер
		|			ПО ТоварыНаСкладахОстатки.Номенклатура = НомХарСер.Номенклатура
		|				И (НомХарСер.БезХарактеристик
		|					ИЛИ ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры = НомХарСер.Характеристика
		|					ИЛИ ЕСТЬNULL(ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры, ИСТИНА) = ИСТИНА
		|						И НомХарСер.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|				И (НомХарСер.БезСерий
		|					ИЛИ ТоварыНаСкладахОстатки.СерияНоменклатуры = НомХарСер.Серия
		|					ИЛИ НомХарСер.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|						И (ЕСТЬNULL(ТоварыНаСкладахОстатки.СерияНоменклатуры, ИСТИНА) = ИСТИНА
		|							ИЛИ ТоварыНаСкладахОстатки.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)))
		|	
		|	СГРУППИРОВАТЬ ПО
		|		НомХарСер.Номенклатура,
		|		НомХарСер.Характеристика,
		|		НомХарСер.Серия,
		|		ТоварыНаСкладахОстатки.Склад,
		|		НомХарСер.БезСерий,
		|		НомХарСер.БезХарактеристик
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		НомХарСер.Номенклатура,
		|		НомХарСер.Характеристика,
		|		НомХарСер.БезХарактеристик,
		|		НомХарСер.Серия,
		|		НомХарСер.БезСерий,
		|		ТоварыВРозницеОстатки.Склад КАК Склад,
		|		СУММА(ТоварыВРозницеОстатки.КоличествоОстаток)
		|	ИЗ
		|		РегистрНакопления.ТоварыВРознице.Остатки(
		|				,
		|				ВЫБОР
		|					КОГДА &ПоВсемСкладам
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ Склад В (&Склады)
		|							И Склад.ВидСклада = ЗНАЧЕНИЕ(Перечисление.ВидыСкладов.Розничный)
		|				КОНЕЦ) КАК ТоварыВРозницеОстатки
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменклатураХарактеристикаСерия КАК НомХарСер
		|			ПО ТоварыВРозницеОстатки.Номенклатура = НомХарСер.Номенклатура
		|				И (НомХарСер.БезХарактеристик
		|					ИЛИ ТоварыВРозницеОстатки.ХарактеристикаНоменклатуры = НомХарСер.Характеристика
		|					ИЛИ ЕСТЬNULL(ТоварыВРозницеОстатки.ХарактеристикаНоменклатуры, ИСТИНА) = ИСТИНА
		|						И НомХарСер.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|				И (НомХарСер.БезСерий
		|					ИЛИ ТоварыВРозницеОстатки.СерияНоменклатуры = НомХарСер.Серия
		|					ИЛИ НомХарСер.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|						И (ЕСТЬNULL(ТоварыВРозницеОстатки.СерияНоменклатуры, ИСТИНА) = ИСТИНА
		|							ИЛИ ТоварыВРозницеОстатки.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)))
		|	
		|	СГРУППИРОВАТЬ ПО
		|		НомХарСер.Номенклатура,
		|		НомХарСер.Характеристика,
		|		НомХарСер.БезХарактеристик,
		|		НомХарСер.Серия,
		|		НомХарСер.БезСерий,
		|		ТоварыВРозницеОстатки.Склад
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		НомХарСер.Номенклатура,
		|		НомХарСер.Характеристика,
		|		НомХарСер.БезХарактеристик,
		|		НомХарСер.Серия,
		|		НомХарСер.БезСерий,
		|		ТоварыВНТТОстатки.Склад КАК Склад,
		|		СУММА(ТоварыВНТТОстатки.КоличествоОстаток)
		|	ИЗ
		|		РегистрНакопления.ТоварыВНТТ.Остатки(
		|				,
		|				ВЫБОР
		|					КОГДА &ПоВсемСкладам
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ Склад В (&Склады)
		|							И Склад.ВидСклада = ЗНАЧЕНИЕ(Перечисление.ВидыСкладов.НТТ)
		|				КОНЕЦ) КАК ТоварыВНТТОстатки
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменклатураХарактеристикаСерия КАК НомХарСер
		|			ПО ТоварыВНТТОстатки.Номенклатура = НомХарСер.Номенклатура
		|				И (НомХарСер.БезХарактеристик
		|					ИЛИ ТоварыВНТТОстатки.ХарактеристикаНоменклатуры = НомХарСер.Характеристика
		|					ИЛИ ЕСТЬNULL(ТоварыВНТТОстатки.ХарактеристикаНоменклатуры, ИСТИНА) = ИСТИНА
		|						И НомХарСер.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|				И (НомХарСер.БезСерий
		|					ИЛИ ТоварыВНТТОстатки.СерияНоменклатуры = НомХарСер.Серия
		|					ИЛИ НомХарСер.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|						И (ЕСТЬNULL(ТоварыВНТТОстатки.СерияНоменклатуры, ИСТИНА) = ИСТИНА
		|							ИЛИ ТоварыВНТТОстатки.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)))
		|	
		|	СГРУППИРОВАТЬ ПО
		|		НомХарСер.Номенклатура,
		|		НомХарСер.Характеристика,
		|		НомХарСер.БезХарактеристик,
		|		НомХарСер.Серия,
		|		НомХарСер.БезСерий,
		|		ТоварыВНТТОстатки.Склад
		|	) КАК Подзапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	Подзапрос.Номенклатура,
		|	Подзапрос.Характеристика,
		|	Подзапрос.БезХарактеристик,
		|	Подзапрос.Серия,
		|	Подзапрос.БезСерий,
		|	Подзапрос.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НомХарСер.Номенклатура КАК Номенклатура,
		|	НомХарСер.Характеристика КАК Характеристика,
		|	НомХарСер.БезХарактеристик КАК БезХарактеристик,
		|	НомХарСер.Серия КАК Серия,
		|	НомХарСер.БезСерий КАК БезСерий,
		|	ТоварыВРезервеНаСкладахОстатки.Склад КАК Склад,
		|	ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток КАК Резерв
		|ПОМЕСТИТЬ РезервыВРегистре
		|ИЗ
		|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(
		|			,
		|			ВЫБОР
		|				КОГДА &ПоВсемСкладам
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ Склад В (&Склады)
		|			КОНЕЦ) КАК ТоварыВРезервеНаСкладахОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменклатураХарактеристикаСерия КАК НомХарСер
		|		ПО ТоварыВРезервеНаСкладахОстатки.Номенклатура = НомХарСер.Номенклатура
		|			И (НомХарСер.БезХарактеристик
		|				ИЛИ ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры = НомХарСер.Характеристика
		|				ИЛИ ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры, ИСТИНА) = ИСТИНА
		|					И НомХарСер.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|			И (НомХарСер.БезСерий
		|				ИЛИ ТоварыВРезервеНаСкладахОстатки.СерияНоменклатуры = НомХарСер.Серия
		|				ИЛИ НомХарСер.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|					И (ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.СерияНоменклатуры, ИСТИНА) = ИСТИНА
		|						ИЛИ ТоварыВРезервеНаСкладахОстатки.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)))
		|ГДЕ
		|	&УчитыватьРезервПриРасчетеОстатков = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(ОстаткиВРегистрах.Номенклатура, РезервыВРегистре.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(ОстаткиВРегистрах.Характеристика, РезервыВРегистре.Характеристика) КАК Характеристика,
		|	ЕСТЬNULL(ОстаткиВРегистрах.БезХарактеристик, РезервыВРегистре.БезХарактеристик) КАК БезХарактеристик,
		|	ЕСТЬNULL(ОстаткиВРегистрах.Серия, РезервыВРегистре.Серия) КАК Серия,
		|	ЕСТЬNULL(ОстаткиВРегистрах.БезСерий, РезервыВРегистре.БезСерий) КАК БезСерий,
		|	ЕСТЬNULL(ОстаткиВРегистрах.Склад, РезервыВРегистре.Склад) КАК Склад,
		|	СУММА(ЕСТЬNULL(ОстаткиВРегистрах.Остаток, 0) - ВЫБОР
		|			КОГДА &УчитыватьРезервПриРасчетеОстатков
		|				ТОГДА ЕСТЬNULL(РезервыВРегистре.Резерв, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Остаток
		|ПОМЕСТИТЬ ОстаткиРезервы
		|ИЗ
		|	ОстаткиВРегистрах КАК ОстаткиВРегистрах
		|		ПОЛНОЕ СОЕДИНЕНИЕ РезервыВРегистре КАК РезервыВРегистре
		|		ПО ОстаткиВРегистрах.Номенклатура = РезервыВРегистре.Номенклатура
		|			И ОстаткиВРегистрах.Характеристика = РезервыВРегистре.Характеристика
		|			И ОстаткиВРегистрах.Серия = РезервыВРегистре.Серия
		|			И ОстаткиВРегистрах.Склад = РезервыВРегистре.Склад
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ОстаткиВРегистрах.Номенклатура, РезервыВРегистре.Номенклатура),
		|	ЕСТЬNULL(ОстаткиВРегистрах.Характеристика, РезервыВРегистре.Характеристика),
		|	ЕСТЬNULL(ОстаткиВРегистрах.БезХарактеристик, РезервыВРегистре.БезХарактеристик),
		|	ЕСТЬNULL(ОстаткиВРегистрах.Серия, РезервыВРегистре.Серия),
		|	ЕСТЬNULL(ОстаткиВРегистрах.БезСерий, РезервыВРегистре.БезСерий),
		|	ЕСТЬNULL(ОстаткиВРегистрах.Склад, РезервыВРегистре.Склад)" + "
		|;
		|";
		//иначе ";" теряется при каждом открытии конструктора запроса		
	КонецЕсли;
	
//09.04.14 принято решение контролировать остаток выгружаемого из 1С в КПК только той номенклатуры,
//тип вида которой - товар
	БланкПостроителяОтчетаНоменклатура = Новый ПостроительОтчета;
	Если Конфигурация = "ТорговляУкраина" 
		ИЛИ Конфигурация = "УТПУкраина" Тогда
		Если Истина Тогда
			ТекстЗапроса=ЗапросПодготовкаДанных+"
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НомХарСер.Номенклатура.Код КАК Код,
			|	НомХарСер.Номенклатура.Артикул КАК Артикул,
			|	НомХарСер.Номенклатура КАК Номенклатура,
			|	НомХарСер.Характеристика КАК Характеристика,
			|	НомХарСер.БезХарактеристик КАК БезХарактеристик,
			|	НомХарСер.Серия КАК Серия,
			|	НомХарСер.БезСерий КАК БезСерий,
			|	ЕСТЬNULL(ОстаткиРезервы.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
			|	ЕСТЬNULL(ОстаткиРезервы.Остаток, 0) * ЕСТЬNULL(НомХарСер.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1) КАК Остаток,
			|	"""" КАК ГТД,
			|	ЕСТЬNULL(НомХарСер.Номенклатура.СтранаПроисхождения.Наименование, """") КАК Страна,
			|	ЕСТЬNULL(НомХарСер.Номенклатура.СтранаПроисхождения.Код, """") КАК КодСтраны,
			|	ВЫБОР
			|		КОГДА НомХарСер.Номенклатура.Весовой
			|			ТОГДА ""1""
			|		ИНАЧЕ ""0""
			|	КОНЕЦ КАК Весовой,
			|	ВЫБОР
			|		КОГДА НомХарСер.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
			|			ТОГДА ""20""
			|		КОГДА НомХарСер.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
			|			ТОГДА ""0""
			|		КОГДА НомХарСер.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА ""0""
			|		КОГДА НомХарСер.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС)
			|			ТОГДА ""0""
			|		ИНАЧЕ ""20""
			|	КОНЕЦ КАК СтавкаНДС,
			|	НомХарСер.Номенклатура.ВестиУчетПоСериям КАК ВестиУчетПоСериям,
			|	НомХарСер.Номенклатура.ВестиУчетПоХарактеристикам КАК ВестиУчетПоХарактеристикам,
			|	НомХарСер.Номенклатура.Родитель КАК Группа,
			|	НомХарСер.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
			|	ЕСТЬNULL(МожноМенятьЦены.МенятьЦены, 0) КАК МенятьЦены,
			|	ЕСТЬNULL(ОранжевыйЦвет.Оранжевый, ""0"") КАК Цвет,
			|	НомХарСер.Номенклатура.ОсновноеИзображение КАК ОсновноеИзображение,
			|	ЕСТЬNULL(ВЫРАЗИТЬ(НомХарСер.Номенклатура.НаименованиеПолное КАК СТРОКА(100)), НомХарСер.Номенклатура.Наименование) КАК НаименованиеПолное,
			|	НомХарСер.Номенклатура.Наименование КАК НоменклатураНаим,
			|	ЕСТЬNULL(НомХарСер.Характеристика.Наименование, """") КАК ХарактеристикаНаим,
			|	ЕСТЬNULL(НомХарСер.Серия.Наименование, """") КАК СерияНаим,
			|	ПОДСТРОКА(НомХарСер.Номенклатура.ДополнительноеОписаниеНоменклатуры, 1, 500) КАК ДополнительноеОписаниеНоменклатуры,
			|	ВЫБОР КОГДА (НомХарСер.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
			|		ИЛИ НомХарСер.Номенклатура.ЭтоГруппа = Истина)
			|		ТОГДА ЕСТЬNULL(ОстаткиРезервы.Остаток, 0)
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК КонтролироватьОстаток
			|ПОМЕСТИТЬ ТаблРезультат
			|ИЗ
			|	НоменклатураХарактеристикаСерия КАК НомХарСер
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			КатегорииОбъектов.Объект КАК Объект,
			|			1 КАК МенятьЦены
			|		ИЗ
			|			РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
			|		ГДЕ
			|			КатегорииОбъектов.Категория = &КатегорияМенятьЦены) КАК МожноМенятьЦены
			|		ПО НомХарСер.Номенклатура = МожноМенятьЦены.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			КатегорииОбъектов.Объект КАК Объект,
			|			&ЦветКатегории КАК Оранжевый
			|		ИЗ
			|			РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
			|		ГДЕ
			|			КатегорииОбъектов.Категория = &ВыделятьОранжевымЦветом) КАК ОранжевыйЦвет
			|		ПО НомХарСер.Номенклатура = ОранжевыйЦвет.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиРезервы КАК ОстаткиРезервы
			|		ПО НомХарСер.Номенклатура = ОстаткиРезервы.Номенклатура
			|			И (НомХарСер.БезХарактеристик
			|				ИЛИ НомХарСер.Характеристика = ОстаткиРезервы.Характеристика)
			|			И (НомХарСер.БезСерий
			|				ИЛИ НомХарСер.Серия = ОстаткиРезервы.Серия)
			|";
		КонецЕсли;
	ИначеЕсли Конфигурация = "УППУкраина" Тогда
		Если Истина Тогда
			ТекстЗапроса=ЗапросПодготовкаДанных+"
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НомХарСер.Номенклатура.Код КАК Код,
			|	НомХарСер.Номенклатура.Артикул КАК Артикул,
			|	НомХарСер.Номенклатура КАК Номенклатура,
			|	НомХарСер.Характеристика КАК Характеристика,
			|	НомХарСер.БезХарактеристик КАК БезХарактеристик,
			|	НомХарСер.Серия КАК Серия,
			|	НомХарСер.БезСерий КАК БезСерий,
			|	ЕСТЬNULL(ОстаткиРезервы.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
			|	ЕСТЬNULL(ОстаткиРезервы.Остаток, 0) * ЕСТЬNULL(НомХарСер.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1) КАК Остаток,
			|	"""" КАК ГТД,
			|	"""" КАК Страна,
			|	"""" КАК КодСтраны,
			|	ВЫБОР
			|		КОГДА НомХарСер.Номенклатура.Весовой
			|			ТОГДА ""1""
			|		ИНАЧЕ ""0""
			|	КОНЕЦ КАК Весовой,
			|	ВЫБОР
			|		КОГДА НомХарСер.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
			|			ТОГДА ""20""
			|		КОГДА НомХарСер.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
			|			ТОГДА ""0""
			|		КОГДА НомХарСер.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА ""0""
			|		КОГДА НомХарСер.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС)
			|			ТОГДА ""0""
			|		ИНАЧЕ ""20""
			|	КОНЕЦ КАК СтавкаНДС,
			|	НомХарСер.Номенклатура.ВестиУчетПоСериям КАК ВестиУчетПоСериям,
			|	НомХарСер.Номенклатура.ВестиУчетПоХарактеристикам КАК ВестиУчетПоХарактеристикам,
			|	НомХарСер.Номенклатура.Родитель КАК Группа,
			|	НомХарСер.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
			|	ЕСТЬNULL(МожноМенятьЦены.МенятьЦены, 0) КАК МенятьЦены,
			|	ЕСТЬNULL(ОранжевыйЦвет.Оранжевый, ""0"") КАК Цвет,
			|	НомХарСер.Номенклатура.ОсновноеИзображение КАК ОсновноеИзображение,
			|	ЕСТЬNULL(ВЫРАЗИТЬ(НомХарСер.Номенклатура.НаименованиеПолное КАК СТРОКА(100)), НомХарСер.Номенклатура.Наименование) КАК НаименованиеПолное,
			|	НомХарСер.Номенклатура.Наименование КАК НоменклатураНаим,
			|	ЕСТЬNULL(НомХарСер.Характеристика.Наименование, """") КАК ХарактеристикаНаим,
			|	ЕСТЬNULL(НомХарСер.Серия.Наименование, """") КАК СерияНаим,
			|	ПОДСТРОКА(НомХарСер.Номенклатура.ДополнительноеОписаниеНоменклатуры, 1, 500) КАК ДополнительноеОписаниеНоменклатуры,
			|	ВЫБОР КОГДА (НомХарСер.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
			|		ИЛИ НомХарСер.Номенклатура.ЭтоГруппа = Истина)
			|		ТОГДА ЕСТЬNULL(ОстаткиРезервы.Остаток, 0)
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК КонтролироватьОстаток
			|ПОМЕСТИТЬ ТаблРезультат
			|ИЗ
			|	НоменклатураХарактеристикаСерия КАК НомХарСер
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			КатегорииОбъектов.Объект КАК Объект,
			|			1 КАК МенятьЦены
			|		ИЗ
			|			РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
			|		ГДЕ
			|			КатегорииОбъектов.Категория = &КатегорияМенятьЦены) КАК МожноМенятьЦены
			|		ПО НомХарСер.Номенклатура = МожноМенятьЦены.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			КатегорииОбъектов.Объект КАК Объект,
			|			&ЦветКатегории КАК Оранжевый
			|		ИЗ
			|			РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
			|		ГДЕ
			|			КатегорииОбъектов.Категория = &ВыделятьОранжевымЦветом) КАК ОранжевыйЦвет
			|		ПО НомХарСер.Номенклатура = ОранжевыйЦвет.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиРезервы КАК ОстаткиРезервы
			|		ПО НомХарСер.Номенклатура = ОстаткиРезервы.Номенклатура
			|			И (НомХарСер.БезХарактеристик
			|				ИЛИ НомХарСер.Характеристика = ОстаткиРезервы.Характеристика)
			|			И (НомХарСер.БезСерий
			|				ИЛИ НомХарСер.Серия = ОстаткиРезервы.Серия)
			|";
		КонецЕсли;		
	ИначеЕсли Конфигурация = "ТорговляКазахстан"
		ИЛИ Конфигурация = "УТПКазахстан"
		ИЛИ Конфигурация = "УППКазахстан" Тогда 
		Если Истина Тогда
			ТекстЗапроса=ЗапросПодготовкаДанных+"
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НомХарСер.Номенклатура.Код КАК Код,
			|	НомХарСер.Номенклатура.Артикул КАК Артикул,
			|	НомХарСер.Номенклатура КАК Номенклатура,
			|	НомХарСер.Характеристика КАК Характеристика,
			|	НомХарСер.БезХарактеристик КАК БезХарактеристик,
			|	НомХарСер.Серия КАК Серия,
			|	НомХарСер.БезСерий КАК БезСерий,
			|	ЕСТЬNULL(ОстаткиРезервы.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
			|	ЕСТЬNULL(ОстаткиРезервы.Остаток, 0) * ЕСТЬNULL(НомХарСер.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1) КАК Остаток,
			|	ВЫБОР
			|		КОГДА НомХарСер.БезСерий
			|			ТОГДА ЕСТЬNULL(НомХарСер.Номенклатура.НомерГТД.Код, """")
			|		ИНАЧЕ ЕСТЬNULL(НомХарСер.Серия.НомерГТД.Код, """")
			|	КОНЕЦ КАК ГТД,
			|	ВЫБОР
			|		КОГДА НомХарСер.БезСерий
			|			ТОГДА ЕСТЬNULL(НомХарСер.Номенклатура.СтранаПроисхождения.Наименование, """")
			|		ИНАЧЕ ЕСТЬNULL(НомХарСер.Серия.СтранаПроисхождения.Наименование, """")
			|	КОНЕЦ КАК Страна,
			|	ВЫБОР
			|		КОГДА НомХарСер.БезСерий
			|			ТОГДА ЕСТЬNULL(НомХарСер.Номенклатура.СтранаПроисхождения.Код, """")
			|		ИНАЧЕ ЕСТЬNULL(НомХарСер.Серия.СтранаПроисхождения.Код, """")
			|	КОНЕЦ КАК КодСтраны,
			|	ВЫБОР
			|		КОГДА НомХарСер.Номенклатура.Весовой
			|			ТОГДА ""1""
			|		ИНАЧЕ ""0""
			|	КОНЕЦ КАК Весовой,
			|	НомХарСер.Номенклатура.СтавкаНДС.Ставка КАК СтавкаНДС,
			|	НомХарСер.Номенклатура.ВестиУчетПоСериям КАК ВестиУчетПоСериям,
			|	НомХарСер.Номенклатура.ВестиУчетПоХарактеристикам КАК ВестиУчетПоХарактеристикам,
			|	НомХарСер.Номенклатура.Родитель КАК Группа,
			|	НомХарСер.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
			|	ЕСТЬNULL(МожноМенятьЦены.МенятьЦены, 0) КАК МенятьЦены,
			|	ЕСТЬNULL(ОранжевыйЦвет.Оранжевый, ""0"") КАК Цвет,
			|	НомХарСер.Номенклатура.ОсновноеИзображение КАК ОсновноеИзображение,
			|	ЕСТЬNULL(ВЫРАЗИТЬ(НомХарСер.Номенклатура.НаименованиеПолное КАК СТРОКА(100)), НомХарСер.Номенклатура.Наименование) КАК НаименованиеПолное,
			|	НомХарСер.Номенклатура.Наименование КАК НоменклатураНаим,
			|	ЕСТЬNULL(НомХарСер.Характеристика.Наименование, """") КАК ХарактеристикаНаим,
			|	ЕСТЬNULL(НомХарСер.Серия.Наименование, """") КАК СерияНаим,
			|	ПОДСТРОКА(НомХарСер.Номенклатура.ДополнительноеОписаниеНоменклатуры, 1, 500) КАК ДополнительноеОписаниеНоменклатуры,
			|	ВЫБОР КОГДА (НомХарСер.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
			|		ИЛИ НомХарСер.Номенклатура.ЭтоГруппа = Истина)
			|		ТОГДА ЕСТЬNULL(ОстаткиРезервы.Остаток, 0)
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК КонтролироватьОстаток
			|ПОМЕСТИТЬ ТаблРезультат
			|ИЗ
			|	НоменклатураХарактеристикаСерия КАК НомХарСер
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			КатегорииОбъектов.Объект КАК Объект,
			|			1 КАК МенятьЦены
			|		ИЗ
			|			РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
			|		ГДЕ
			|			КатегорииОбъектов.Категория = &КатегорияМенятьЦены) КАК МожноМенятьЦены
			|		ПО НомХарСер.Номенклатура = МожноМенятьЦены.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			КатегорииОбъектов.Объект КАК Объект,
			|			&ЦветКатегории КАК Оранжевый
			|		ИЗ
			|			РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
			|		ГДЕ
			|			КатегорииОбъектов.Категория = &ВыделятьОранжевымЦветом) КАК ОранжевыйЦвет
			|		ПО НомХарСер.Номенклатура = ОранжевыйЦвет.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиРезервы КАК ОстаткиРезервы
			|		ПО НомХарСер.Номенклатура = ОстаткиРезервы.Номенклатура
			|			И (НомХарСер.БезХарактеристик
			|				ИЛИ НомХарСер.Характеристика = ОстаткиРезервы.Характеристика)
			|			И (НомХарСер.БезСерий
			|				ИЛИ НомХарСер.Серия = ОстаткиРезервы.Серия)			
			|";
		КонецЕсли;
	Иначе
		Если Истина Тогда
			ТекстЗапроса=ЗапросПодготовкаДанных+"
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НомХарСер.Номенклатура.Код КАК Код,
			|	НомХарСер.Номенклатура.Артикул КАК Артикул,
			|	НомХарСер.Номенклатура КАК Номенклатура,
			|	НомХарСер.Характеристика КАК Характеристика,
			|	НомХарСер.БезХарактеристик КАК БезХарактеристик,
			|	НомХарСер.Серия КАК Серия,
			|	НомХарСер.БезСерий КАК БезСерий,
			|	ЕСТЬNULL(ОстаткиРезервы.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
			|	ЕСТЬNULL(ОстаткиРезервы.Остаток, 0) * ЕСТЬNULL(НомХарСер.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1) КАК Остаток,
			|	ВЫБОР
			|		КОГДА НомХарСер.БезСерий ТОГДА
			|			ЕСТЬNULL(НомХарСер.Номенклатура.НомерГТД.Код, """")
			|		ИНАЧЕ
			|			ЕСТЬNULL(НомХарСер.Серия.НомерГТД.Код, """")
			|	КОНЕЦ КАК ГТД,
			|	ВЫБОР
			|		КОГДА НомХарСер.БезСерий
			|			ТОГДА ЕСТЬNULL(НомХарСер.Номенклатура.СтранаПроисхождения.Наименование, """")
			|		ИНАЧЕ ЕСТЬNULL(НомХарСер.Серия.СтранаПроисхождения.Наименование, """")
			|	КОНЕЦ КАК Страна,
			|	ВЫБОР
			|		КОГДА НомХарСер.БезСерий
			|			ТОГДА ЕСТЬNULL(НомХарСер.Номенклатура.СтранаПроисхождения.Код, """")
			|		ИНАЧЕ ЕСТЬNULL(НомХарСер.Серия.СтранаПроисхождения.Код, """")
			|	КОНЕЦ КАК КодСтраны,
			|	ВЫБОР
			|		КОГДА НомХарСер.Номенклатура.Весовой
			|			ТОГДА ""1""
			|		ИНАЧЕ ""0""
			|	КОНЕЦ КАК Весовой,
			|	ВЫБОР
			|		КОГДА НомХарСер.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
			|				ИЛИ НомХарСер.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
			|			ТОГДА ""20""
			|		КОГДА НомХарСер.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
			|				ИЛИ НомХарСер.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
			|			ТОГДА ""10""
			|		КОГДА НомХарСер.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
			|				ИЛИ НомХарСер.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
			|			ТОГДА ""18""
			|		КОГДА НомХарСер.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
			|				ИЛИ НомХарСер.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА ""0""
			|		ИНАЧЕ ""18""
			|	КОНЕЦ КАК СтавкаНДС,
			|	НомХарСер.Номенклатура.ВестиУчетПоСериям КАК ВестиУчетПоСериям,
			|	НомХарСер.Номенклатура.ВестиУчетПоХарактеристикам КАК ВестиУчетПоХарактеристикам,
			|	НомХарСер.Номенклатура.Родитель КАК Группа,
			|	НомХарСер.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
			|	ЕСТЬNULL(МожноМенятьЦены.МенятьЦены, 0) КАК МенятьЦены,
			|	ЕСТЬNULL(ОранжевыйЦвет.Оранжевый, ""0"") КАК Цвет,
			|	НомХарСер.Номенклатура.ОсновноеИзображение КАК ОсновноеИзображение,
			|	ЕСТЬNULL(ВЫРАЗИТЬ(НомХарСер.Номенклатура.НаименованиеПолное КАК СТРОКА(100)), НомХарСер.Номенклатура.Наименование) КАК НаименованиеПолное,
			|	НомХарСер.Номенклатура.Наименование КАК НоменклатураНаим,
			|	ЕСТЬNULL(НомХарСер.Характеристика.Наименование, """") КАК ХарактеристикаНаим,
			|	ЕСТЬNULL(НомХарСер.Серия.Наименование, """") КАК СерияНаим,
			|	ПОДСТРОКА(НомХарСер.Номенклатура.ДополнительноеОписаниеНоменклатуры, 1, 500) КАК ДополнительноеОписаниеНоменклатуры,
			|	ВЫБОР КОГДА (НомХарСер.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
			|		ИЛИ НомХарСер.Номенклатура.ЭтоГруппа = Истина)
			|		ТОГДА ЕСТЬNULL(ОстаткиРезервы.Остаток, 0)
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК КонтролироватьОстаток
			|ПОМЕСТИТЬ ТаблРезультат
			|ИЗ
			|	НоменклатураХарактеристикаСерия КАК НомХарСер
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			КатегорииОбъектов.Объект КАК Объект,
			|			1 КАК МенятьЦены
			|		ИЗ
			|			РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
			|		ГДЕ
			|			КатегорииОбъектов.Категория = &КатегорияМенятьЦены) КАК МожноМенятьЦены
			|		ПО НомХарСер.Номенклатура = МожноМенятьЦены.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			КатегорииОбъектов.Объект КАК Объект,
			|			&ЦветКатегории КАК Оранжевый
			|		ИЗ
			|			РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
			|		ГДЕ
			|			КатегорииОбъектов.Категория = &ВыделятьОранжевымЦветом) КАК ОранжевыйЦвет
			|		ПО НомХарСер.Номенклатура = ОранжевыйЦвет.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиРезервы КАК ОстаткиРезервы
			|		ПО НомХарСер.Номенклатура = ОстаткиРезервы.Номенклатура
			|			И (НомХарСер.БезХарактеристик
			|				ИЛИ НомХарСер.Характеристика = ОстаткиРезервы.Характеристика)
			|			И (НомХарСер.БезСерий
			|				ИЛИ НомХарСер.Серия = ОстаткиРезервы.Серия)
			|";
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса=ТекстЗапроса+"
			|;
			|ВЫБРАТЬ
			|	Код,
			|	Артикул,
			|	Номенклатура,
			|	Характеристика,
			|	БезХарактеристик,
			|	Серия,
			|	БезСерий,
			|	ГТД,
			|	Страна,
			|	КодСтраны,
			|	Весовой,
			|	ПРЕДСТАВЛЕНИЕ(СтавкаНДС) КАК СтавкаНДС,
			|	ВестиУчетПоСериям,
			|	ВестиУчетПоХарактеристикам,
			|	Группа,
			|	НоменклатурнаяГруппа,
			|	МенятьЦены,
			|	Цвет,
			|	ОсновноеИзображение,
			|	НаименованиеПолное,
			|	НоменклатураНаим,
			|	ХарактеристикаНаим,
			|	СерияНаим,
			|	ДополнительноеОписаниеНоменклатуры
			|	//ПОЛЯ_СВОЙСТВА
			|	//ПОЛЯ_КАТЕГОРИИ
			|ИЗ ТаблРезультат
			|	//СОЕДИНЕНИЯ
			|{ГДЕ
			|	ТаблРезультат.Номенклатура.Родитель.* КАК Группа,
			|	ТаблРезультат.Номенклатура.* КАК Номенклатура,
			|	ТаблРезультат.Характеристика.* КАК Характеристика,
			|	ТаблРезультат.Серия.* КАК Серия,
			|	(ЕСТЬNULL(ТаблРезультат.Остаток, 0)) КАК Остаток,
			|	ВЫБОР КОГДА (ТаблРезультат.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
			|		ИЛИ ТаблРезультат.Номенклатура.ЭтоГруппа = Истина)
			|		ТОГДА ЕСТЬNULL(ТаблРезультат.Остаток, 0)
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК КонтролироватьОстаток
			|	//ПОЛЯ_СВОЙСТВА
			|	//ПОЛЯ_КАТЕГОРИИ
			|}
			|СГРУППИРОВАТЬ ПО 
			|	Код,
			|	Артикул,
			|	Номенклатура,
			|	Характеристика,
			|	БезХарактеристик,
			|	Серия,
			|	БезСерий,
			|	ГТД,
			|	Страна,
			|	КодСтраны,
			|	Весовой,
			|	СтавкаНДС,
			|	ВестиУчетПоСериям,
			|	ВестиУчетПоХарактеристикам,
			|	Группа,
			|	НоменклатурнаяГруппа,
			|	МенятьЦены,
			|	Цвет,
			|	ОсновноеИзображение,
			|	НаименованиеПолное,
			|	НоменклатураНаим,
			|	ХарактеристикаНаим,
			|	СерияНаим,
			|	ДополнительноеОписаниеНоменклатуры
			|	//СГРУППИРОВАТЬПО
			|УПОРЯДОЧИТЬ ПО
			|	НоменклатураНаим,
			|	ХарактеристикаНаим,
			|	СерияНаим
			|;
			|ВЫБРАТЬ
			|	Номенклатура,
			|	Характеристика,
			|	Серия,
			|	Склад,
			|	ВЫБОР
			|		КОГДА &ОграничиватьОстаток
			|			ТОГДА ВЫБОР
			|					КОГДА Остаток > &МаксимальныйОстаток
			|						ТОГДА &МаксимальныйОстаток
			|					ИНАЧЕ Остаток
			|				КОНЕЦ
			|		ИНАЧЕ Остаток
			|	КОНЕЦ КАК Остаток
			|	//ПОЛЯ_СВОЙСТВА
			|	//ПОЛЯ_КАТЕГОРИИ
			|{ВЫБРАТЬ
			|	Номенклатура.*,
			|	Характеристика.*,
			|	Серия.*,
			|	Склад.*,
			|	ВЫБОР
			|		КОГДА &ОграничиватьОстаток
			|			ТОГДА ВЫБОР
			|					КОГДА Остаток > &МаксимальныйОстаток
			|						ТОГДА &МаксимальныйОстаток
			|					ИНАЧЕ Остаток
			|				КОНЕЦ
			|		ИНАЧЕ Остаток
			|	КОНЕЦ КАК Остаток
			|	//ПОЛЯ_СВОЙСТВА
			|	//ПОЛЯ_КАТЕГОРИИ}
			|ИЗ ТаблРезультат
			|	//СОЕДИНЕНИЯ
			|{ГДЕ
			|	ТаблРезультат.Номенклатура.Родитель.* КАК Группа,
			|	ТаблРезультат.Номенклатура.* КАК Номенклатура,
			|	ТаблРезультат.Характеристика.* КАК Характеристика,
			|	ТаблРезультат.Серия.* КАК Серия,
			|	(ЕСТЬNULL(ТаблРезультат.Остаток, 0)) КАК Остаток,
			|	ТаблРезультат.КонтролироватьОстаток КАК КонтролироватьОстаток
			|	//ПОЛЯ_СВОЙСТВА
			|	//ПОЛЯ_КАТЕГОРИИ
			|}
			|";	
			
	//НастройкаОтчета = БланкПостроителяОтчетаНоменклатура.ПолучитьНастройки(Истина, Истина, Истина, Истина);
	//Если ПустаяСтрока(ТекстЗапроса) = Ложь Тогда        
	//	  БланкПостроителяОтчетаНоменклатура.Текст = ТекстЗапроса;
	//КонецЕсли;
	//СтруктураПредставлениеПолей = Новый Структура;        
	//мСтруктураДляОтбораПоКатегориям = Новый Структура;        
	//СоответствиеНазначений = Новый Соответствие;
	//
	//ТаблицаПолей = Новый ТаблицаЗначений;        
	//ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий         
	//ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории.          
	//ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля         
	////ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение        
	//ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта                 	

	//ТекстПоляКатегорий = "";        
	//ТекстПоляСвойств = "";                
	//ТаблицаПолей.Очистить();                

	//НоваяСтрока = ТаблицаПолей.Добавить();       
	//НоваяСтрока.ПутьКДанным = "Номенклатура";        
	//НоваяСтрока.Представление = "Номенклатура";       
	//НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;       
	//НоваяСтрока.НетКатегорий = Ложь;                

	//ТекстЗапроса = БланкПостроителяОтчетаНоменклатура.Текст;
	//ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, ТекстЗапроса, СтруктураПредставлениеПолей, СоответствиеНазначений, БланкПостроителяОтчетаНоменклатура.Параметры,, ТекстПоляКатегорий, ТекстПоляСвойств,, "//ПОЛЯ_СВОЙСТВА", "//ПОЛЯ_КАТЕГОРИИ", "//СОЕДИНЕНИЯ", "//СГРУППИРОВАТЬПО", мСтруктураДляОтбораПоКатегориям);         
	//		
	//БланкПостроителяОтчетаНоменклатура.Текст = ТекстЗапроса;                
	//УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(БланкПостроителяОтчетаНоменклатура, ТекстПоляКатегорий, ТекстПоляСвойств, СоответствиеНазначений, СтруктураПредставлениеПолей);        
	//	
	//УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, БланкПостроителяОтчетаНоменклатура);
	//
	//БланкПостроителяОтчетаНоменклатура.УстановитьНастройки(НастройкаОтчета, Истина, Истина, Истина, Истина);  

	БланкПостроителяОтчетаНоменклатура.Текст=ТекстЗапроса;
	БланкПостроителяОтчетаНоменклатура.ЗаполнитьНастройки();
	
	ПостроительОтчетаНоменклатура = Новый ПостроительОтчета;
	ЗаполнитьЗначенияСвойств(ПостроительОтчетаНоменклатура,БланкПостроителяОтчетаНоменклатура);
	
	ПостроительОтчетаНоменклатура.ЗаполнитьНастройки();
	
	//УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчетаНоменклатура);			
	//ПостроительОтчетаНоменклатура.УстановитьНастройки(НастройкаОтчета, Истина, Истина, Истина, Истина);  
	
КонецПроцедуры

//Удаляет все недопустимые в имени файла символы во входной строке ИмяФайла и возвращает результат
Функция УдалитьЗапрещенныеСимволыИмени(Знач ИмяФайла) Экспорт
	ИтоговоеИмяФайла = СокрЛП(ИмяФайла);
	Если ПустаяСтрока(ИтоговоеИмяФайла) Тогда
		Возврат ИтоговоеИмяФайла;
	КонецЕсли;
	СписокСимволов = Новый СписокЗначений();
	СписокСимволов.Добавить("\");
	СписокСимволов.Добавить("/");
	СписокСимволов.Добавить(":");
	СписокСимволов.Добавить("*");
	СписокСимволов.Добавить("&");
	СписокСимволов.Добавить("""");
	СписокСимволов.Добавить("<");
	СписокСимволов.Добавить(">");
	СписокСимволов.Добавить("|");
	СписокСимволов.Добавить("?");
	СписокСимволов.Добавить(".");
	Для Каждого СтрокаЗапретногоСимвола  Из СписокСимволов Цикл
		ИтоговоеИмяФайла = СтрЗаменить(ИтоговоеИмяФайла,  СтрокаЗапретногоСимвола.Значение, "");			
	КонецЦикла;
	Возврат ИтоговоеИмяФайла;
КонецФункции // УдалитьЗапрещенныеСимволыИмени()

//вернем на место символы "-" (минус) в ГУИДе
Функция ВернутьПробелыGUID(ИД) Экспорт
    возврат  Сред(ИД,1,8)+"-"+Сред(ИД,9,4)+"-"+Сред(ИД,13,4)+"-"+Сред(ИД,17,4)+"-"+Сред(ИД,21,12);
КонецФункции // ВернутьПробелыGUID()
 
//возвращает ссылку на элемент справочника ИмяСправочника имеющий уникальный идентификатор ИД
//Если элемент НЕ найден - возвращает пустую ссылку
Функция ПолучитьСсылкуПоGUID(ИД,ИмяСправочника) Экспорт

	стрGUID = ВернутьПробелыGUID(ИД);
	Попытка
	    GUID = новый УникальныйИдентификатор(стрGUID);
	Исключение  //ошибка в GUID
		Если Метаданные.Справочники.Найти(ИмяСправочника) = Неопределено Тогда
			возврат Справочники.Контрагенты.ПустаяСсылка();
		Иначе
			возврат Справочники[ИмяСправочника].ПустаяСсылка();
		КонецЕсли;
    КонецПопытки;
   
	Ссылка = Справочники[ИмяСправочника].ПолучитьСсылку(GUID);
	Об=ссылка.ПолучитьОбъект();
	Если ТипЗнч(Об) <> Тип("СправочникОбъект."+ИмяСправочника) Тогда //Раз НЕ удалось 
		Ссылка = Справочники[ИмяСправочника].Пустаяссылка();
	КонецЕсли;
				
	возврат ссылка;			
КонецФункции // ПоучитьСсылкуПоGUID(ИД)

//возвращает ссылку на документ ИмяДокумента имеющий уникальный идентификатор ИД
//Если элемент НЕ найден - возвращает пустую ссылку
Функция ПолучитьДокументСсылкаПоGUID(ИД,ИмяДокумента) Экспорт

	стрGUID = ВернутьПробелыGUID(ИД);
	Попытка
	    GUID = новый УникальныйИдентификатор(стрGUID);
	Исключение  //ошибка в GUID
		Если Метаданные.Документы.Найти(ИмяДокумента) = Неопределено Тогда
			возврат Документы.ЗаказПокупателя.ПустаяСсылка();
		Иначе
			возврат Документы[ИмяДокумента].ПустаяСсылка();
		КонецЕсли;
    КонецПопытки;
   
	Ссылка = Документы[ИмяДокумента].ПолучитьСсылку(GUID);
	Об=ссылка.ПолучитьОбъект();
	Если ТипЗнч(Об) <> Тип("ДокументОбъект."+ИмяДокумента) Тогда //Раз НЕ удалось 
		Ссылка = Документы[ИмяДокумента].ПустаяСсылка();
	КонецЕсли;
				
	возврат ссылка;			
КонецФункции

// Формирует уникальный идентификатор элемента справочника номенклатуры в соответствии
// 		настройками ведения учёта по характеристикам, сериям и т. д.
// Параметры:
// 		ссылки на элементы справочников Номенклатуры, ХарактеристикиНоменклатуры, СерииНоменклатуры
// Возвращаемое значение:
// 		Строка, идентификатор номенклатуры, соответствующая протоколу обмена
функция ПолучитьУникКодТовара(Номенклатура, Характеристика, Серия) Экспорт
	Если ЗначениеЗаполнено(Номенклатура) Тогда	
		Если ЗначениеЗаполнено(Характеристика)
			 И ЗначениеЗаполнено(Серия) Тогда
			Возврат УникИдентификатор(Характеристика) + "_" + УникИдентификатор(Серия);
		ИначеЕсли ЗначениеЗаполнено(Серия) Тогда 
			Возврат УникИдентификатор(Серия);	
		ИначеЕсли ЗначениеЗаполнено(Характеристика) Тогда
			Возврат УникИдентификатор(Характеристика);	
		Иначе
			Возврат УникИдентификатор(Номенклатура);	
		КонецЕсли;	
	Иначе
		Сообщить("!!!Не указана номенклатура для ПолучитьУникКодТовара", СтатусСообщения.Важное);
		Возврат "";
	КонецЕсли;	
КонецФункции

// Формирует наименование элемента справочника товары в соответствии
// Параметры:
// 		ссылки на элементы справочников Номенклатуры, ХарактеристикиНоменклатуры, СерииНоменклатуры
// Возвращаемое значение:
// 		Строка, наименование товара в КПК
функция ПолучитьНаименованиеТовара(Номенклатура, Характеристика, Серия) Экспорт
//	Если ЗначениеЗаполнено(Номенклатура) ИЛИ ЗначениеЗаполнено(Характеристика) ИЛИ ЗначениеЗаполнено(Серия) Тогда
        стрНом = УбратьСпецСимволы(Номенклатура);
		стрХар = УбратьСпецСимволы(Характеристика);
		стрСер = УбратьСпецСимволы(Серия);
		Возврат "" + стрНом
				+ ?(ЗначениеЗаполнено(стрХар), " " + стрХар, "")
				+ ?(ЗначениеЗаполнено(стрСер), " [" + стрСер + "]", "");	
	//Иначе                                             
	//	Сообщить("!!!Для ПолучитьНаименованиеТовара не указана номенклатура, характеристика и серия", СтатусСообщения.Важное);
	//	Возврат "Неизвестная номенклатура";
	//КонецЕсли;
КонецФункции

//По входному параметру ИД (ГУИД) возвращает 3 выходных значения
//спрНом - ссылка на элемент справочника Номенклатура
//спрХар - ссылка на элемент справочника Характеристики Номенклатуры
//спрСер - ссылка на элемент справочника Серии Номенклатуры
Процедура ПолучитьНоменклатуруИХарактеристикуПоGUID(ИД,спрНом,спрХар,спрСер) Экспорт
	стрGUID = ВернутьПробелыGUID(ИД); //вернем на место символы "-" (минус)
	Попытка
		GUID = новый УникальныйИдентификатор(стрGUID); //получили уникальный код объекта
	Исключение
		спрХар = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		спрСер = Справочники.СерииНоменклатуры.ПустаяСсылка();		
		спрНом = Справочники.Номенклатура.ПустаяСсылка();		
		Возврат;
	КонецПопытки;		
	
	спрНом = Справочники.Номенклатура.ПолучитьСсылку(GUID);//попробуем найти номенклатуру с таким GUID
	Об=спрНом.ПолучитьОбъект();
	Если ТипЗнч(Об) = Тип("СправочникОбъект.Номенклатура") Тогда //нашли номенклатуру
		спрХар = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		спрСер = Справочники.СерииНоменклатуры.ПустаяСсылка();		
	Иначе	 
		спрХар = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(GUID); //Когда НЕ получилось попробуем найти хар-ку
		Об=спрХар.ПолучитьОбъект();
        Если ТипЗнч(Об) = Тип("СправочникОбъект.ХарактеристикиНоменклатуры") Тогда 
			спрНом = СпрХар.Владелец;
			спрСер = Справочники.СерииНоменклатуры.ПустаяСсылка();			
		Иначе
			спрСер = Справочники.СерииНоменклатуры.ПолучитьСсылку(GUID); //Когда НЕ получилось попробуем найти серию
			Об=спрСер.ПолучитьОбъект();
	        Если ТипЗнч(Об) = Тип("СправочникОбъект.СерииНоменклатуры") Тогда 
	            спрХар = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(); 
				спрНом = СпрСер.Владелец;
			Иначе	 //Когда НЕ получилось вернем пустые ссылки
	            спрХар = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(); 
	            спрНом = Справочники.Номенклатура.ПустаяСсылка(); 
				спрСер = Справочники.СерииНоменклатуры.ПустаяСсылка();		
			КонецЕсли
 		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

Функция ПолучитьЕдиницуПоКоду(ИД) Экспорт
	стрGUID = ВернутьПробелыGUID(ИД); //вернем на место символы "-" (минус)
	Попытка
		GUID = новый УникальныйИдентификатор(стрGUID); //получили уникальный код объекта
	Исключение
		Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	КонецПопытки;		
	Возврат Справочники.ЕдиницыИзмерения.ПолучитьСсылку(GUID);//попробуем найти номенклатуру с таким GUID
КонецФункции

//По входному параметру ИД (ГУИД) возвращает 3 выходных значения
//спрНом - ссылка на элемент справочника Номенклатура
//спрХар - ссылка на элемент справочника Характеристики Номенклатуры
//спрСер - ссылка на элемент справочника Серии Номенклатуры
Процедура ПолучитьНоменклатуруХарактеристикуСериюПоКоду(ИД,спрНом,спрХар,спрСер) Экспорт
	//проверяем код на наличие 2х компонентов - Характеристика и серия
	спрХар = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	спрСер = Справочники.СерииНоменклатуры.ПустаяСсылка();		
	спрНом = Справочники.Номенклатура.ПустаяСсылка();		
	позицияРазделителя = Найти(ИД, "_");
	Если позицияРазделителя = 0 Тогда
	//стандартная ситуация - если или серия, или характеристика, или номенклатура
		стрGUID = ВернутьПробелыGUID(ИД); //вернем на место символы "-" (минус)
		Попытка
			GUID = новый УникальныйИдентификатор(стрGUID); //получили уникальный код объекта
		Исключение
			Возврат;
		КонецПопытки;		
		
		спрНом = Справочники.Номенклатура.ПолучитьСсылку(GUID);//попробуем найти номенклатуру с таким GUID
		Об=спрНом.ПолучитьОбъект();
		Если ТипЗнч(Об) = Тип("СправочникОбъект.Номенклатура") Тогда //нашли номенклатуру
			спрХар = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			спрСер = Справочники.СерииНоменклатуры.ПустаяСсылка();		
		Иначе	 
			спрХар = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(GUID); //Когда НЕ получилось попробуем найти хар-ку
			Об=спрХар.ПолучитьОбъект();
	        Если ТипЗнч(Об) = Тип("СправочникОбъект.ХарактеристикиНоменклатуры") Тогда 
				спрНом = СпрХар.Владелец;
				спрСер = Справочники.СерииНоменклатуры.ПустаяСсылка();			
			Иначе
				спрСер = Справочники.СерииНоменклатуры.ПолучитьСсылку(GUID); //Когда НЕ получилось попробуем найти серию
				Об=спрСер.ПолучитьОбъект();
		        Если ТипЗнч(Об) = Тип("СправочникОбъект.СерииНоменклатуры") Тогда 
		            спрХар = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(); 
					спрНом = СпрСер.Владелец;
				Иначе	 //Когда НЕ получилось вернем пустые ссылки
		            спрХар = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(); 
		            спрНом = Справочники.Номенклатура.ПустаяСсылка(); 
					спрСер = Справочники.СерииНоменклатуры.ПустаяСсылка();		
				КонецЕсли
	 		КонецЕсли; 
		КонецЕсли; 		
	Иначе
	//код номенклатуры состоит из <ГУИД характеристики>_<ГУИД серии>
		ГУИДы = СтрЗаменить(ИД, "_", РазделительСтрок);
		ГУИДХарактеристики = новый УникальныйИдентификатор(ВернутьПробелыGUID(СтрПолучитьСтроку(ГУИДы, 1)));
		ГУИДСерии = новый УникальныйИдентификатор(ВернутьПробелыGUID(СтрПолучитьСтроку(ГУИДы, 2)));
		спрХар = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(ГУИДХарактеристики);
		об = спрХар.ПолучитьОбъект();
		спрСер = Справочники.СерииНоменклатуры.ПолучитьСсылку(ГУИДСерии);
		об = спрСер.ПолучитьОбъект();
		Если спрХар.Владелец = спрСер.Владелец Тогда
			спрНом = спрХар.Владелец;
			об = спрНом.ПолучитьОбъект();
		Иначе
			Сообщить("Ошибка кода номенклатуры - владельцы Характеристики и Серии различны: " + РазделительСтрок
					+ "Характеристика - Владелец: " + спрХар + " - " + спрХар.Владелец + РазделительСтрок
					+ "Серия - Владелец: " + спрСер + " - " + спрСер.Владелец);
			спрХар = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			спрСер = Справочники.СерииНоменклатуры.ПустаяСсылка();		
			спрНом = Справочники.Номенклатура.ПустаяСсылка();		
		КонецЕсли
	КонецЕсли;
КонецПроцедуры

// Функция возвращает представление адреса собранного из полей значений Поле1 - Поле10
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Строка
//
Функция ПолучитьПредставлениеАдреса(Запись)

	ТекПредставление = "";

	Если СокрЛП(Запись.Поле1) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле1);
	КонецЕсли;

	Если СокрЛП(Запись.Поле2) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле2);
	КонецЕсли;

	Если СокрЛП(Запись.Поле3) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле3);
	КонецЕсли;

	Если СокрЛП(Запись.Поле4) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле4);
	КонецЕсли;

	Если СокрЛП(Запись.Поле5) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле5);
	КонецЕсли;

	Если СокрЛП(Запись.Поле6) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле6);
	КонецЕсли;

	Если СокрЛП(Запись.Поле7) <> "" Тогда
		ТекПредставление = ТекПредставление + ", дом № " + СокрЛП(Запись.Поле7);
	КонецЕсли;

	Если СокрЛП(Запись.Поле8) <> "" Тогда
		ТекПредставление = ТекПредставление + ", корпус " + СокрЛП(Запись.Поле8);
	КонецЕсли;

	Если СокрЛП(Запись.Поле9) <> "" Тогда
		ТекПредставление = ТекПредставление + ", кв." + СокрЛП(Запись.Поле9);
	КонецЕсли;

	Если СтрДлина(ТекПредставление) > 2 Тогда
		ТекПредставление = Сред(ТекПредставление, 3);
	Иначе
		ТекПредставление = Запись.Представление;		
	КонецЕсли;
	
	Возврат ТекПредставление;

КонецФункции

//из входного параметра Парам ввиде КККККК[_АААААААА]
//где КККККК - код контрагента ААААААА - код адреса (спр. контактная информация)
//возвращает 2 выходных значения
//Контрагент - ссылка на элемент справочника Контрагенты
//АдресДоставки - запись регистра сведений КонтактнаяИнформация
Процедура ПолучитьКонтрагентаИАдресПоКоду(Парам,Контрагент,АдресДоставки) Экспорт
	КодКонтрагента= СокрЛП(Лев(Парам,ДлинаКодаКонтрагенты));
	КодАдреса     = СокрЛП(Сред(Парам,ДлинаКодаКонтрагенты+1));
	
	Контрагент = Справочники.Контрагенты.НайтиПоКоду(КодКонтрагента);
	АдресДоставки="";
 	Если НЕ Контрагент.Пустая() Тогда
		Если КодАдреса<>"" Тогда //есть ТТ получим, её адрес
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	КонтактнаяИнформация.Представление КАК АдресДоставки
			               |ИЗ
			               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			               |ГДЕ
			               |	КонтактнаяИнформация.Объект = &Контрагент
			               |	И КонтактнаяИнформация.Вид.Код = &КодАдреса
			               |	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)";
			
			Запрос.УстановитьПараметр("Контрагент",Контрагент );
			Запрос.УстановитьПараметр("КодАдреса",КодАдреса );
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				АдресДоставки = Выборка.АдресДоставки;
			КонецЦикла;
		Иначе
			Отбор=Новый Структура;
			Отбор.Вставить("Объект",Контрагент);
			Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.Адрес);
			Отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			Поля=РегистрыСведений.КонтактнаяИнформация.Получить(Отбор);
			АдресДоставки = ПолучитьПредставлениеАдреса(Поля);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

//формирует и возвращает строку - единый код для контрагента и адреса доставки, 
//КодКонтрагента - ГУИД элемента справочника Контаргенты без "-"
//АдресКод - ГУИД записи РС.КонтактнаяИнформация без "-"
Функция УпаковатьКодКонтрагентаИКодАдреса(КодКонтрагента,АдресКод) Экспорт
	КодКонтрагентаИАдрес= Лев(КодКонтрагента+"                            ",ДлинаКодаКонтрагенты)+СокрЛП(АдресКод); 
	Возврат КодКонтрагентаИАдрес;

КонецФункции // УпаковатьКодКонтрагентаИКодАдреса()

//функция возвращает единый код торговой точки по ссылке на контрагента и строке адрес доставки
//Контрагент - ссылка на контрагента
//АдресДоставки - строковое представление адреса доставки
//СпособОрганизацииТТ - способ выгрузки торговых точек на КПК - по холдингам (0) или по адресам доставки (1)
функция ПолучитьИДКлиентаПоКонтрагентАдрес(Контрагент, АдресДоставки, СпособОрганизацииТТ = Неопределено) Экспорт
	
	Если СпособОрганизацииТТ = Неопределено Тогда
		СпособОрганизацииТТ = ПолучитьНастройку(МобиС,"СпособОрганизацииТТ",0);    //как обычно
	КонецЕсли;
	
	КонтрагентКод = СокрЛП(Контрагент.Код);
	кодКонтрагента = КонтрагентКод;
	Если СпособОрганизацииТТ = 1 Тогда		
		Если НЕ АдресДоставки = "" Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
						   |	КонтактнаяИнформация.Вид.Код КАК КодАдресаДоставки
						   |ИЗ
						   |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
						   |ГДЕ
						   |	КонтактнаяИнформация.Объект = &Контрагент
						   |	И КонтактнаяИнформация.Представление Подобно &АдресДоставки
						   |	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)";		
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Запрос.УстановитьПараметр("АдресДоставки", АдресДоставки);
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Если Выборка.Следующий() Тогда
				//код составим из кода контрагента и кода адреса
				кодКонтрагента = УпаковатьКодКонтрагентаИКодАдреса(КонтрагентКод, Выборка.КодАдресаДоставки);
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	Возврат кодКонтрагента;
КонецФункции

//////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ИЗ ГЛОБАЛЬНЫХ МОДУЛЕЙ 1С, ЧТОБЫ НЕ ЗАВИСЕТЬ ОН КОНКРЕТНОЙ ВЕРСИИ

// ДЛЯ УТП УКРАИНА 1.2
// функция определяет тип параметра Склад и возвращает его
Функция ОпределитьТипСклада(Склад)

	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Возврат Перечисления.ТипыСкладов.ПустаяСсылка();
	ИначеЕсли Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
		Возврат Перечисления.ТипыСкладов.Оптовый;
	ИначеЕсли Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		Возврат Перечисления.ТипыСкладов.Розничный;
	Иначе//НТТ
		Если Склад.СуммовойУчет Тогда
			Возврат Перечисления.ТипыСкладов.СНТТ;
		Иначе
			Возврат Перечисления.ТипыСкладов.НТТ;	
		КонецЕсли;
	КонецЕсли;	

КонецФункции // ОпределитьТипСклада()

// ДЛЯ УТП УКРАИНА 1.2
// Функция возвращает счета учета номенклатуры по выбранной организации.
//
// Параметры:
//  Организация         - организация, по которой определяются счета учета
//  Склад		        - место хранения, по которому определяются счета учета
//  Номенклатура        - номенклатура, по которой определяются счета учета
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура, Склад = Неопределено) Экспорт

	СтруктураВозврата = Новый Структура("
	|СчетУчетаБУ, 
	|СчетУчетаДавСырья, 
	|СчетПередачиБУ, 
	|СчетУчетаДоп,   
	|СчетПередачиЗабБУ,
	|СхемаРеализации,
	|НалоговоеНазначение,
	|НалоговоеНазначениеДоходовИЗатрат,
	|Организация, 
	|Склад, 
	|ТипСклада, 
	|Номенклатура,
	|ВидНоменклатуры");
	

	МассивСклад			 = Новый Массив();
	МассивТипСклада		 = Новый Массив();
	МассивНоменклатура	 = Новый Массив();
	МассивВидНоменклатуры= Новый Массив();
	МассивОрганизация	 = Новый Массив();
	
	МассивСклад.Добавить(Справочники.Склады.ПустаяСсылка());
	МассивТипСклада.Добавить(Перечисления.ТипыСкладов.ПустаяСсылка());
	МассивНоменклатура.Добавить(Справочники.Номенклатура.ПустаяСсылка());
	МассивВидНоменклатуры.Добавить(Справочники.ВидыНоменклатуры.ПустаяСсылка());
	МассивОрганизация.Добавить(Справочники.Организации.ПустаяСсылка());
		
	Если ЗначениеЗаполнено(Склад) Тогда
		МассивСклад.Добавить(Склад);
		МассивТипСклада.Добавить(ОпределитьТипСклада(Склад));
	КонецЕсли;
	
	Если     ЗначениеЗаполнено(Номенклатура)
		И НЕ Номенклатура.ЭтоГруппа Тогда
		МассивВидНоменклатуры.Добавить(Номенклатура.ВидНоменклатуры);
	КонецЕсли;
	
	МассивНоменклатура.Добавить(Номенклатура);
	СписокГрупп = УправлениеВзаиморасчетами.ПолучитьСписокВышестоящихГрупп(Номенклатура);
	Для каждого Элемент Из СписокГрупп Цикл
		МассивНоменклатура.Добавить(Элемент);
	КонецЦикла;
	
	МассивОрганизация.Добавить(Организация);
	
	ТестЗапрос = Новый Запрос();
	
	ТестЗапрос.УстановитьПараметр("Организация",        МассивОрганизация);
	ТестЗапрос.УстановитьПараметр("Номенклатура",       МассивНоменклатура);
	ТестЗапрос.УстановитьПараметр("Склад",			    МассивСклад);
	ТестЗапрос.УстановитьПараметр("ТипСклада",			МассивТипСклада);
	ТестЗапрос.УстановитьПараметр("ВидНоменклатуры",	МассивВидНоменклатуры);
	
	ТестЗапрос.Текст = "
	|ВЫБРАТЬ
	|	СчетаУчетаНоменклатуры.Организация КАК Организация,
	|	СчетаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	СчетаУчетаНоменклатуры.Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
	|	СчетаУчетаНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	|	СчетаУчетаНоменклатуры.Склад КАК Склад,
	|	СчетаУчетаНоменклатуры.ТипСклада КАК ТипСклада,
	|	СчетаУчетаНоменклатуры.СчетУчетаБУ КАК СчетУчетаБУ,
	|	СчетаУчетаНоменклатуры.СчетУчетаЗабалансовыйБУ КАК СчетУчетаЗабалансовыйБУ,
	|	СчетаУчетаНоменклатуры.СчетУчетаПередачиБУ КАК СчетУчетаПередачиБУ,
	|	СчетаУчетаНоменклатуры.СчетУчетаПередачиЗабалансовыйБУ КАК СчетУчетаПередачиЗабалансовыйБУ,
	|	СчетаУчетаНоменклатуры.СхемаРеализации КАК СхемаРеализации,
	|	СчетаУчетаНоменклатуры.НалоговоеНазначение КАК НалоговоеНазначение,
	|	СчетаУчетаНоменклатуры.НалоговоеНазначениеДоходовИЗатрат КАК НалоговоеНазначениеДоходовИЗатрат
	|ИЗ
	|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
	|	
	|ГДЕ
	|	СчетаУчетаНоменклатуры.Организация В (&Организация)
	|	И СчетаУчетаНоменклатуры.Номенклатура В (&Номенклатура)
	|	И СчетаУчетаНоменклатуры.Склад В (&Склад)
	|	И СчетаУчетаНоменклатуры.ВидНоменклатуры В (&ВидНоменклатуры)
	|	И СчетаУчетаНоменклатуры.ТипСклада В (&ТипСклада)";
	
	ТаблицаЗапроса = ТестЗапрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Колонки.Добавить("Глубина");
	Для Каждого Строка Из ТаблицаЗапроса Цикл
		Если Строка.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Строка.Глубина = 0;
		Иначе
			Строка.Глубина = СтрДлина(Строка.Номенклатура.ПолныйКод());
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗапроса.Сортировать("Глубина Убыв, ВидНоменклатуры Убыв, Склад Убыв, ТипСклада Убыв, Организация Убыв");

	Если ТаблицаЗапроса.Количество() > 0 Тогда

		СведенияОСчетах = ТаблицаЗапроса[0];
		
		СтруктураВозврата.СчетУчетаБУ         = СведенияОСчетах.СчетУчетаБУ;
		СтруктураВозврата.СчетУчетаДоп        = СведенияОСчетах.СчетУчетаЗабалансовыйБУ;
		СтруктураВозврата.СчетУчетаДавСырья   = СведенияОСчетах.СчетУчетаЗабалансовыйБУ;
		СтруктураВозврата.СчетПередачиБУ      = СведенияОСчетах.СчетУчетаПередачиБУ;
		СтруктураВозврата.СчетПередачиЗабБУ   = СведенияОСчетах.СчетУчетаПередачиЗабалансовыйБУ;
		СтруктураВозврата.СхемаРеализации     = СведенияОСчетах.СхемаРеализации;
		СтруктураВозврата.НалоговоеНазначение               = СведенияОСчетах.НалоговоеНазначение;
		СтруктураВозврата.НалоговоеНазначениеДоходовИЗатрат = СведенияОСчетах.НалоговоеНазначениеДоходовИЗатрат;
		СтруктураВозврата.Номенклатура			= СведенияОСчетах.Номенклатура;
		СтруктураВозврата.ВидНоменклатуры		= СведенияОСчетах.ВидНоменклатуры;
		СтруктураВозврата.Организация			= СведенияОСчетах.Организация;
		СтруктураВозврата.Склад					= СведенияОСчетах.Склад;
		СтруктураВозврата.ТипСклада				= СведенияОСчетах.ТипСклада;

	КонецЕсли;

	Возврат СтруктураВозврата;

КонецФункции // ПолучитьСчетаУчетаНоменклатуры()

//по входному параметру СтавкаНДС - элементу перечисления СтавкиНДС 
//возвращает числовое значение ставки НДС
Функция ПолучитьСтавкуНДС(СтавкаНДС) Экспорт

	Если Конфигурация = "ТорговляУкраина" 
		ИЛИ Конфигурация = "УТПУкраина" 
		ИЛИ Конфигурация = "УППУкраина" Тогда
		Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
			Возврат 20;
		КонецЕсли;
	ИначеЕсли Конфигурация = "ТорговляКазахстан"
		ИЛИ Конфигурация = "УТПКазахстан"
		ИЛИ Конфигурация = "УППКазахстан" Тогда
		Возврат СтавкаНДС.Ставка;
	Иначе
		Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
			Возврат 20;
		ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
			Возврат 10;
		ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
			Возврат 18;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 0;

КонецФункции // ПолучитьСтавкуНДС()

//функция вычисляет и возвращает сумму НДС в зависимости от Суммы от которой ведется расчёт СуммыНДС и 
//флагов УчетаНДС (УчитыватьНДС) и метода расчёта - прибавлять или сумма уже включает НДС (СуммаВключаетНДС)
Функция РассчитатьСуммуНДС(Сумма, УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС) Экспорт

	СуммаНДС = 0;
	Если УчитыватьНДС Тогда 
		Если СуммаВключаетНДС Тогда
			СуммаБезНДС = Сумма / (1 + СтавкаНДС / 100);
			СуммаНДС = Сумма - СуммаБезНДС;
		Иначе
			СуммаНДС = Сумма * СтавкаНДС / 100;
		КонецЕсли;
	КонецЕсли;
	Возврат СуммаНДС;

КонецФункции // РассчитатьСуммуНДС()

//Функция возвращает строковое представление адреса типа ТипАдреса для Объект
//в случае ошибки - возвращает пустую строку
Функция ПолучитьАдресИзКонтактнойИнформации(Объект, ТипАдреса = "") Экспорт

	Если НЕ ЗначениеЗаполнено(ТипАдреса) Тогда
		Возврат "";
	КонецЕсли;

	Если ТипАдреса="Фактический" Тогда
		Начало = "Факт";
	ИначеЕсли ТипАдреса="Регистрации"
		  ИЛИ ТипАдреса="Юридический" Тогда
		Начало = "Юр";
	Иначе
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
		Окончание = ?(Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, "Организации", "ФизЛица");
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		Окончание = "Контрагента";
	КонецЕсли;
	
	ВидАдреса = Справочники.ВидыКонтактнойИнформации[Начало+"Адрес"+Окончание].ПолучитьОбъект().Ссылка;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид"   , ВидАдреса);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	КонтактнаяИнформация.Представление
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Объект
	               |	И КонтактнаяИнформация.Тип = &Тип
	               |	И КонтактнаяИнформация.Вид = &Вид";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].Представление;
	КонецЕсли;

КонецФункции // ПолучитьАдресИзКонтактнойИнформации()

//Функция возвращает строковое представление адреса типа ТипАдреса для Объект, состоящее из всех полей адреса,
//соединенных в одну строку
//в случае ошибки - возвращает пустую строку
Функция ПолучитьПолныйАдресИзКонтактнойИнформации(Объект, ТипАдреса = "") Экспорт

	Если НЕ ЗначениеЗаполнено(ТипАдреса) Тогда
		Возврат "";
	КонецЕсли;

	Если ТипАдреса="Фактический" Тогда
		Начало = "Факт";
	ИначеЕсли ТипАдреса="Регистрации"
		  ИЛИ ТипАдреса="Юридический" Тогда
		Начало = "Юр";
	Иначе
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
		Окончание = ?(Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, "Организации", "ФизЛица");
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		Окончание = "Контрагента";
	КонецЕсли;
	
	ВидАдреса = Справочники.ВидыКонтактнойИнформации[Начало+"Адрес"+Окончание].ПолучитьОбъект().Ссылка;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид"   , ВидАдреса);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.Поле1,
	|	КонтактнаяИнформация.Поле2,
	|	КонтактнаяИнформация.Поле3,
	|	КонтактнаяИнформация.Поле4,
	|	КонтактнаяИнформация.Поле5,
	|	КонтактнаяИнформация.Поле6,
	|	КонтактнаяИнформация.Поле7,
	|	КонтактнаяИнформация.Поле8,
	|	КонтактнаяИнформация.Поле9,
	|	КонтактнаяИнформация.Поле10
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	Иначе
		
		Возврат 
			?(РезультатЗапроса.Выгрузить()[0].Поле6="",
				"", 
				РезультатЗапроса.Выгрузить()[0].Поле6)
			+ ?(РезультатЗапроса.Выгрузить()[0].Поле7="",
				"", 
				", "+РезультатЗапроса.Выгрузить()[0].Поле7)
			+ ?(РезультатЗапроса.Выгрузить()[0].Поле8="",
				"",
				" корп. " + РезультатЗапроса.Выгрузить()[0].Поле8);
	КонецЕсли;

КонецФункции // ПолучитьАдресИзКонтактнойИнформации()

// Функция находит актуальное значение телефона в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного телефона
//
Функция ПолучитьТелефонИзКонтактнойИнформации(Объект) Экспорт

	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
		Окончание = "Организации";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		Окончание = "Контрагента";
	КонецЕсли;

	ВидТелефона = Справочники.ВидыКонтактнойИнформации["Телефон" + Окончание].ПолучитьОбъект().Ссылка;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("Вид"   , ВидТелефона);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].Представление;
	КонецЕсли;

КонецФункции // ПолучитьТелефонИзКонтактнойИнформации()

//Функция возвращает информацию об ответственных лицах организации и их должностях на указанную дату в виде структуры
Функция РуководителиОрганизации(Организация, ДатаСреза, Исполнитель = Неопределено) Экспорт
	
	Результат = Новый Структура("Руководитель, РуководительДолжность, ГлавныйБухгалтер, Кассир");
	ЗапросПоЛицам = Новый Запрос();
	ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
	ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
	
	Если Конфигурация="Торговля"
		 ИЛИ Конфигурация="ТорговляУкраина" Тогда  //для конфигурации "Управление торговлей" 
		ИмяПеречисления="ОтветственныеЛицаОрганизации";
		ЗапросПоЛицам.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизацииСрезПоследних.ОтветственноеЛицо,
		|	ОтветственныеЛицаОрганизацииСрезПоследних.Должность.Наименование КАК Должность,
		|	ВЫБОР
		|		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
		|			ТОГДА ОтветственныеЛицаОрганизацииСрезПоследних.ФизическоеЛицо.Наименование
		|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
		|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> &ПустаяСтрока
		|					ТОГДА &Пробел + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + &Точка
		|				ИНАЧЕ &ПустаяСтрока
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> &ПустаяСтрока
		|					ТОГДА &Пробел + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + &Точка
		|				ИНАЧЕ &ПустаяСтрока
		|			КОНЕЦ
		|	КОНЕЦ КАК ФИОПолное
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизации.СрезПоследних(
		|			&ДатаСреза, 
		|			СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацииСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|				&ДатаСреза, 
		|				ФизЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ФИОФизЛицСрезПоследних
		|		ПО ОтветственныеЛицаОрганизацииСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо";
		
		
	Иначе //Для УПП :Регистр называется "ОтветственныеЛицаОрганизаций" 
		ИмяПеречисления="ОтветственныеЛицаОрганизаций";
		
		ЗапросПоЛицам.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизацииСрезПоследних.ОтветственноеЛицо,
		|	ОтветственныеЛицаОрганизацииСрезПоследних.Должность.Наименование КАК Должность,
		|	ВЫБОР
		|		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
		|			ТОГДА ОтветственныеЛицаОрганизацииСрезПоследних.ФизическоеЛицо.Наименование
		|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
		|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> &ПустаяСтрока
		|					ТОГДА &Пробел + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + &Точка
		|				ИНАЧЕ &ПустаяСтрока
		|			КОНЕЦ + ВЫБОР
		|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> &ПустаяСтрока
		|					ТОГДА &Пробел + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + &Точка
		|				ИНАЧЕ &ПустаяСтрока
		|			КОНЕЦ
		|	КОНЕЦ КАК ФИОПолное
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
		|			&ДатаСреза, 
		|			СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацииСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|				&ДатаСреза, 
		|				ФизЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ФИОФизЛицСрезПоследних
		|		ПО ОтветственныеЛицаОрганизацииСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо";
	КонецЕсли; 
	
	ЗапросПоЛицам.УстановитьПараметр("ПустаяСтрока", "");
	ЗапросПоЛицам.УстановитьПараметр("Пробел", " ");
	ЗапросПоЛицам.УстановитьПараметр("Точка", " ");	
	Выборка = ЗапросПоЛицам.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ОтветственноеЛицо = Перечисления[ИмяПеречисления].Руководитель Тогда
			Результат.Руководитель            = Выборка.ФИОПолное;
			Результат.РуководительДолжность   = Выборка.Должность;
		ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления[ИмяПеречисления].ГлавныйБухгалтер Тогда
			Результат.ГлавныйБухгалтер        = Выборка.ФИОПолное;
		ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления[ИмяПеречисления].Кассир Тогда
			Результат.Кассир                  = Выборка.ФИОПолное;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // ОтветственныеЛицаОрганизации()

// функция возвращает часть строки после последнего встреченного символа в строке
//ИсходнаяСтрока - строка в которой выполняется поиск
//СимволПоиска - символ "барьер" поиска
//ЕслиНетСимволаТоВсюСтроку - что возвращать если СимволаПоиск в ИсходнаяСтрока отсутствует
Функция ПолучитьЧастьСтрокиОтделеннойСимволом(Знач ИсходнаяСтрока, Знач СимволПоиска, ЕслиНетСимволаТоВсюСтроку = Ложь)
	
	ПозицияСимвола = СтрДлина(ИсходнаяСтрока);
	Пока ПозицияСимвола >= 1 Цикл
		
		Если Сред(ИсходнаяСтрока, ПозицияСимвола, 1) = СимволПоиска Тогда
						
			Возврат Сред(ИсходнаяСтрока, ПозицияСимвола + 1); 
			
		КонецЕсли;
		
		ПозицияСимвола = ПозицияСимвола - 1;	
	КонецЦикла;

	Возврат ?(ЕслиНетСимволаТоВсюСтроку, ИсходнаяСтрока, "");
  	
КонецФункции

// Выделяет из имени файла его расширение (набор символов после последней точки).
//
// Параметры
//  ИмяФайла - Строка, содержащая имя файла, неважно с именем каталога или без.
//
// Возвращаемое значение:
//   Строка - расширение файла.
//
Функция ПолучитьРасширениеФайла(Знач ИмяФайла) Экспорт
	
	Расширение = ПолучитьЧастьСтрокиОтделеннойСимволом(ИмяФайла, ".");
	Возврат Расширение;
	
КонецФункции

// Выделяет из полного пути к файлу его имя (набор символов после последней \).
//
// Параметры
//  ПутьКФайлу - Строка, содержащая имя файла, неважно с именем каталога или без.
//
// Возвращаемое значение:
//   Строка - расширение файла.
//
Функция ПолучитьИмяФайлаИзПолногоПути(Знач ПутьКФайлу) Экспорт
	
	ИмяФайла = ПолучитьЧастьСтрокиОтделеннойСимволом(ПутьКФайлу, "\", Истина);
	ИмяФайла = ПолучитьЧастьСтрокиОтделеннойСимволом(ИмяФайла,   "/", Истина);
	
	Возврат ИмяФайла;
	
КонецФункции

//вызывает Предупреждение с указанием, что это Моби-С
//ТекстПредупреждения - Текст отображаемый в предупреждении
//Таймаут - время (сек) через которое необходимо закрыть окно, 0 - НЕ закрывать
//Заголовок - Заголовок окна предупреждения
Процедура Предупредить(ТекстПредупреждения,Таймаут=0, Заголовок="" ) Экспорт

	Предупреждение(ТекстПредупреждения,Таймаут,"Моби-С:"+Заголовок);

КонецПроцедуры

//Удаляет из ТаблицыЗначений ТаблЗнач Строки с конкретным значениям Ключ в колонке ИмяКлюча
Процедура УдалитьСтрокиПоКлючу(ТаблЗнач,ИмяКлюча,Ключ) Экспорт
    Отбор = Новый Структура();
	Отбор.Вставить(ИмяКлюча,Ключ);
	НайденныеСтроки = ТаблЗнач.НайтиСтроки(Отбор);
	Для каждого строка Из НайденныеСтроки Цикл
	    ТаблЗнач.Удалить(строка);
	КонецЦикла; 
КонецПроцедуры

//функция возвращает кратность между Валютой документа ДокументОбъект и ВалютаРегламентированногоУчета
Функция КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	// Если валюта документа совпадает с валютой регл. учета или НЕ указана, то кратность 1.
	Если ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета ИЛИ ДокументОбъект.ВалютаДокумента.Пустая() Тогда
		Возврат 1;
	Иначе
	
		МетаданныеДокумента = ДокументОбъект.Метаданные();

		// Если есть реквизит КратностьДокумента - его и вернем
		Если МетаданныеДокумента.Реквизиты.Найти("КратностьДокумента") <> Неопределено Тогда
			Возврат ДокументОбъект.КратностьДокумента;
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("КратностьВзаиморасчетов") <> Неопределено Тогда
			// Если нет КратностьДокумента и валюта документа НЕ совпадает с валютой регл. учета, 
			// то такой документ может быть выписан только в валюте взаиморасчетов,
			// если есть реквизит КратностьВзаиморасчетов - его и вернем.
			Возврат ДокументОбъект.КратностьВзаиморасчетов;
		Иначе
			Возврат 1;
		КонецЕсли;

	КонецЕсли;

КонецФункции // КратностьДокумента()

// Определяет курс документа, который равен либо курсу документа (если в документе он существует),
// либо курсу взаиморасчетов, либо 1.
//
// Параметры: 
//  ДокументОбъект                 - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Число - курс документа.
//
Функция КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	// Если валюта документа совпадает с валютой регл. учета или НЕ указана, то курс 1.
	Если ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета ИЛИ ДокументОбъект.ВалютаДокумента.Пустая() Тогда
		Возврат 1;
	Иначе
	
		МетаданныеДокумента = ДокументОбъект.Метаданные();

		// Если есть реквизит КурсДокумента - его и вернем
		Если МетаданныеДокумента.Реквизиты.Найти("КурсДокумента") <> Неопределено Тогда
			Возврат ДокументОбъект.КурсДокумента;
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("КурсВзаиморасчетов") <> Неопределено Тогда
			// Если нет КурсДокумента и валюта документа НЕ совпадает с валютой регл. учета, 
			// то такой документ может быть выписан только в валюте взаиморасчетов,
			// если есть реквизит КурсВзаиморасчетов - его и вернем.
			Возврат ДокументОбъект.КурсВзаиморасчетов;
		Иначе
			Возврат 1;
		КонецЕсли;

	КонецЕсли;

КонецФункции // КурсДокумента()

// Функция возвращает возможные счета учета расчетов с контрагентом
//
// Параметры:
//  Организация - по которой выполняется поиск
//  Контрагент  - по которому выполняется поиск
//  Договор     - по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, Договор, ВалютаРегламентированногоУчета ) Экспорт

		Результат = Новый Структура("СчетРасчетов, 
	                            |СчетАвансов,
	                            |СчетРасчетовПокупателя, 
	                            |СчетАвансовПокупателя, 
	                            |СчетРасчетовСКомитентом,
	                            |СчетУчетаТары,
	                            |СчетУчетаТарыПокупателя,
	                            |СчетУчетаДоходовПоТареБУ,
	                            |СчетУчетаРасходовПоТареБУ,
	                            |СчетУчетаДоходовПоТареНУ,
	                            |СчетУчетаРасходовПоТареНУ,
	                            |СтатьяПрочихДоходовРасходовПоТаре");

	ВидРасчетовПоДоговору = ОпределениеВидаРасчетовПоПараметрамДоговора(Договор,ВалютаРегламентированногоУчета);

	СписокГруппКонтрагентов = ПолучитьСписокВышестоящихГрупп(Контрагент);
	СписокГруппДоговоров 	= ПолучитьСписокВышестоящихГрупп(Контрагент);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("Контрагент",        Контрагент);
	Запрос.УстановитьПараметр("Договор",           Договор);
	Запрос.УстановитьПараметр("ВидРасчетов",       ВидРасчетовПоДоговору);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойДоговор",     Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВидРасчетов", Перечисления.ВидыРасчетовПоДоговорам.ПустаяСсылка());
	
	Индекс = 1;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	" + Формат(Индекс, "ЧГ=0") + " КАК Приоритет,
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТареБУ,
	|	СчетУчетаРасходовПоТареБУ,
	|	СчетУчетаДоходовПоТареНУ,
	|	СчетУчетаРасходовПоТареНУ,
	|	СтатьяПрочихДоходовРасходовПоТаре	
	|
	|ИЗ
	|	РегистрСведений.КонтрагентыОрганизаций
	|
	|ГДЕ
	|	
	|	Организация = &Организация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &Договор И НЕ &Договор = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс, ГруппаДоговоров);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Формат(Индекс, "ЧГ=0") + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаДоходовПоТареБУ,
		|	СчетУчетаРасходовПоТареБУ,
		|	СчетУчетаДоходовПоТареНУ,
		|	СчетУчетаРасходовПоТареНУ,
		|	СтатьяПрочихДоходовРасходовПоТаре	
		|
		|ИЗ
		|	РегистрСведений.КонтрагентыОрганизаций
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &Организация И
		|	Контрагент            = &Контрагент И
		|	Договор               = &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс, "ЧГ=0") + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТареБУ,
	|	СчетУчетаРасходовПоТареБУ,
	|	СчетУчетаДоходовПоТареНУ,
	|	СчетУчетаРасходовПоТареНУ,
	|	СтатьяПрочихДоходовРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.КонтрагентыОрганизаций
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация = &Организация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, ГруппаКонтрагентов);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Формат(Индекс, "ЧГ=0") + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаДоходовПоТареБУ,
		|	СчетУчетаРасходовПоТареБУ,
		|	СчетУчетаДоходовПоТареНУ,
		|	СчетУчетаРасходовПоТареНУ,
		|	СтатьяПрочихДоходовРасходовПоТаре
		|
		|ИЗ
		|	РегистрСведений.КонтрагентыОрганизаций
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &Организация И
		|	Контрагент            = &ГруппаКонтрагентов" + Индекс + " И
		|	Договор               = &ПустойДоговор
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс, "ЧГ=0") + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТареБУ,
	|	СчетУчетаРасходовПоТареБУ,
	|	СчетУчетаДоходовПоТареНУ,
	|	СчетУчетаРасходовПоТареНУ,
	|	СтатьяПрочихДоходовРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.КонтрагентыОрганизаций
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация           = &Организация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс, ГруппаДоговоров);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Формат(Индекс, "ЧГ=0") + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаДоходовПоТареБУ,
		|	СчетУчетаРасходовПоТареБУ,
		|	СчетУчетаДоходовПоТареНУ,
		|	СчетУчетаРасходовПоТареНУ,
		|	СтатьяПрочихДоходовРасходовПоТаре
		|
		|ИЗ
		|	РегистрСведений.КонтрагентыОрганизаций
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &ПустаяОрганизация И
		|	Контрагент            = &Контрагент И
		|	Договор               = &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс, "ЧГ=0") + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТареБУ,
	|	СчетУчетаРасходовПоТареБУ,
	|	СчетУчетаДоходовПоТареНУ,
	|	СчетУчетаРасходовПоТареНУ,
	|	СтатьяПрочихДоходовРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.КонтрагентыОрганизаций
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация = &ПустаяОрганизация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, ГруппаКонтрагентов);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Формат(Индекс, "ЧГ=0") + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаДоходовПоТареБУ,
		|	СчетУчетаРасходовПоТареБУ,
		|	СчетУчетаДоходовПоТареНУ,
		|	СчетУчетаРасходовПоТареНУ,
		|	СтатьяПрочихДоходовРасходовПоТаре
		|
		|ИЗ
		|	РегистрСведений.КонтрагентыОрганизаций
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &ПустаяОрганизация И
		|	Контрагент            = &ГруппаКонтрагентов" + Индекс + " И
		|	Договор               = &ПустойДоговор
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс, "ЧГ=0") + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТареБУ,
	|	СчетУчетаРасходовПоТареБУ,
	|	СчетУчетаДоходовПоТареНУ,
	|	СчетУчетаРасходовПоТареНУ,
	|	СтатьяПрочихДоходовРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.КонтрагентыОрганизаций
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация           = &ПустаяОрганизация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс, "ЧГ=0") + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТареБУ,
	|	СчетУчетаРасходовПоТареБУ,
	|	СчетУчетаДоходовПоТареНУ,
	|	СчетУчетаРасходовПоТареНУ,
	|	СтатьяПрочихДоходовРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.КонтрагентыОрганизаций
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ПустойВидРасчетов И
	|	Организация           = &ПустаяОрганизация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();

		Результат.СчетРасчетов                      = Выборка.СчетУчетаРасчетовСПоставщиком;
		Результат.СчетАвансов                       = Выборка.СчетУчетаАвансовВыданных;
		Результат.СчетРасчетовПокупателя            = Выборка.СчетУчетаРасчетовСПокупателем;
		Результат.СчетАвансовПокупателя             = Выборка.СчетУчетаАвансовПолученных;
		Результат.СчетРасчетовСКомитентом           = Выборка.СчетУчетаРасчетовСКомитентом;
		Результат.СчетУчетаТары                     = Выборка.СчетУчетаРасчетовПоТареСПоставщиком;
		Результат.СчетУчетаТарыПокупателя           = Выборка.СчетУчетаРасчетовПоТареСПокупателем;
		Результат.СчетУчетаДоходовПоТареБУ          = Выборка.СчетУчетаДоходовПоТареБУ;
		Результат.СчетУчетаДоходовПоТареНУ          = Выборка.СчетУчетаДоходовПоТареНУ;
		Результат.СчетУчетаРасходовПоТареБУ         = Выборка.СчетУчетаРасходовПоТареБУ;
		Результат.СчетУчетаРасходовПоТареНУ         = Выборка.СчетУчетаРасходовПоТареНУ;
		Результат.СтатьяПрочихДоходовРасходовПоТаре = Выборка.СтатьяПрочихДоходовРасходовПоТаре;

	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()

//Функция возвращает вид расчетов по договору
// Параметры
//		ДоговорКонтрагента 				- СправочникСсылка.ДоговорыКонтрагентов
//		ВалютаРегламентированногоУчета 	- СправочникСсылка.Валюты
//
// Возвращаемое значение
//      ПеречислениеСсылка.ВидыРасчетовПоДоговорам
//
Функция ОпределениеВидаРасчетовПоПараметрамДоговора(
		ДоговорКонтрагента,
		ВалютаРегламентированногоУчета, 
		ДоговорКонтрагентаВалютаВзаиморасчетов = Неопределено, 
		ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = Неопределено) Экспорт
	Если ДоговорКонтрагентаВалютаВзаиморасчетов = Неопределено Тогда
		ДоговорКонтрагентаВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;	
	Если ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = Неопределено Тогда
		ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) 
		ИЛИ ДоговорКонтрагентаВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета;
	ИначеЕсли ДоговорКонтрагентаРасчетыВУсловныхЕдиницах тогда
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВУсловныхЕдиницах;
	Иначе
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;
	Конецесли;
	Возврат ВидРасчетовПоДоговору;
КонецФункции

// Функция возвращает массив вышестоящих групп указанного элемента.
// 
// Параметры:
//  Элемент      - Элемент справочника, для которого ищется родитель
//
// Возвращаемое значение
//  Массив вышестоящих групп
//
Функция ПолучитьСписокВышеСтоящихГрупп(ЭлементСправочника) Экспорт
	
	Результат = Новый Массив;		
	
	Если НЕ ЗначениеЗаполнено(ЭлементСправочника) Тогда
		Возврат Результат;
	КонецЕсли;
	
	МетаданныеСправочника = ЭлементСправочника.Метаданные();
	Если НЕ МетаданныеСправочника.Иерархический Тогда
		Возврат Результат;
	КонецЕсли;
	ИмяСправочника = МетаданныеСправочника.Имя;	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Справочник1.Родитель КАК Родитель1,
	|	Справочник2.Родитель КАК Родитель2,
	|	Справочник3.Родитель КАК Родитель3,
	|	Справочник4.Родитель КАК Родитель4,
	|	Справочник5.Родитель КАК Родитель5
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК Справочник1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник2
	|		ПО (Справочник2.Ссылка = Справочник1.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник3
	|		ПО (Справочник3.Ссылка = Справочник2.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник4
	|		ПО (Справочник4.Ссылка = Справочник3.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник5
	|		ПО (Справочник5.Ссылка = Справочник4.Родитель)
	|ГДЕ
	|	Справочник1.Ссылка = &Ссылка";
	
	ТекущийЭлемент = ЭлементСправочника;
	
	Пока ЗначениеЗаполнено(ТекущийЭлемент) Цикл		
		Запрос.УстановитьПараметр("Ссылка", ТекущийЭлемент);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Для Индекс = 1 по 5 Цикл
				ТекущийЭлемент = Выборка["Родитель" + Индекс];
				Если ЗначениеЗаполнено(ТекущийЭлемент) Тогда
					Результат.Добавить(ТекущийЭлемент);
				Иначе
					Прервать;
				КонецЕсли;				
			КонецЦикла;
		Иначе
			ТекущийЭлемент = Неопределено;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

//процедура выполняет формирование отбора Отбор для построителя отчетов на основании 
//таблицы значений Таблица содержащяя условия отбора,
//ВызыватьИсключениеПриОшибкеУстановки - определяет логику работы в случае возникновения ошибки
Процедура ЗаполнитьОтборИзТаб(Отбор,  Таблица, Знач ВызыватьИсключениеПриОшибкеУстановки = Истина) Экспорт

	Если ТипЗнч(Таблица) = Тип("ТаблицаЗначений") Тогда
		Для каждого СтрокаТаблицы Из Таблица Цикл
			//ЭлементОтбора = Неопределено;
			//Если НЕ ПустаяСтрока(СтрокаТаблицы.Имя) Тогда
			//	ЭлементОтбора = Отбор.Найти(СтрокаТаблицы.Имя);
			//КонецЕсли;
			
			Попытка
				//Если ЭлементОтбора = Неопределено Тогда
				ЭлементОтбора = Отбор.Добавить(СтрокаТаблицы.ПутьКДанным, СтрокаТаблицы.Имя);
				//КонецЕсли;
				
				ЭлементОтбора.ВидСравнения = СтрокаТаблицы.ВидСравнения;
				ЭлементОтбора.Использование = СтрокаТаблицы.Использование;
				
				Если СтрокаТаблицы.Значение <> Null Тогда
					ЭлементОтбора.Значение = СтрокаТаблицы.Значение;
				КонецЕсли;
				Если СтрокаТаблицы.ЗначениеС <> Null Тогда
					ЭлементОтбора.ЗначениеС = СтрокаТаблицы.ЗначениеС;
				КонецЕсли;
				Если СтрокаТаблицы.ЗначениеПо <> Null Тогда
					ЭлементОтбора.ЗначениеПо = СтрокаТаблицы.ЗначениеПо;
				КонецЕсли;
				
			Исключение
				
				Если ВызыватьИсключениеПриОшибкеУстановки Тогда
					
					ВызватьИсключение ОписаниеОшибки();
					
				Иначе
					
					Продолжить;
					
				КонецЕсли;
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры // ЗаполнитьОтборИзСтруктуры()

//процедура формирует Отбор для построителя отчетов из данных об отборе контрагентов,
//сохраненных в настройках торгового представителя
Процедура ПолучитьОтборКлиентов(Агент,Отбор)
	ОтборСв=Новый Структура;
	ОтборСв.Вставить("Пользователь",Агент);
	ОтборСв.Вставить("ИмяОбъекта",РССохраненныеНастройкиИмяОбъекта);
	ОтборСв.Вставить("НаименованиеНастройки","Отбор.Контрагенты");
	Табл=РегистрыСведений.СохраненныеНастройки.Получить(ОтборСв).СохраненнаяНастройка.Получить();
	 
	ЗаполнитьОтборИзТаб(Отбор,Табл,Ложь);
КонецПроцедуры

//функция формирует и возвращает таблицу значений содержащую всех контрагентов,
//с которыми может работать Торговый представитель - Агент
Функция ПолучитьТаблицуКлиентов(Агент) Экспорт
	ПостроительКлиентов=Новый ПостроительЗапроса;
	ПостроительКлиентов.Текст="
	  |ВЫБРАТЬ Контрагенты.Ссылка КАК Контрагент,Контрагенты.Код КАК Код, Контрагенты.Родитель КАК Группа
	  |ИЗ Справочник.Контрагенты КАК Контрагенты
	  |ГДЕ НЕ Контрагенты.ЭтоГруппа";
	ПостроительКлиентов.ЗаполнитьНастройки();
	ПолучитьОтборКлиентов(Агент,ПостроительКлиентов.Отбор);
	ПостроительКлиентов.Выполнить();
	ТаблицаРезультатов  =  ПостроительКлиентов.Результат.Выгрузить();
	Возврат ТаблицаРезультатов;
КонецФункции

//Получить широту и долготу текущего контрагента Клиент
Процедура ПолучитьКоординатыКлиента(Клиент,Широта,Долгота) Экспорт
	Широта=0; Долгота=0;
	
	Отбор=Новый Структура;
	Отбор.Вставить("Объект",Клиент);
	Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.Другое);
	Отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Географическая широта"));
	Запись=РегистрыСведений.КонтактнаяИнформация.Получить(Отбор);
	Если Запись<>Неопределено Тогда
		Попытка
			Широта=Число(Запись.Представление);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Отбор.Вставить("Объект",Клиент);
	Отбор.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.Другое);
	Отбор.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Географическая долгота"));
	Запись=РегистрыСведений.КонтактнаяИнформация.Получить(Отбор);
	Если Запись<>Неопределено Тогда
		Попытка
			Долгота=Число(Запись.Представление);
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры		

//Функция создает файл с идентификатором Ид блокируемого объекта, предотвращая одновременную работу с объектом
//возвращает Файл если объект заблокирован или Неопределено если объект заблокирован ранее
Функция УстановитьБлокировку1(Ид) Экспорт
	СоздатьКаталог(КаталогЛогФайлов+"\Блокировки");
	Попытка
		ФайлБлок=Новый ЗаписьТекста(КаталогЛогФайлов+"\Блокировки\"+УдалитьЗапрещенныеСимволыИмени(Ид)+".txt");
		ФайлБлок.Записать(ИмяПользователя());
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ФайлБлок;
КонецФункции

//Функция удаляет файл блокировки объекта, Блокировка - файл блокировки
//Если объект разблокирован - возвращается Истина, иначе - Ложь;
Функция СнятьБлокировку1(Блокировка) Экспорт
	Попытка
		Блокировка.Закрыть();
		УдалитьФайлы(КаталогЛогФайлов+"\Блокировки","*.txt");
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

//функция возвращает строковое представление переданной настройки, для списков/массивов - будет перечисление через ","
//для таблиц значений - "Таблица значений, <количество> строк" , для строк, чисел, булево, дат - приведение к строке
//для остальных типов - название типа
функция ПолучитьРасшифровкуНастройки(значение)
	типЗначения = ТипЗнч(значение);
	Если типЗначения = ТипЗнч("") Тогда
		Возврат значение;
	ИначеЕсли типЗначения = ТипЗнч(0) Тогда
		Возврат ЧислоВСтроку(значение);
	ИначеЕсли типЗначения = ТипЗнч(Ложь) Тогда
		Возврат ?(значение, "Да", "Нет");
	ИначеЕсли типЗначения = ТипЗнч(ДатаПустая()) Тогда
		Возврат ДатаВремяВСтрокуДляКПК(значение);
	ИначеЕсли типЗначения = ТипЗнч(новый ТаблицаЗначений()) Тогда
		Возврат "ТаблицаЗначений, " + значение.Количество() + " строк";
	ИначеЕсли типЗначения = ТипЗнч(новый Массив()) Тогда
		элементы = "";
		для каждого элем из значение Цикл
			элементы = элементы + ", " + ПолучитьРасшифровкуНастройки(элем);
		КонецЦикла;			  
		Если СтрДлина(элементы) > 0 Тогда
			элементы = лев(Элементы, СтрДлина(элементы) - 2);
		КонецЕсли;
		Возврат "Массив: " + элементы;
	ИначеЕсли типЗначения = ТипЗнч(новый СписокЗначений()) Тогда
		элементы = "";
		для каждого элем из значение Цикл
			элементы = элементы + ", " + ПолучитьРасшифровкуНастройки(элем.Значение);
		КонецЦикла;			  
		Если СтрДлина(элементы) > 0 Тогда
			элементы = лев(Элементы, СтрДлина(элементы) - 2);
		КонецЕсли;
		Возврат "Список значений: " + элементы;
	Иначе
		Возврат Строка(значение);
	КонецЕсли;
	Возврат "Неизвестный тип значения";
КонецФункции

Процедура глПауза(Сек)
    Shell = новый COMОбъект("WScript.Shell");
	Shell.Sleep(Сек * 1000);
КонецПроцедуры

Функция ОткрытьФайлOnLineКлючей(_попытка = 5)
	ПутьКФайлуКлючей=КаталогЛогФайлов+"\lickeys.txt";
	файлКлючи = новый Файл(ПутьКФайлуКлючей);
	Если НЕ файлКлючи.Существует() Тогда
		ФайлКлючей = новый ТекстовыйДокумент();
		ФайлКлючей.УстановитьТекст("# Редактирование этого файла вручную запрещено.");
		ФайлКлючей.Записать(ПутьКФайлуКлючей, "windows-1251");	
	КонецЕсли;
	Попытка
		ФайлКлючей = новый ТекстовыйДокумент();
		ФайлКлючей.Прочитать(ПутьКФайлуКлючей);	
		Возврат ФайлКлючей;
	Исключение
		Если _попытка > 0 Тогда
			Возврат ОткрытьФайлOnLineКлючей(_попытка);
		Иначе
			глПауза(1);
			Возврат ОткрытьФайлOnLineКлючей(5);
		КонецЕсли;
	КонецПопытки;
КонецФункции

Функция КоличествоOnLineКлючей()
	
	ФайлКлючей = ОткрытьФайлOnLineКлючей();
    Ключи = ФайлКлючей.ПолучитьТекст();
	
	ключейВсего = 0;
	ключейАктивировано = 0;
	
	Если Не ПустаяСтрока(Ключи) Тогда
		ключей = СтрЧислоСтрок(Ключи);
		Для й = 1 по ключей Цикл
			стр = СтрПолучитьСтроку(Ключи, й);
			Если Лев(Стр, 1) = "#" Тогда
				//это комментарий, пропускаем строку
				Продолжить;
			КонецЕсли;			
			ключейВсего = ключейВсего + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ключейВсего;
КонецФункции

//функция формирует заголовок письма для отправки в Техподдержку
Функция ЗаголовокПисьма(
		Агент = Неопределено, 
		Дата = Неопределено, 
		СтрВремя = "", 
		Описание = Неопределено) Экспорт
	
	тзКлючи = ПрочитатьИзРегистраСохраненныеНастройки(МобиС,"СписокКПК");
	Если тзКлючи = Неопределено Тогда
		ЧислоКлючей = 0;
	Иначе
		ЧислоКлючей = тзКлючи.Количество();
	КонецЕсли;
	СисИнфо = Новый СистемнаяИнформация;
	
	Заголовок = 
		"Информация о клиенте
		|Организация: " + ТехПоддержкаОрганизация + "
		|Контактное лицо: " + ТехПоддержкаКонтактноеЛицо + "
		|Телефон: " + ТехПоддержкаТелефон + "
		|Почта: " + ТехПоддержкаПочта + "
		|Логин в личный кабинет: " + ТехПоддержкаЛогинНаСайте + "
	  	|Количество ключей: " + ЦелоеВСтроку(ЧислоКлючей) + "/" + ЦелоеВСтроку(КоличествоOnLineКлючей()) + "
		|
      	|Информация о компьютере
		|Версия ОС: " + СисИнфо.ВерсияОС + "
		|Процессор: " + СисИнфо.Процессор + "
		|Оперативная память: " + ЦелоеВСтроку(СисИнфо.ОперативнаяПамять) + "
		|
		|Информация о конфигурации 1С
		|Релиз 1С: " + СисИнфо.ВерсияПриложения + "
		|Исполняемый файл 1С:Предприятия: " + ПараметрЗапуска + "
		|Конфигурация: " + Метаданные.Синоним+" (" +Метаданные.Версия+")
		|Тип базы: " + ?(Лев(СтрокаСоединенияИнформационнойБазы(), 4) = "File", "Файловая", "Серверная") + "
		|Доработки конфигурации: " + ?(ТехПоддержкаКонфигурацияИзменена, "Да", "Нет") + "
		|
		|Информация о Моби-С
		|Версия обработки: " + ВерсияОбработки + "
		|Редакция Моби-С: " + ВерсияДистрибутива + "
		|Доработка Моби-С: " + ?(ТехПоддержкаМодульИнтеграцииИзменен, "Да", "Нет") + "
		|Порт: " + ЦелоеВСтроку(Порт) + "
		|Осн.каталог программы: " + КаталогЛогФайлов + "
		|Обработка: " + ПолучитьРасположениеОбработки() + "
		|";
	Если (НЕ Агент = Неопределено)
		 ИЛИ (НЕ Дата = Неопределено)
		 ИЛИ (НЕ Описание = Неопределено) Тогда
		Заголовок = Заголовок + "
	      	|Информация о проблеме"
			+ ?(Агент = Неопределено, 
					"", 
					"
					|Агент: " + Агент + "
					|Код агента: " + Агент.ФизЛицо.Код)
			+ ?(Дата = Неопределено, 
					"", 
					"
					|Дата: " + Формат(Дата, "ДФ=dd.MM.yy") + " время " + СтрВремя)
			+ ?(Описание = Неопределено, 
					"", 
					"
					|" + Описание) + "
			|";
	КонецЕсли;		
	Если (Не Агент = Неопределено) Тогда
		Заголовок = Заголовок + "
			|Настройки агента
			|Агент: " + Агент + "
			|Префикс настроек: " + РССохраненныеНастройкиИмяОбъекта + "
			|";
		ПараметрыАгента = ПолучитьВсеНастройкиАгента(Агент.ФизЛицо.Код);	
		Если НЕ ПараметрыАгента = Неопределено Тогда	
			для каждого стр из ПараметрыАгента Цикл
				Заголовок = Заголовок + стр.Ключ + ": " + ПолучитьРасшифровкуНастройки(стр.Значение) + РазделительСтрок;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
	Заголовок = Заголовок + "
		|Содержимое каталога Моби-С
		|";
	СодержимоеКаталога = НайтиФайлы(КаталогЛогФайлов, "*.*");
	для каждого стр из СодержимоеКаталога Цикл
		Заголовок = Заголовок + стр.Имя + РазделительСтрок;
	КонецЦикла;
	
    возврат Заголовок;
КонецФункции // ЗаголовокПисьма()

//функция добавляет <файл> в архив <архив>
//возвращает Истина если <файл> существует, иначе ложь
функция ДобавитьФайлВАрхив(архив, добавляемыйФайл)
	тестФайл = новый Файл(добавляемыйФайл);
	Если тестФайл.Существует() Тогда
		Попытка
			архив.Добавить(добавляемыйФайл)
		Исключение
		КонецПопытки;
		возврат Истина;
	КонецЕсли;
	Возврат Ложь;	
КонецФункции
	
//функция формирует список файлов для включения в письмо для техподдержки
функция ЛогФайлыПоУмолчанию(Агент, Дата) Экспорт
	ИмяАхрива = ПолучитьКаталог("Logs")
		+ "\attachments_" + Формат(Дата, "ДФ=yyyyMMdd") + "_" + Формат(ТекущаяДата(), "ДФ=HHmmss") + ".zip";
	архив = новый ЗаписьZipФайла(ИмяАхрива);
	архивНеПустой = Ложь;
	
	//добавляем лог-файлы с КПК агента
	ИмяЛогФайла = ПолучитьКаталог("Logs")
		+ "\ErrorLog_"+СокрЛП(УдалитьЗапрещенныеСимволыИмени(Агент.ФизЛицо.Код))+".txt";
	архивНеПустой = ДобавитьФайлВАрхив(архив, ИмяЛогФайла) ИЛИ архивНеПустой;
	
	//добавляем лог файлы обмена с 1С
	ИмяЛогФайла=ПолучитьКаталог("Logs")+"\PS_"+Формат(Дата - 24 * 60 * 60,"ДФ=гггг-ММ-дд")+".txt";
	архивНеПустой = ДобавитьФайлВАрхив(архив, ИмяЛогФайла) ИЛИ архивНеПустой;
	ИмяЛогФайла=ПолучитьКаталог("Logs")+"\PS_"+Формат(Дата,"ДФ=гггг-ММ-дд")+".txt";
	архивНеПустой = ДобавитьФайлВАрхив(архив, ИмяЛогФайла) ИЛИ архивНеПустой;
	ИмяЛогФайла=ПолучитьКаталог("Logs")+"\PS_"+Формат(Дата + 24 * 60 * 60,"ДФ=гггг-ММ-дд")+".txt";
	архивНеПустой = ДобавитьФайлВАрхив(архив, ИмяЛогФайла) ИЛИ архивНеПустой;	
	
	//добавляем GPS Трек агента
	ИмяGPSФайла=ПолучитьКаталог("Agents\"+СокрЛП(Агент.ФизЛицо.Код)+"\GPS")
		+ "\GPS_"+СокрЛП(Формат(Дата,"ДФ=""ггггММдд"""))+".txt";
	архивНеПустой = ДобавитьФайлВАрхив(архив, ИмяGPSФайла) ИЛИ архивНеПустой;	

	Если архивНеПустой Тогда
		архив.Записать();
		Возврат ИмяАхрива;
	Иначе
		архив = Неопределено;
		Возврат "";
	КонецЕсли;
КонецФункции

//функция создает письмо в техподдержку
//Агент - агент, при работе с которым возникли проблемы, Тема - тема письма, Сообщение - текст сообщения, Файлы - строка со списком файлов вложений в письмо
Функция СоздатьСообщениеВТехподдержку(Тема, Сообщение, Файлы) Экспорт
	Анализатор = Новый ЗаписьXML;
	Анализатор.ОткрытьФайл(КаталогЛогФайлов + "\email.xml", "UTF-8");
	Анализатор.ЗаписатьОбъявлениеXML();
   	Анализатор.ЗаписатьНачалоЭлемента("EMail");
		Анализатор.ЗаписатьНачалоЭлемента("Subject");
		Анализатор.ЗаписатьТекст(Тема);
		Анализатор.ЗаписатьКонецЭлемента();
		
		Анализатор.ЗаписатьНачалоЭлемента("Content");
		Анализатор.ЗаписатьТекст(УбратьСпецСимволы(Сообщение));
		Анализатор.ЗаписатьКонецЭлемента();

		Анализатор.ЗаписатьНачалоЭлемента("Attachment");
		Анализатор.ЗаписатьТекст(Файлы);
		Анализатор.ЗаписатьКонецЭлемента();
    Анализатор.ЗаписатьКонецЭлемента();
	Анализатор.Закрыть();
КонецФункции	

// функция распаковывает служебный файл обработки в указанный каталог
// Параметры
//	Путь - Строка, каталог назначения в которые необходимо поместить недостающий файл
//	ИмяФайла - Строка, имя необходимого файла
// Результат
//	Булево, результат операции распаковки файла
//
Функция РаспаковатьФайл(Путь,ИмяФайла,ИмяАрхива = Неопределено)
	СтатусВозврата=Ложь;	
	Попытка
		Архив = Неопределено;
		Если ИмяАрхива = Неопределено Тогда 
			Макет=ПолучитьМакет("МакетФайлы");
			ИмяАрхиваTemp=ПолучитьИмяВременногоФайла(".zip");
			Макет.Записать(ИмяАрхиваTemp);
			Архив=Новый ЧтениеZipФайла(ИмяАрхиваTemp);
		Иначе
			Архив=Новый ЧтениеZipФайла(ИмяАрхива);
		КонецЕсли;
		ЭлемФайл=Архив.Элементы.Найти(ИмяФайла);
		Если ЭлемФайл<>Неопределено Тогда
			Архив.Извлечь(ЭлемФайл,Путь,РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
			СтатусВозврата=Истина;
		КонецЕсли;
		Если ИмяАрхива = Неопределено Тогда 
			Архив.Закрыть();
			УдалитьФайлы(ИмяАрхиваTemp);
		КонецЕсли;
	Исключение
		//Сообщить(ОписаниеОшибки());
	КонецПопытки;		
	Возврат СтатусВозврата;
КонецФункции

// Функция проверяет наличие файлов в заданной папке
// Параметры:
//		Путь - строка с название каталога в котором проверяется наличие файлов-
// 		ПереченьИспользуемыхФайлов - строка с именами файлов, разделёнными символом \
// Возвращаемое значение:
//		Истина - все файлы присутствуют
//		Ложь - чего-то не хватает
Функция ПроверитьНаличиеФайлов(Путь,ПереченьИспользуемыхФайлов, ПроверятьНаличиеФайла = Ложь) Экспорт
	ПереченьИспользуемыхФайлов = СтрЗаменить(ПереченьИспользуемыхФайлов,"\",РазделительСтрок);
	КоличествоФайлов = СтрЧислоСтрок(ПереченьИспользуемыхФайлов);
	Если КоличествоФайлов = 0 Тогда 
		Возврат Истина;
	КонецЕсли;
	//02.04.2014
	//добавлен параметр ПроверятьНаличиеФайла, если Истина то 
	//необходимо убедиться в отсутствии файла перед его распаковкой
	//актуально для FormEditor и emailer	
	ЕстьОшибки=Ложь;
	Если ПроверятьНаличиеФайла Тогда
		Для Н=1 По КоличествоФайлов Цикл
			ИмяФайла=нРег(СтрПолучитьСтроку(ПереченьИспользуемыхФайлов,Н));
			ПутьКФайлу = Путь +"\"+ ИмяФайла;
			
			Файл = Новый Файл(ПутьКФайлу);
			Если НЕ Файл.Существует() Тогда
				Если Не РаспаковатьФайл(Путь,ИмяФайла) Тогда
					Сообщить("Не найден файл "+ПутьКФайлу,СтатусСообщения.Внимание);
					ЕстьОшибки=Истина;
				КонецЕсли;
			Иначе
				существующиеФайлы = НайтиФайлы(Путь, ИмяФайла);
				Если существующиеФайлы.Количество() > 0 Тогда
					Если НЕ ИмяФайла = существующиеФайлы[0].Имя Тогда
						ПереместитьФайл(Путь +"\"+ файл.Имя, Путь +"\"+ файл.Имя+".tmp");
						ПереместитьФайл(Путь +"\"+ файл.Имя+".tmp", Путь +"\"+ ИмяФайла);
					КонецЕсли;
				КонецЕсли
			КонецЕсли;
		КонецЦикла;
	Иначе
		Макет=ПолучитьМакет("МакетФайлы");
		ИмяАрхива=ПолучитьИмяВременногоФайла(".zip");
		Макет.Записать(ИмяАрхива);
		Для Н=1 По КоличествоФайлов Цикл
			//21.03.2014
			//заменяем используемую ранее иконку на иконку из обработки
			ИмяФайла=нРег(СтрПолучитьСтроку(ПереченьИспользуемыхФайлов,Н));
			ПутьКФайлу = Путь +"\"+ ИмяФайла;
			
			Если Не РаспаковатьФайл(Путь,ИмяФайла,ИмяАрхива) Тогда
				Сообщить("Не найден файл "+ПутьКФайлу,СтатусСообщения.Внимание);
				ЕстьОшибки=Истина;
			КонецЕсли;
		КонецЦикла;
		УдалитьФайлы(ИмяАрхива);
	КонецЕсли;
	Если ЕстьОшибки Тогда
		Стр = "Отсутствуют некоторые, необходимые для работы, файлы." + Символы.ПС
			+ "Список файлов выведен в окно сообщений." + Символы.ПС
			+ "Обратитесь к вашему системному администратору.";
		Предупреждение(Стр);
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
КонецФункции

//функция проверяет наличие и корректность файлов приложения отправляющего сообщения в тех поддержку
функция ПроверитьEmailer() Экспорт
	//тк произошло изменение приложения отправляющего сообщения в службу поддержки
	Почтальон = КаталогЛогФайлов + "\Emailer.exe";
	ФайлПочтальон = Новый Файл(Почтальон);
	Если ФайлПочтальон.Существует() Тогда
		Если ФайлПочтальон.Размер() <> 125952 Тогда
			//необходимо обновить
			Попытка
				УдалитьФайлы(Почтальон);
			Исключение
				Сообщить(ОписаниеОшибки());
				Сообщить("Проверьте отсутствие процесса 'emailer.exe' в списке запущенных процессов в диспетчере задач.");				
			КонецПопытки
		КонецЕсли;
	КонецЕсли;	
	ПроверитьНаличиеФайлов(КаталогЛогФайлов,"libcurl.dll\Emailer.exe", Истина);
КонецФункции

//функция открывает файл помощи на указанном разделе, либо сообщает об отсутствии файла справки
Процедура ОткрытьСправкуМобиС(Раздел) Экспорт
	//Если Найти(КаталогЛогФайлов,"\\")<>0 Тогда //сетевой каталог файлы  .chm по сети НЕ всегда открываются 
	//	файлПомощь =КаталогВременныхФайлов()+"Mobi-C.chm"; //перенесем файл с помощью во временный каталог пользователя
	//	Если НЕ СуществуетФайл(файлПомощь) Тогда //если нет 
	//		файлСеть =КаталогЛогФайлов+"\Mobi-C.chm";
	//		Если СуществуетФайл(файлСеть) Тогда
	//			КопироватьФайл(файлСеть,файлПомощь);
	//		КонецЕсли; 
	//	КонецЕсли; 
	//Иначе
	//	файлПомощь = КаталогЛогФайлов + "\Mobi-C.chm";
	//КонецЕсли; 
	//Если СуществуетФайл(файлПомощь) Тогда
	//	Попытка
	//		ЗапуститьПриложение("HH """+файлПомощь+"::/"+Раздел+".htm""");
	//	Исключение
	//		ОткрытьСправку();
	//	КонецПопытки	
	//Иначе
	//	Сообщить("Не найден внешний файл-помощь "+файлПомощь);
	//	ОткрытьСправку();
	//КонецЕсли;
	Если СуществуетФайл(КаталогЛогФайлов+"\Mobi-C.chm") Тогда
		ЗапуститьПриложение("HH """+КаталогЛогФайлов+"\Mobi-C.chm::/"+Раздел+".htm""");
	Иначе
		а=1/0; // вызовем ошибку
	КонецЕсли;

КонецПроцедуры

// Выполняет поиск фотографий товаров и клиентов
// Параметры:
// 		ДатаНачала - начальная дата и время
// 		ДатаКонца - конечная дата и время
// 		МассивАгентов - массив агентов, по которым выполняется поиск фотографий
// Возвращаемое значение:
// 		Таблица значений с колонками:
//		Агент - ссылка на элемент справочника Пользователи, автор фото
//		Объект - ссылка на элемент справочника Номенклатуры или Контрагентов
// 		Дата - дата и время создания фото по времени из часов КПК
// 		Путь - путь к файлу фото
// 		Широта - географическая широта места, где сделано фото
// 		Долгота - географическая долгота места, где сделано фото
Функция ПолучитьФотографии(ДатаНачала, ДатаКонца, МассивАгентов, МассивРазрешенныхКонтаргентов = Неопределено, ЧасовойПояс = 99) Экспорт
	ТаблФото=Новый ТаблицаЗначений;
	ТаблФото.Колонки.Добавить("Агент",Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблФото.Колонки.Добавить("Объект");
	ТаблФото.Колонки.Добавить("Дата",Новый ОписаниеТипов("Дата"));
	ТаблФото.Колонки.Добавить("Путь",Новый ОписаниеТипов("Строка"));
	ТаблФото.Колонки.Добавить("Широта",Новый ОписаниеТипов("Число"));
	ТаблФото.Колонки.Добавить("Долгота",Новый ОписаниеТипов("Число"));
	ТаблФото.Колонки.Добавить("Ориентация",Новый ОписаниеТипов("Число"));
	ТаблФото.Колонки.Добавить("Корректность",Новый ОписаниеТипов("Булево"));
	ТаблФото.Колонки.Добавить("Время",Новый ОписаниеТипов("Дата"));
	ТаблФото.Колонки.Добавить("Ошибка",Новый ОписаниеТипов("Строка"));
	ТаблФото.Колонки.Добавить("Комментарий",Новый ОписаниеТипов("Строка"));
	
	КэшОбъектов=Новый Соответствие;
	//КэшАгентов=Новый Соответствие;
	
	БД = ОткрытьВнешнююБД(Ложь);
	Если БД = Ложь Тогда
		Предупреждение("Не удалось получить данные файла mobi_s.mdb, проверьте лог ошибок!", 10);
		Возврат ТаблФото;
	КонецЕсли;
	
	Для Каждого ТекАгент Из МассивАгентов Цикл
		Файлы=НайтиФайлы(КаталогЛогФайлов+"\Agents\"+СокрЛП(ТекАгент.ФизЛицо.Код)+"\Photo\Clients","*.jpg");
		Для Каждого Файл Из Файлы Цикл
			ОбработкаПрерыванияПользователя();
			Если Файл.ЭтоКаталог() Тогда Продолжить; КонецЕсли;
			
			Комп=СтрЗаменить(Файл.ИмяБезРасширения,"_",Символы.ПС);
			Если СтрЧислоСтрок(Комп) >= 5 Тогда
				Попытка
					ДатаФайла=ДатаИзИмениФайлаДатаВремя(СтрПолучитьСтроку(Комп,2), СтрПолучитьСтроку(Комп,3));
					Если ЗначениеЗаполнено(ДатаНачала) Тогда
						Если ДатаФайла<ДатаНачала Тогда 
							Продолжить; 
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(ДатаКонца) Тогда
						Если ДатаФайла>ДатаКонца Тогда 
							Продолжить; 
						КонецЕсли;
					КонецЕсли;
					КодОбъекта=СтрПолучитьСтроку(Комп,4);
					Объект=КэшОбъектов.Получить(КодОбъекта);
					Если Объект=Неопределено Тогда
						Объект=Справочники.Контрагенты.НайтиПоКоду(КодОбъекта);
						
						Если МассивРазрешенныхКонтаргентов = Неопределено Тогда
						Иначе
							Если МассивРазрешенныхКонтаргентов.Найти(Объект) = Неопределено Тогда
								//фотографии этотго клиента не интересны, смотрим дальше
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						
						Если Объект<>Неопределено Тогда
							КэшОбъектов.Вставить(КодОбъекта,Объект);
						КонецЕсли;
					КонецЕсли;
					Если Объект=Неопределено Тогда 
						Продолжить; 
					КонецЕсли;
					Если Объект.Пустая() Тогда 
						Продолжить; 
					КонецЕсли;
				
					ИмяФайлаФото = Файл.ПолноеИмя;
					СтрФото=ТаблФото.Добавить();					
					СтрФото.Агент=ТекАгент;
					СтрФото.Объект=Объект;
					СтрФото.Дата=ДатаФайла;
					СтрФото.Путь=ИмяФайлаФото;
					СтрФото.Широта=0;					
					СтрФото.Долгота=0;					
					СтрФото.Ориентация = 0;					
					СтрФото.Время = ДатаФайла;										
					
					Попытка
						ДатаВремяФото = ДатаПустая();
						
						СтрФото.Корректность = ПроверитьМетаданныеФото(
						ПолучитьМетаданныеФото(БД, ИмяФайлаФото),	//метаданные фотографии которые необходимо проанализировать
						ЧасовойПояс,							//часовой пояс (из настроек) агента который сделал фото
						ДатаФайла,								//дата файла с фото из имени файла
						Объект,						//ссылка на объект который соответствует фотографии
						Ложь,						//применимо только для контрагентов, если истина то фотография анализируется как фотография нового клиента
						КодОбъекта,					//код объекта, передаваемый из учетной системы в КПК
						0,							//географическая широта объекта (для контрагентов)
						0,							//географическая долгота объекта (для контрагентов)
						0,							//максимальное расстояние для засчитывания посещения контрагента 
						Ложь, 
						СтрФото.Ошибка, 			//текстовое описание результата проверки метаданных
						,							//контрагент, у которого была выполнена фотография товара
						СтрФото.Комментарий, 		//комментарий к фото, указанный агентом при съемке
						стрФото.Ориентация,			//ориентация фото, для автоповорота изображения в журнале
						стрФото.Широта,				//географическая широта в которой была сделана фотография (из метаданных)
						стрФото.Долгота,			//географическая долгота в которой была сделана фотография (из метаданных)
						ДатаВремяФото,				//дата и время когда было сделано фото (из метаданных)
						);
						Если ЗначениеЗаполнено(ДатаВремяФото) Тогда
							СтрФото.Дата = ДатаВремяФото;
							СтрФото.Время = ДатаВремяФото;
						КонецЕсли;
						
					Исключение
						СтрФото.ТекстОшибки = "Неизвестная ошибка";
						СтрФото.Корректность=Ложь;
					КонецПопытки;
					
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблФото;
КонецФункции

//сравнивает 2 строки формата X.Y.Z (номера версий)
//1 - первая новее (больше)
//0 - версии равны
//-1 - вторая новее
Функция СравнитьВерсии(Стр1, Стр2, РазделительПодверсий = ".")
	с1 = СтрЗаменить(Стр1, РазделительПодверсий, Символы.ПС);
	с2 = СтрЗаменить(Стр2, РазделительПодверсий, Символы.ПС);
	минСтрок = Мин(СтрЧислоСтрок(с1), СтрЧислоСтрок(с2)) + 1;
	результат = 0;
	й = 1;
	н1 = 0;
	н2 = 0;
	Пока й < минСтрок Цикл
		н1 = Число(СтрПолучитьСтроку(с1, й));
		н2 = Число(СтрПолучитьСтроку(с2, й));
		Если н1 > н2 Тогда
			Возврат 1;
		ИначеЕсли н1 < н2 Тогда
			Возврат -1;
		КонецЕсли;
		й = й + 1;
	КонецЦикла;
	Если СтрЧислоСтрок(с1) = СтрЧислоСтрок(с2) Тогда
		Возврат 0;
	ИначеЕсли СтрЧислоСтрок(с1) > СтрЧислоСтрок(с2) Тогда
		Возврат 1;
	Иначе
		Возврат -1;
	КонецЕсли
КонецФункции

//функция возвращает таблицу с настройками колонок документов для отображения на КПК
//если ПоУмолчанию - то будут возвращены настройки колонок документов по умолчанию
//иначе настройки будут прочитаны из базы данных 1С, а если прочитать настройки не удалось
//то будут возвращены настройки по умолчанию
Функция ПолучитьНастройкиКолонокДокументов(ПоУмолчанию = Ложь) Экспорт
	
	Если Не ПоУмолчанию Тогда
		Табл=ПрочитатьИзРегистраСохраненныеНастройки(МобиС,"НастройкиКолонокДокументов");
		Если Табл<>Неопределено Тогда
			Если Табл.Найти(19, "Документ")=Неопределено Тогда
				НовСтр=Табл.Добавить();
				НовСтр.Документ=19;
				НовСтр.Ячейка=2;
				НовСтр.Заголовок="";
				НовСтр.Значение="<Заполнен>";
				НовСтр.Цвет=16777215;
			КонецЕсли;
			Возврат Табл;
		КонецЕсли;		
	КонецЕсли;
		
	Табл=Новый ТаблицаЗначений();
	Табл.Колонки.Добавить("Документ",Новый ОписаниеТипов("Число"));
	Табл.Колонки.Добавить("Ячейка",Новый ОписаниеТипов("Число"));
	Табл.Колонки.Добавить("Заголовок",Новый ОписаниеТипов("Строка"));
	Табл.Колонки.Добавить("Значение",Новый ОписаниеТипов("Строка"));
	Табл.Колонки.Добавить("Цвет",Новый ОписаниеТипов("Число"));
	
	НовСтр=Табл.Добавить();
	НовСтр.Документ=12;
	НовСтр.Ячейка=1;
	НовСтр.Заголовок="";
	НовСтр.Значение="<История продаж>";
	НовСтр.Цвет=45056;
	НовСтр=Табл.Добавить();
	НовСтр.Документ=12;
	НовСтр.Ячейка=2;
	НовСтр.Заголовок="";
	НовСтр.Значение="<Цена>";
	НовСтр.Цвет=16739584;
	//НовСтр.Цвет=16766720;
	НовСтр=Табл.Добавить();
	НовСтр.Документ=12;
	НовСтр.Ячейка=3;
	НовСтр.Заголовок="";
	НовСтр.Значение="<Наличие>";
	НовСтр.Цвет=16777215;
	НовСтр=Табл.Добавить();
	НовСтр.Документ=12;
	НовСтр.Ячейка=4;
	НовСтр.Заголовок="";
	НовСтр.Значение="<Кол-во+Бонус> <Ед>";
	НовСтр.Цвет=2003199;
	НовСтр=Табл.Добавить();
	НовСтр.Документ=12;
	НовСтр.Ячейка=5;
	НовСтр.Заголовок="=";
	НовСтр.Значение="<Сумма>";
	НовСтр.Цвет=16739584;
	//НовСтр.Цвет=16766720;
	НовСтр=Табл.Добавить();
	НовСтр.Документ=12;
	НовСтр.Ячейка=7;
	НовСтр.Заголовок="Мерч";
	НовСтр.Значение="<Остаток в точке> | <Фэйсинг>";
	НовСтр.Цвет=2003199;
	
	НовСтр=Табл.Добавить();
	НовСтр.Документ=14;
	НовСтр.Ячейка=1;
	НовСтр.Заголовок="";
	НовСтр.Значение="<История продаж>";
	НовСтр.Цвет=45056;
	НовСтр=Табл.Добавить();
	НовСтр.Документ=14;
	НовСтр.Ячейка=2;
	НовСтр.Заголовок="";
	НовСтр.Значение="<Цена>";
	НовСтр.Цвет=16739584;
	//НовСтр.Цвет=16766720;
	НовСтр=Табл.Добавить();
	НовСтр.Документ=14;
	НовСтр.Ячейка=3;
	НовСтр.Заголовок="";
	НовСтр.Значение="<Наличие>";
	НовСтр.Цвет=16777215;
	НовСтр=Табл.Добавить();
	НовСтр.Документ=14;
	НовСтр.Ячейка=4;
	НовСтр.Заголовок="";
	НовСтр.Значение="<Кол-во+Бонус> <Ед>";
	НовСтр.Цвет=2003199;
	НовСтр=Табл.Добавить();
	НовСтр.Документ=14;
	НовСтр.Ячейка=5;
	НовСтр.Заголовок="=";
	НовСтр.Значение="<Сумма>";
	НовСтр.Цвет=16739584;
	//НовСтр.Цвет=16766720;
	НовСтр=Табл.Добавить();
	НовСтр.Документ=14;
	НовСтр.Ячейка=7;
	НовСтр.Заголовок="Мерч";
	НовСтр.Значение="<Остаток в точке> | <Фэйсинг>";
	НовСтр.Цвет=2003199;
		
	НовСтр=Табл.Добавить();
	НовСтр.Документ=16;
	НовСтр.Ячейка=2;
	НовСтр.Заголовок="";
	НовСтр.Значение="<Кол-во+Бонус> <Ед>";
	НовСтр.Цвет=2003199;
	НовСтр=Табл.Добавить();
	НовСтр.Документ=16;
	НовСтр.Ячейка=3;
	НовСтр.Заголовок="";
	НовСтр.Значение="<Цена>";
	НовСтр.Цвет=16739584;
	//НовСтр.Цвет=16766720;
	НовСтр=Табл.Добавить();
	НовСтр.Документ=16;
	НовСтр.Ячейка=5;
	НовСтр.Заголовок="Нал";
	НовСтр.Значение="<Наличие>";
	НовСтр.Цвет=16777215;
	НовСтр=Табл.Добавить();
	НовСтр.Документ=16;
	НовСтр.Ячейка=6;
	НовСтр.Заголовок="=";
	НовСтр.Значение="<Сумма>";
	НовСтр.Цвет=16739584;
	//НовСтр.Цвет=16766720;
	
	НовСтр=Табл.Добавить();
	НовСтр.Документ=37;
	НовСтр.Ячейка=2;
	НовСтр.Заголовок="";
	НовСтр.Значение="<Кол-во> <Ед>";
	НовСтр.Цвет=2003199;
	НовСтр=Табл.Добавить();
	НовСтр.Документ=37;
	НовСтр.Ячейка=3;
	НовСтр.Заголовок="";
	НовСтр.Значение="<Цена>";
	НовСтр.Цвет=16739584;
	//НовСтр.Цвет=16766720;
	НовСтр=Табл.Добавить();
	НовСтр.Документ=37;
	НовСтр.Ячейка=6;
	НовСтр.Заголовок="=";
	НовСтр.Значение="<Сумма>";
	НовСтр.Цвет=16739584;
	//НовСтр.Цвет=16766720;
	
	НовСтр=Табл.Добавить();
	НовСтр.Документ=19;
	НовСтр.Ячейка=2;
	НовСтр.Заголовок="";
	НовСтр.Значение="<Заполнен>";
	НовСтр.Цвет=16777215;
	
	Возврат Табл;
КонецФункции

// Для формирования имени файла Фото
функция ЗаменитьНедопустимыеСимволыВВерсииДанных(стрВерсияДанных) Экспорт
	Возврат СтрЗаменить(СтрЗаменить(стрВерсияДанных, "\", ")"), "/", "(");	
КонецФункции

// Функция работы с ВебЦветом   
Функция ЦветВЧисло(Цвет) Экспорт
	Если Цвет.Вид=ВидЦвета.WebЦвет Тогда
		Строки=СтрЗаменить(Строка(Цвет)," ",РазделительСтрок);
		резЦвет = Новый Цвет(255, 255, 255);
		Попытка
			резЦвет = ВебЦвета[СтрЗаменить(Сред(Строка(Цвет), Найти(Строка(Цвет),"(") + 1), ")", "")];
		Исключение
		КонецПопытки;
		Возврат резЦвет;
	ИначеЕсли Цвет.Вид=ВидЦвета.WindowsЦвет Тогда
		Возврат -1;
	ИначеЕсли Цвет.Вид=ВидЦвета.Абсолютный Тогда
		Возврат Цвет.Красный*256*256+Цвет.Зеленый*256+Цвет.Синий;
	ИначеЕсли Цвет.Вид=ВидЦвета.АвтоЦвет Тогда
		Возврат -1;
	ИначеЕсли Цвет.Вид=ВидЦвета.ЭлементСтиля Тогда
		Возврат -1;
	КонецЕсли;
	
	Возврат -1;
КонецФункции

//функция возвращает метаданные к фотографии, 
//если метаданные для файла (поиск по имени) найдены в базе данных ВнешняяБД
//тогда возвращаются метаданные хранимые в базе данных (при этом метаданные a файле уже могут измениться)
//если метаданные для файла (поиск по имени) не найдены в базе данных ВнешняяБД
//тогда метаданные считываются из файла и записываются во ВнешняяБД
Функция ПолучитьМетаданныеФото(ВнешняяБД, ПутьКФайлу) Экспорт
	ФайлФото=Новый Файл(ПутьКФайлу);
	Если НЕ ФайлФото.Существует() Тогда Возврат "Файл не найден"; КонецЕсли;
	
	Результат="";
	
	Команда=Новый COMОбъект("ADODB.Command");
	Команда.ActiveConnection=ВнешняяБД;
	Команда.CommandText="SELECT Metadata FROM PhotoMetadata WHERE FileName=?";
	Команда.Prepared=Истина;
	Команда.Parameters.Append(Команда.CreateParameter("FileName",8,1));
	Команда.Parameters.Item(0).Value=ФайлФото.Имя;
	НаборЗаписей=Команда.Execute();
	Если НЕ НаборЗаписей.EOF Тогда
		Результат=НаборЗаписей.Fields("Metadata").Value;
	КонецЕсли;
	НаборЗаписей.Close();
	
	Если СтрЧислоСтрок(Результат)<=1 Тогда
		МетаФото="";
		Попытка
			МетаФото=Сервер.МетаданныеФото(ПутьКФайлу);
		Исключение
			МетаФото="Неизвестная ошибка при обработке этого фото";
		КонецПопытки;
		Если (Результат<>МетаФото) И (СтрЧислоСтрок(МетаФото)>1) Тогда
			Результат=МетаФото;			
			//05.11.14
			//в базу можно заносить только корректные фотографии
			//если у файла повреждене цифровая подпись - то в базу заносить нельзя!
			//возможно файл просто недовыгрузился с КПК			
			Если СтрПолучитьСтроку(МетаФото, 5) = "Подпись корректна" Тогда
				Команда=Новый COMОбъект("ADODB.Command");
				Команда.ActiveConnection=ВнешняяБД;
				Команда.CommandText="INSERT INTO PhotoMetadata(FileName,Metadata) VALUES(?,?)";
				Команда.Prepared=Истина;
				Команда.Parameters.Append(Команда.CreateParameter("FileName",8,1));
				Команда.Parameters.Append(Команда.CreateParameter("Metadata",8,1));
				Команда.Parameters.Item(0).Value=ФайлФото.Имя;
				Команда.Parameters.Item(1).Value=МетаФото;
				Команда.Execute();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

//функция проверяет метаданные на соответствие объекту, 
//возвращает истина/ложь - корректна или некорректна фотография
//в Ошибка помещается текстовое описание почему фотография некорректна
//в КомментарийКФото помещается комментарий указанный агентом при сохранении фотографии
//в Ориентация помещается угол на который необходимо повернуть фотографий для отображения с нормальным поворотом
Функция ПроверитьМетаданныеФото(
	Метаданные,                   	//метаданные фотографии которые необходимо проанализировать
	ЧасовойПоясАгента,				//часовой пояс (из настроек) агента который сделал фото
	ДатаФайла,						//дата файла с фото из имени файла
	Объект, 						//ссылка на объект который соответствует фотографии
	ЭтоНовыйКлиент = Ложь,			//применимо только для контрагентов, если истина то фотография анализируется как фотография нового клиента
	ОбъектКод = "",						//код объекта, передаваемый из учетной системы в КПК
	ОбъектШирота = 0,				//географическая широта объекта (для контрагентов)
	ОбъектДолгота = 0,				//географическая долгота объекта (для контрагентов)
	РасстояниеДоОбъекта = 0,		//максимальное расстояние для засчитывания посещения контрагента 
	ВыполнятьПроверкуGPSДанныхФотографии = Истина, 
	Ошибка, 						//текстовое описание результата проверки метаданных
	КонтрагентФото = Неопределено,	//контрагент, у которого была выполнена фотография товара
	КомментарийФото = Неопределено, //комментарий к фото, указанный агентом при съемке
	ОриентацияФото = Неопределено,	//ориентация фото, для автоповорота изображения в журнале
	ШиротаФото = Неопределено,		//географическая широта в которой была сделана фотография (из метаданных)
	ДолготаФото = Неопределено,		//географическая долгота в которой была сделана фотография (из метаданных)
	ДатаВремяФото = Неопределено,	//дата и время когда было сделано фото (из метаданных)
	ЦифроваяПодписьФото = Неопределено) Экспорт	//Истина или Ложь - корректность цифровой подписи
	
	ФотоКорректно = Истина;
	Если СтрЧислоСтрок(Метаданные)=1 Тогда
		Ошибка = "Ошибка получения метаданных";
		ФотоКорректно = Ложь;
	Иначе
	
//корректность фотографии необходимо оценивать в зависимости от объекта к которому привязана данная фотография
//фотография может быть привязана к
//контрагенту
//новому контрагенту
//товару
//документу (включая задания)

		Широта = 0;
		Долгота = 0;
		ДатаВремя = ДатаПустая();
		
		Пока Истина Цикл
			Если КомментарийФото = Неопределено Тогда
			Иначе
				КомментарийФото = СтрПолучитьСтроку(Метаданные, 6);
			КонецЕсли;
			
			Если ОриентацияФото = Неопределено Тогда
			Иначе
				Поз=Найти(Метаданные, РазделительСтрок + "Ориентация: ");
				Если Поз>0 Тогда
					Ориент=Сред(Метаданные, Поз + 14);
					Ориент=СтрПолучитьСтроку(Ориент, 1);
					Попытка
						ОриентацияФото=Число(Ориент);
					Исключение
						ОриентацияФото = 0;
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
			Если ЦифроваяПодписьФото = Неопределено Тогда
			Иначе
				Подпись = СтрПолучитьСтроку(Метаданные, 5);
				Если Подпись <> "Подпись корректна" Тогда
					Ошибка = "Некорректная цифровая подпись. Фотография была изменена.";
					ФотоКорректно = Ложь;
					ЦифроваяПодписьФото = Ложь;
				Иначе
					ЦифроваяПодписьФото = Истина;
				КонецЕсли;
			КонецЕсли;
			
			ИдОбъекта = СтрПолучитьСтроку(Метаданные, 1);
			ТипКод = СтрЗаменить(ИдОбъекта, " ", Символы.ВК + Символы.ПС);
			Тип = СтрПолучитьСтроку(ТипКод, 1);
			
			Попытка
				Широта = Число(СтрПолучитьСтроку(Метаданные, 3));
				Долгота = Число(СтрПолучитьСтроку(Метаданные, 4));
				Если Широта=0 Или Долгота=0 Тогда
					Широта = 0;
					Долгота = 0;
					Если ВыполнятьПроверкуGPSДанныхФотографии Тогда
						Ошибка = "Нет GPS координат.";
						ФотоКорректно = Ложь;
					КонецЕсли;
				КонецЕсли;
			Исключение
				Широта = 0;
				Долгота = 0;
				Если ВыполнятьПроверкуGPSДанныхФотографии Тогда
					Ошибка = "Нет GPS координат.";
					ФотоКорректно = Ложь;
				КонецЕсли;
			КонецПопытки;			
			
			Если ВыполнятьПроверкуGPSДанныхФотографии Тогда 
				ДатаВремяМетаданных = СтрПолучитьСтроку(Метаданные, 2);
				Если СокрЛП(ДатаВремяМетаданных) = "" Тогда
					Ошибка = "GPS-время съёмки неизвестно.";
					ФотоКорректно = Ложь;
					//Прервать;
					ДатаВремя = ДатаФайла;
				Иначе
					ДатаФото = КонвертироватьUTCВремяВЛокальное(ДатаИзМетаданныхФотографии(ДатаВремяМетаданных), ЧасовойПоясАгента);
					Если НачалоДня(ДатаФото) <> НачалоДня(ДатаФайла) Тогда
						Ошибка = "GPS-дата другая: " + Формат(ДатаФото, "ДФ=dd.MM.yyyy") + ".";
						ФотоКорректно=Ложь;
						//Прервать;
					КонецЕсли;
					ДатаВремя = ДатаФото;
				КонецЕсли;				
			КонецЕсли;			
			
			Если ТипЗнч(Объект) = ТипЗнч(Справочники.Контрагенты.ПустаяСсылка()) Тогда
				//объект это контрагент
				Если (Тип = "1" И ЭтоНовыйКлиент = Ложь) ИЛИ (Тип = "29" И ЭтоНовыйКлиент = Истина)	Тогда
				Иначе
					Ошибка = "Это НЕ фотография клиента, фотография подменена.";
					ФотоКорректно = Ложь;
					Прервать;
				КонецЕсли;
				
				Если ЭтоНовыйКлиент = Ложь Тогда
					Код = СтрПолучитьСтроку(ТипКод, 2);
					Если СокрЛП(Код) <> ОбъектКод Тогда
						Ошибка = "Это фотография другого клиента.";
						ФотоКорректно = Ложь;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
				Если ВыполнятьПроверкуGPSДанныхФотографии Тогда
					Если ЭтоНовыйКлиент = Ложь Тогда
						Если ОбъектШирота = 0 ИЛИ ОбъектДолгота = 0 Тогда
							Ошибка = "Нет GPS координат объекта.";
						Иначе
							Если Широта = 0 ИЛИ Долгота = 0 Тогда
							//если известны координаты объекта и координаты фотографии, о можно посчитать расстояние	
							Иначе
								РасстояниеДоКлиента=РасстояниеМеждуДвумяТочками(Широта, Долгота, ОбъектШирота, ОбъектДолгота);
								Если РасстояниеДоКлиента > РасстояниеДоОбъекта Тогда
									Ошибка = "Это фото сделано на расстоянии " + Строка(Окр(РасстояниеДоКлиента)) + " метров.";
									ФотоКорректно = Ложь;
									Прервать;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Объект) = ТипЗнч(Справочники.Номенклатура.ПустаяСсылка()) Тогда
				//получаем контрагента у которого была сделана фотография
				КодКонтрагентаФото = СтрПолучитьСтроку(ТипКод, 3);
				
				Если ПустаяСтрока(КодКонтрагентаФото) ИЛИ КонтрагентФото = Неопределено Тогда
				Иначе
					КонтрагентФото = Справочники.Контрагенты.НайтиПоКоду(КодКонтрагентаФото);
				КонецЕсли;					
				
				//объект это номенклатура	
				Если Тип <> "4" Тогда
					Ошибка = "Это НЕ фотография товара, фотография подменена.";
					ФотоКорректно = Ложь;
					Прервать;
				КонецЕсли;
				
				Код=СтрПолучитьСтроку(ТипКод,2);
				Если СокрЛП(Код) <> ОбъектКод Тогда
					Ошибка = "Это фото другого товара.";
					ФотоКорректно = Ложь;
					Прервать;
				КонецЕсли;
				
			Иначе //эта фотография привязана к документу
								
			КонецЕсли;
			
			Прервать;
		КонецЦикла;

		Если ШиротаФото = Неопределено ИЛИ ДолготаФото = Неопределено Тогда
		Иначе
			ШиротаФото = Широта;
			ДолготаФото = Долгота;			
		КонецЕсли;
		
		Если ДатаВремяФото = Неопределено Тогда
		Иначе
			ДатаВремяФото = ДатаВремя;
		КонецЕсли;
		
	КонецЕсли;	
		
	Возврат ФотоКорректно;
КонецФункции

//функция возвращает путь по которому произошел запуск обработки
//если обработка запущена через Файл->Открыть, то будет возвращено имя фала обработки
//если обработка встроена в конфигурацию то будет возвращена строка Конфигурация.Обработки.<имя обработки>
функция ПолучитьРасположениеОбработки() Экспорт
	Попытка
		Возврат ЭтотОбъект.ИспользуемоеИмяФайла;
	Исключение
		Возврат "Конфигурация.Обработки." + ЭтотОбъект.Метаданные().Имя;
	КонецПопытки;
КонецФункции

//функция возвращает группу по умолчанию для задания, группа по умолчанию это группа
//название которой совпадает с названием задания
//стрЗадание - наименование задания
функция ПолучитьГруппуПоУмолчаниюДляЗадания(стрЗадание) Экспорт
	длинаНаименование = Метаданные.Справочники.ГруппыСобытий.ДлинаНаименования;
	Наименование = Лев("ТЗ_" + стрЗадание, длинаНаименование);	
	группа = Справочники.ГруппыСобытий.НайтиПоНаименованию(Наименование, Истина);
	Если группа.Пустая() Тогда
	//если не нашли группу подходящую к данному типу задания, 
	//тогда необходимо её создать
		группа = Справочники.ГруппыСобытий.СоздатьГруппу();
		группа.Наименование = Наименование;
		группа.ОписаниеСобытия = "Типовое " + ?(Лев(нРег(стрЗадание), 7) = "задание", "", "задание ") + стрЗадание;
		группа.Записать();
		группа = группа.Ссылка;
	КонецЕсли;
    Возврат группа;	
КонецФункции

Функция ПолучитьВремяВыполненияДляЗадания(стрЗадание) Экспорт	
	Если СтрЗадание = "Заказ" Тогда
		Возврат 15;
	ИначеЕсли СтрЗадание = "Реализация" Тогда
		Возврат 15;
	ИначеЕсли СтрЗадание = "ПКО" Тогда
		Возврат 5;
	ИначеЕсли СтрЗадание = "Покупка" Тогда
		Возврат 5;
	ИначеЕсли СтрЗадание = "Наличие и цены" Тогда
		Возврат 10;
	ИначеЕсли СтрЗадание = "Задание" Тогда
		Возврат 5;
	ИначеЕсли СтрЗадание = "Задание с фотоотчётом" Тогда
		Возврат 5;
	КонецЕсли;	
	Возврат 5;
КонецФункции

//функция возвращает список доступных типов заданий
//или список доступных агентам если на вход полуен массив агентов
Функция ПолучитьСписокТиповыхЗаданий() Экспорт
	СписокТиповыхЗаданий = новый СписокЗначений();
	
	ЗаданияПоАнкетам = новый Массив();
	удалитьЗаданияПоАнкетам = новый Массив();	
	ЭтоПервыйАгент = Истина;	
	
	СписокТиповыхЗаданий.Добавить("Заказ");
	СписокТиповыхЗаданий.Добавить("Реализация");
	СписокТиповыхЗаданий.Добавить("ПКО");
	СписокТиповыхЗаданий.Добавить("Покупка");
	СписокТиповыхЗаданий.Добавить("Наличие и цены");
		
	ТаблАнкеты = ПрочитатьАнкеты();	
	Для Каждого Стр Из ТаблАнкеты Цикл
		СписокТиповыхЗаданий.Добавить("Анкета " + Строка(Стр.ТиповаяАнкета));
	КонецЦикла;
			
	СписокТиповыхЗаданий.Добавить("Задание с фотоотчётом");
	СписокТиповыхЗаданий.Добавить("Задание");
	
	Возврат СписокТиповыхЗаданий;	
КонецФункции

//функция возвращает список доступных агенту типов заданий
//или список доступных агентам если на вход полуен массив агентов
Функция ПолучитьТаблицуЗаданийДоступныхАгенту(Агент) Экспорт
	Агенты = Неопределено;
	Если ТипЗнч(Агент) = ТипЗнч(Справочники.Пользователи.ПустаяСсылка()) Тогда 
		Агенты = новый Массив();
		Агенты.Добавить(Агент);
	Иначе
		Агенты = Агент;
	КонецЕсли;
	ТаблицаЗаданийДоступныхАгенту = новый ТаблицаЗначений();
	ТаблицаЗаданийДоступныхАгенту.Колонки.Добавить("Пометка",Новый ОписаниеТипов("Булево"));
	ТаблицаЗаданийДоступныхАгенту.Колонки.Добавить("Задание",Новый ОписаниеТипов("Строка"));
	ТаблицаЗаданийДоступныхАгенту.Колонки.Добавить("Группа",Новый ОписаниеТипов("СправочникСсылка.ГруппыСобытий"));
	ТаблицаЗаданийДоступныхАгенту.Колонки.Добавить("Описание",Новый ОписаниеТипов("Строка"));
	ТаблицаЗаданийДоступныхАгенту.Колонки.Добавить("ВремяПосещения",Новый ОписаниеТипов("Дата"));
	ТаблицаЗаданийДоступныхАгенту.Колонки.Добавить("Срок",Новый ОписаниеТипов("Число"));
	ТаблицаЗаданийДоступныхАгенту.Колонки.Добавить("ВремяВыполнения",Новый ОписаниеТипов("Число"));
	ТаблицаЗаданийДоступныхАгенту.Колонки.Добавить("Изображения",Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаЗаданийДоступныхАгенту.Колонки.Добавить("Выполнено",Новый ОписаниеТипов("Булево"));
	ТаблицаЗаданийДоступныхАгенту.Колонки.Добавить("Ссылка",Новый ОписаниеТипов("ДокументСсылка.Событие"));	
	ЗаданияПоАнкетам = новый Массив();
	удалитьЗаданияПоАнкетам = новый Массив();	
	ЭтоПервыйАгент = Истина;	
	РазрешитьЗаявку = Истина;	
	РазрешитьПродажу = Истина;	
	РазрешитьПКО = Истина;
	РазрешитьПокупку = Истина;	
	РазрешитьИнвентаризацию = Истина;			
	РазрешитьАнкету = Истина;			
	для каждого мАгент из Агенты Цикл
		РазрешитьЗаявку = РазрешитьЗаявку 
			И ПолучитьНастройку(мАгент,"РазрешитьЗаявку",Истина);
		РазрешитьПродажу = РазрешитьПродажу 
			И ПолучитьНастройку(мАгент,"РазрешитьПродажу",Истина);
		РазрешитьПКО = РазрешитьПКО 
			И ПолучитьНастройку(мАгент,"РазрешитьПКО",Истина);
		РазрешитьПокупку = РазрешитьПокупку 
			И ПолучитьНастройку(мАгент,"РазрешитьПокупку",Истина);
		РазрешитьИнвентаризацию = РазрешитьИнвентаризацию 
			И ПолучитьНастройку(мАгент,"РазрешитьИнвентаризацию",Истина);		
		РазрешитьАнкету = РазрешитьАнкету	
			И ПолучитьНастройку(мАгент,"ИспользоватьМерчендайзинг",Истина);
		Если РазрешитьАнкету И (ЭтоПервыйАгент ИЛИ ЗаданияПоАнкетам.Количество() > 0) Тогда 
			ТаблАнкеты=ПрочитатьАнкетыАгента(мАгент);
			Список = ПрочитатьИзРегистраСохраненныеНастройки(мАгент,"ФиксАнкетыАгента");
			Если ТипЗнч(Список)=Тип("СписокЗначений") Тогда
				Для Каждого Элем Из Список Цикл
					НовСтр=ТаблАнкеты.Добавить();
					НовСтр.Анкета=Элем.Значение;
				КонецЦикла;
			КонецЕсли;
			ТаблАнкеты.Свернуть("Анкета");
			ТаблАнкеты.Сортировать("Анкета");			
			Если ЭтоПервыйАгент Тогда 
				Для каждого стр из ТаблАнкеты Цикл
					ЗаданияПоАнкетам.Добавить(стр.Анкета);
				КонецЦикла;
				ЭтоПервыйАгент = Ложь;
			Иначе
				удалитьЗаданияПоАнкетам.Очистить(); 
				
				Для Каждого Стр Из ЗаданияПоАнкетам Цикл
					стрАнкета = ТаблАнкеты.Найти(стр, "Анкета");
					Если стрАнкета = Неопределено Тогда
						удалитьЗаданияПоАнкетам.Добавить(стр);
					Иначе
						ТаблАнкеты.Удалить(стрАнкета);
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого стр из удалитьЗаданияПоАнкетам Цикл
					ЗаданияПоАнкетам.Удалить(ЗаданияПоАнкетам.Найти(стр));
				КонецЦикла;
				
			КонецЕсли;						
		КонецЕсли;	
	КонецЦикла;
			
	Если РазрешитьЗаявку Тогда 
		НовСтр=ТаблицаЗаданийДоступныхАгенту.Добавить();
		НовСтр.Задание="Заказ";
	КонецЕсли;
	Если РазрешитьПродажу Тогда 
		НовСтр=ТаблицаЗаданийДоступныхАгенту.Добавить();
		НовСтр.Задание="Реализация";
	КонецЕсли;
	Если РазрешитьПКО Тогда 
		НовСтр=ТаблицаЗаданийДоступныхАгенту.Добавить();
		НовСтр.Задание="ПКО";
	КонецЕсли;
	Если РазрешитьПокупку Тогда 
		НовСтр=ТаблицаЗаданийДоступныхАгенту.Добавить();
		НовСтр.Задание="Покупка";
	КонецЕсли;
	Если РазрешитьИнвентаризацию Тогда 
		НовСтр=ТаблицаЗаданийДоступныхАгенту.Добавить();
		НовСтр.Задание="Наличие и цены";
	КонецЕсли;
	
	ТаблЗнач = ПрочитатьАнкеты();
	РазрешенныеАнкеты = новый СписокЗначений();
	РазрешенныеАнкеты.Очистить();
	Для каждого стр из ТаблЗнач Цикл
		Если стр.Пометка Тогда
			РазрешенныеАнкеты.Добавить(стр.ТиповаяАнкета);
		КонецЕсли;
	КонецЦикла;		
	
	Если РазрешитьАнкету Тогда 
		Для Каждого Стр Из ЗаданияПоАнкетам Цикл
			Если РазрешенныеАнкеты.НайтиПоЗначению(Стр)	= Неопределено Тогда
			Иначе
				НовСтр=ТаблицаЗаданийДоступныхАгенту.Добавить();
				НовСтр.Задание="Анкета "+Строка(Стр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	НовСтр=ТаблицаЗаданийДоступныхАгенту.Добавить();
	НовСтр.Задание="Задание с фотоотчётом";
	//НовСтр.ВремяВыполнения=5;
	НовСтр=ТаблицаЗаданийДоступныхАгенту.Добавить();
	НовСтр.Задание="Задание";
	//НовСтр.ВремяВыполнения=5;
	
	//для каждого стр из ТаблицаЗаданийДоступныхАгенту Цикл
	//	стр.группа = ПолучитьГруппуПоумолчаниюДляЗадания(стр.Задание);
	//КонецЦикла;
	
	для каждого стр из ТаблицаЗаданийДоступныхАгенту цикл
		стр.ВремяВыполнения = ПолучитьВремяВыполненияДляЗадания(стр.Задание);
		стр.Срок = 0;
	КонецЦикла;
	
	Возврат ТаблицаЗаданийДоступныхАгенту;	
КонецФункции

Функция ПолучитьСписокПользователейДляРежимСервера() Экспорт
	МобиСПользователиСервер=ПрочитатьИзРегистраСохраненныеНастройки(МобиС,"ПользователиСервер");
	Если МобиСПользователиСервер = Неопределено Тогда
		МобиСПользователиСервер = новый ТаблицаЗначений();
		МобиСПользователиСервер.Колонки.Добавить("Пользователь");
		ПользовательСервер=ПрочитатьИзРегистраСохраненныеНастройки(МобиС,"ПользовательСервер");
		Если ЗначениеЗаполнено(ПользовательСервер) Тогда
			МобиСПользователиСервер.Добавить().Пользователь = ПользовательСервер;
		КонецЕсли;
	КонецЕсли;
	Возврат МобиСПользователиСервер;	
КонецФункции

//функция возвращает список доступных агенту типов заданий
//или список доступных агентам если на вход полуен массив агентов
Функция ПолучитьСписокВременНачалаЗаданияАгенту(Агент, АгентВыгрузки = Неопределено) Экспорт
	Агенты = Неопределено;
	Если ТипЗнч(Агент) = ТипЗнч(Справочники.Пользователи.ПустаяСсылка()) Тогда 
		Агенты = новый Массив();
		Агенты.Добавить(Агент);
	Иначе
		Агенты = Агент;
	КонецЕсли;
	
	НачалоРабочегоДня = Дата("00010101000000");
	КонецРабочегоДня = Дата("00010101235959");
	
	для каждого мАгент из Агенты Цикл
		нрд = ПолучитьНастройку(мАгент, "НачалоРабочегоДня", Дата("00010101090000"));
		крд = ПолучитьНастройку(мАгент,"КонецРабочегоДня", Дата("00010101180000"));		
		НачалоРабочегоДня = Макс(НачалоРабочегоДня, нрд);
		КонецРабочегоДня = Мин(КонецРабочегоДня, крд);				
	КонецЦикла;
			
	СписокВремен = новый СписокЗначений();
	
	Если НачалоРабочегоДня >= КонецРабочегоДня Тогда
		НачалоРабочегоДня = Дата("00010101090000");
		КонецРабочегоДня = Дата("00010101180000");
		ДобавитьВЛогФайл("Графики работы агентов не пересекаются! Использован стандартный рабочий период", АгентВыгрузки);
	КонецЕсли;
	
	СписокВремен.Добавить(НачалоРабочегоДня, Формат(НачалоРабочегоДня,"ДФ='ЧЧ:мм'"));
	Пока Истина Цикл
		НачалоРабочегоДня = НачалоРабочегоДня + 15 * 60;
		Если НачалоРабочегоДня >= КонецРабочегоДня Тогда
			Прервать;
		КонецЕсли;
        СписокВремен.Добавить(НачалоРабочегоДня, Формат(НачалоРабочегоДня,"ДФ='ЧЧ:мм'"));		
	КонецЦикла;
	
	Возврат СписокВремен;	
КонецФункции

// Обновляет сохраненные настройки отчета (КомпоновщикНастроек) по кнопке Восстановить значения
Процедура ОбновитьКомпоновщикНастроек(КомпоновщикНастроек, НастройкиКомпоновщика, СхемаКомпоновкиДанных) Экспорт
	Если НЕ ПустаяСтрока(НастройкиКомпоновщика) Тогда
		Попытка
			КомпоновщикНастроек.ЗагрузитьНастройки(ЗначениеИзСтрокиВнутр(НастройкиКомпоновщика));
		Исключение
			КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

// Из Процессора компоновки СКД выгружаем в ДеревоЗначений --> ТаблицаЗначений --> ФайлExcel
Процедура СохранитьОтчетНаСКДвФайлExcel(ПроцессорКомпоновки) Экспорт
	
	Дерево = Новый ДеревоЗначений;
	ТЗ = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Дерево);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	// Создаем колонки ТаблицыЗначений
	Для Каждого КолДер из Дерево.Колонки Цикл
		ТЗ.Колонки.Добавить(КолДер.Имя, КолДер.ТипЗначения, КолДер.Заголовок);
	КонецЦикла;
	СтрокиДереваВТаблицу(Дерево, ТЗ);
	СохранитьТаблицуВФайлExcel(ТЗ);

КонецПроцедуры

// Рекурсивная процедура для записи нужных строк дерева в ТаблицуЗначений
Процедура СтрокиДереваВТаблицу(СтрДер, ТЗ)

	Для Каждого Стр из СтрДер.Строки Цикл
		Если Стр.Строки.Количество() > 0 Тогда
			СтрокиДереваВТаблицу(Стр, ТЗ);
		Иначе 
			СтрТабл = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(СтрТабл, Стр);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Выбираем файл Excel и выгружаем в него ТаблицуЗначений
Процедура СохранитьТаблицуВФайлExcel(ТЗ) 
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Заголовок		= "Сохранение документа Excel";
	Диалог.Фильтр			= "Документ Excel (*.xls)|*.xls";
	Диалог.Расширение		= "xls";
	Диалог.Каталог = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойКаталогФайлов");	
	Если (Диалог.Выбрать()) И (Не ПустаяСтрока(Диалог.ПолноеИмяФайла)) Тогда
		ИмяФайла = Диалог.ПолноеИмяФайла;
		ФайлНаДиске = Новый Файл(ИмяФайла);
	Иначе 
		Возврат;
	КонецЕсли;
	
	Попытка
 		// Загрузка Microsoft Excel
	  //Состояние("Выгрузка данных из 1С в Microsoft Excel...");
 		ExcelПриложение = Новый COMОбъект("Excel.Application");
		Книга = ExcelПриложение.WorkBooks.Add();
		Лист = Книга.WorkSheets(1);
	Исключение
 		Сообщить("Ошибка при загрузке Microsoft Excel."	+ Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Внимание);
 		Возврат;
	КонецПопытки;
	
	Для Кол = 1 По ТЗ.Колонки.Количество() Цикл 
		Лист.Cells(1, Кол).Value = ТЗ.Колонки[Кол - 1].Заголовок;
	КонецЦикла;
			
	Попытка
		Для Стр = 0 По ТЗ.Количество()-1 Цикл
			Для Кол = 0 По ТЗ.Колонки.Количество()-1 Цикл
				
				Если ТипЗнч(ТЗ[Стр][Кол]) = Тип("Число") Тогда
					// Установним формат для типа Число
					//Лист.Cells(Стр + 2, Кол + 1).NumberFormat = "0,00";
					Лист.Cells(Стр + 2, Кол + 1).Value = ТЗ[Стр][Кол];
				Иначе 
					// Для всех других типов установим формат "Текстовый"
					Лист.Cells(Стр + 2, Кол + 1).NumberFormat = "@";
					Лист.Cells(Стр + 2, Кол + 1).Value = Строка(ТЗ[Стр][Кол]);
				КонецЕсли;
				
				Если ((Стр + 1) % 10) = 0 Тогда
					Состояние("Обработано " + (Стр + 1) + " из " + ТЗ.Количество());
				КонецЕсли;
				ОбработкаПрерыванияПользователя();
				
			КонецЦикла;
		КонецЦикла;
		
		ExcelПриложение.DisplayAlerts = False;
		Книга.SaveAs(ИмяФайла); 
		ExcelПриложение.ActiveWorkbook.Close();
 		ExcelПриложение.Quit();
		Сообщить("Файл выгружен успешно: "  + ИмяФайла);
		
	Исключение
		
		Сообщить("Ошибка записи данных файла :" + ИмяФайла);
		Сообщить(ОписаниеОшибки());
		Попытка
			ExcelПриложение.Quit();
		Исключение
		КонецПопытки;
		
	КонецПопытки;
	
КонецПроцедуры

//функция возвращает версию платформы в виде "8.1", "8.2" ...
функция ВерсияПлатформы() Экспорт
	СисИнфо=Новый  СистемнаяИнформация;
	Возврат Лев(СисИнфо.ВерсияПриложения,3);	
КонецФункции

Процедура ДобавитьОтборПоПолю(Отбор, Поле)
	ДобавитьОтбор = Истина;
	
	Если отбор.Количество() > 0 Тогда
		Для каждого элемент из отбор Цикл
			Если нРег(элемент.ПутьКДанным) = нРег(Поле) Тогда
				ДобавитьОтбор = Ложь;
				Прервать;
			КонецЕсли
		КонецЦикла;
	КонецЕсли;
	
	Если ДобавитьОтбор Тогда
		Отбор.Добавить(Поле);
	КонецЕсли;	
КонецПроцедуры

Процедура ДобавитьОтборПоУмолчанию(Отбор) Экспорт
	Для каждого полеОтбора из отбор.ДоступныеПоля Цикл	
		ДобавитьОтборПоПолю(Отбор.Отбор, полеОтбора.ПутьКДанным);
	КонецЦикла;	
КонецПроцедуры

//Работа с картой

// функция преобразует строку с именем файла в формат допустимый для скрипта (обработка символов '\' и '"')
// Параметры
//	Парам - строка с именем файла
// Результат - Преобразованная в требуемый формат строка
//
Функция ЗакодироватьДляСкрипта(Парам) Экспорт
	Возврат СтрЗаменить(СтрЗаменить(Парам,"\","\\"),"""","\""");
КонецФункции

Функция ПолучитьИмяДокумента(Ссылка, ОтображатьДату = Истина) Экспорт
	Результат = "";
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ИмяТипа = "";
		Если ТипЗнч(Ссылка) = ТипЗнч(Документы.Опрос.ПустаяСсылка()) Тогда
			ИмяТипа = "Анкета";
		ИначеЕсли ТипЗнч(Ссылка) = ТипЗнч(Документы.Событие.ПустаяСсылка()) Тогда
			ИмяТипа = Ссылка.ОписаниеСобытия;
			Если Лев(ИмяТипа, 7) = "Задание" Тогда
			Иначе
				ИмяТипа = "Задание " + ИмяТипа
			КонецЕсли;			
		Иначе
			ИмяТипа = Ссылка.Метаданные().Имя;			
		КонецЕсли;
		Результат = ИмяТипа + " №" + Ссылка.Номер +?(ОтображатьДату, " от " + Формат(Ссылка.Дата, "ДФ=dd.MM.yy"), "");
	КонецЕсли;
	Возврат Результат;
КонецФункции

//функция возвращает HTML код для отображения ссылки на документ в всплывающем окне
Функция ОбернутьСсылкуНаДокументВСсылку(Ссылка, ВСпискеКлиента = Ложь, ДатаСоздания = Неопределено)	Экспорт
	ТипДокумента = ТипЗнч(Ссылка);
	Если ТипДокумента = ТипЗнч(Документы.Событие.ПустаяСсылка()) Тогда
	//это задание
	//красный - задание отменено агентом
	//зеленый - задание выполнено
	//синий - задание назначено
		ИмяЗадания = Ссылка.ОписаниеСобытия;
		Если Лев(ИмяЗадания, 7) = "Задание" Тогда
		Иначе
			ИмяЗадания = "Задание " + ИмяЗадания
		КонецЕсли;			
		_Текст = ?(ДатаСоздания = Неопределено, 
			"", 
			Формат(ДатаСоздания, "ДФ=""ЧЧ:мм""") + "&nbsp;") 
			+ ИмяЗадания + ?(Ссылка.ГруппаСобытия.пустая(), "", ", " + Ссылка.ГруппаСобытия);
		ДокИД = "" + Ссылка.Метаданные().Имя + "_" + УникИдентификатор(Ссылка);
		Цвет = "";
		//23.10.14
		//Если Ссылка.СостояниеСобытия = Перечисления.СостоянияСобытий.Завершено Тогда
		////выполнено, подсвечиваем зеленым
		//	Цвет = "<font color=""#008000"">";
		//ИначеЕсли Ссылка.СостояниеСобытия = Перечисления.СостоянияСобытий.Отменено Тогда
		////не выполнено, подсвечиваем красным
		//	Цвет = "<font color=""#BC143C"">";
		//КонецЕсли;
		Если Ссылка.СостояниеСобытия = Перечисления.СостоянияСобытий.Запланировано Тогда
		//запланировано, не выполнено, подсвечиваем красным
			Цвет = "<font color=""#BC143C"">";
		Иначе
		//выполнено, подсвечиваем зеленым
			Цвет = "<font color=""#008000"">";
		КонецЕсли;
		
		Возврат 
			"<a href='#' id='" + ?(ВСпискеКлиента, "Client", "") + "OpenDoc_" + ДокИД + "' onclick='"
					+ "document.getElementById(""MobiOpenDocLink"").value = """ + ДокИД + """; "
					+ "document.getElementById(""MobiOpenDocBtn"").click(); "
					+ "return false;'>" 
				+ ?(Цвет = "", _Текст, Цвет + _Текст + "</font>")
			+ "</a>";		
		
	Иначе		
		_Текст = ?(ДатаСоздания = Неопределено, 
			"", 
			Формат(ДатаСоздания, "ДФ=""ЧЧ:мм""") + "&nbsp;") 
			+ ПолучитьИмяДокумента(Ссылка, Ложь);
		ДокИД = "" + Ссылка.Метаданные().Имя + "_" + УникИдентификатор(Ссылка);
		Возврат 
			"<a href='#' id='" + ?(ВСпискеКлиента, "Client", "") + "OpenDoc_" + ДокИД + "' onclick='"
					+ "document.getElementById(""MobiOpenDocLink"").value = """ + ДокИД + """; "
					+ "document.getElementById(""MobiOpenDocBtn"").click(); "
					+ "return false;'>" 
				+ _Текст 
			+ "</a>";
	КонецЕсли;
КонецФункции

//функция возвращает HTML код для отображения ссылки на документ в всплывающем окне
Функция ОбернутьСсылкуНаСправочникВСсылку(Ссылка, ВСпискеКлиента = Ложь, ДатаСоздания = Неопределено, Постфикс = "") Экспорт
	_Текст = ?(ДатаСоздания = Неопределено, 
		"", 
		Формат(ДатаСоздания, "ДФ=""ЧЧ:мм""") + " ") 
		+ Ссылка.наименование 
		+ Постфикс;
	СпрИД = "" + Ссылка.Метаданные().Имя + "_" + УникИдентификатор(Ссылка);
	Возврат 
		"<a href='#' id='" + ?(ВСпискеКлиента, "Client", "") + "OpenRef_" + СпрИД + "' onclick='"
				+ "document.getElementById(""MobiOpenRefLink"").value = """ + СпрИД + """; "
				+ "document.getElementById(""MobiOpenRefBtn"").click(); "
				+ "return false;'>" 
			+ "<font color=""#000080""><b>" + _Текст + "</b></font>" 
		+ "</a>";
КонецФункции

//функция возвращает HTML код для отображения ссылки на документ в всплывающем окне
Функция ОбернутьФотографию(ИмяФайла, Текст, ИД, ТолькоСсылка, Ориентация, корректность) Экспорт
	Если ТолькоСсылка Тогда	
		Возврат	
		"<a id='OpenPhoto_" + Формат(ИД, "ЧГ=0") + "' href='#' onclick='"
				+ "document.getElementById(""" + "MobiOpenPhoto" + """).value = """ + ЗакодироватьДляСкрипта(ИмяФайла) + """; "
				+ "document.getElementById(""" + "MobiOpenPhotoBtn" + """).click(); "
				+ "return false;'>" 
			+ Текст + " Фото"
		+ "</a>";
	Иначе
		Возврат
		"<div style='float: left;'>"
			+ "<a id='OpenPhoto_" + Формат(ИД, "ЧГ=0") + "' href='#' onclick='"
					+ "document.getElementById(""" + "MobiOpenPhoto" + """).value = """ + ЗакодироватьДляСкрипта(ИмяФайла) + """; "
					+ "document.getElementById(""" + "MobiOpenPhotoBtn" + """).click(); "
					+ "return false;'>"				
				+ "<img height=64px class='photoThumb" + ?(корректность, "", "Error") + " rotate" + ЦелоеВСтроку(360 - Ориентация) + "'  src='file:///" + ИмяФайла + "'>"
				//+ ?(Ориентация = 90 или Ориентация = 270, "<br><br>", "")
				+ "<br><br>"
				+ "<left>" + Текст + "</left>"	
			+ "</a>"
		+ "</div>";
	КонецЕсли;		
КонецФункции

Процедура СформироватьСтруктуруТаблицыМаркеров(Маркеры) Экспорт
	Маркеры.Колонки.Очистить();
	Маркеры.Колонки.Добавить("Заголовок",Новый ОписаниеТипов("Строка"));
	Маркеры.Колонки.Добавить("Иконка",Новый ОписаниеТипов("Строка"));
	Маркеры.Колонки.Добавить("Широта",Новый ОписаниеТипов("Число"));
	Маркеры.Колонки.Добавить("Долгота",Новый ОписаниеТипов("Число"));
	Маркеры.Колонки.Добавить("ЗаголовокСписка",Новый ОписаниеТипов("Строка"));
	Маркеры.Колонки.Добавить("ВремяМаркера",Новый ОписаниеТипов("Дата"));
КонецПроцедуры

//процедура просматривает список маркеров для отображения на карте, если находит маркер такого-же типа (Иконка)
//в тех же координатах (Широта, Долгота) то дописывает найденному маркеру новый текст, иначе создает новый маркер
Процедура ДобавитьМаркер(
	    Маркеры,
		Иконка, 
		Широта, 
		Долгота, 
		Заголовок, 
		ЗаголовокСписка, 
		ВремяМаркера, 
		Префикс = "", 
		СНовойСтроки = Истина) Экспорт
	Если Широта = 0 И Долгота = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ИскомаяШирота = 0;
	ИскомаяДолгота = 0;	
	//если добавляем иконку клиента, то	
	//пытаемся найти маркер этого же типа, в этих же координатах
	Если Иконка = ИконкаКлиентПосещенный 
			Или Иконка = ИконкаКлиентНеПосещенный Тогда	
		ИскомаяШирота = Широта;
		ИскомаяДолгота = Долгота;
	Иначе		
	//иначе добавляем маркер документа или фотографии, и их необходимо группировать
		запрос = новый Запрос();
		запрос.Текст = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ(Маркеры.Иконка КАК СТРОКА(30)) КАК Иконка,
			|	Маркеры.Широта КАК Широта,
			|	Маркеры.Долгота КАК Долгота
			|ПОМЕСТИТЬ МаркерыВРадиусе
			|ИЗ
			|	&Маркеры КАК Маркеры
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Маркеры.Иконка КАК Иконка,
			|	Маркеры.Широта КАК Широта,
			|	Маркеры.Долгота КАК Долгота
			|ИЗ
			|	МаркерыВРадиусе КАК Маркеры
			|ГДЕ
			|	Маркеры.Иконка ПОДОБНО """ + Иконка + " %""
			|	И Маркеры.Широта - 0.0005 < &Широта
			|	И &Широта < Маркеры.Широта + 0.0005
			|	И Маркеры.Долгота - 0.0005 < &Долгота
			|	И &Долгота < Маркеры.Долгота + 0.0005";
			
		//1 градус долготы ~111 км, точность 0.0005 ~ 55м
		//1 градус широты максимум ~111км (экватор), точность 0.0005 ~ 55м
			
		запрос.УстановитьПараметр("Маркеры", Маркеры);
		запрос.УстановитьПараметр("Широта", Окр(Широта, 8));
		запрос.УстановитьПараметр("Долгота", Окр(Долгота, 8));
		найденныеМаркеры = запрос.Выполнить().Выгрузить();
		
		Если найденныеМаркеры.Количество() > 0 Тогда
			ИскомаяШирота = найденныеМаркеры[0].Широта;
			ИскомаяДолгота = найденныеМаркеры[0].Долгота;
		КонецЕсли;	
	КонецЕсли;
	
	ИмеющиесяМаркеры = Маркеры.НайтиСтроки(новый Структура(
		"Иконка, Широта, Долгота", нРег(Иконка), Окр(ИскомаяШирота, 8), Окр(ИскомаяДолгота, 8)));
	Если ИмеющиесяМаркеры.Количество() > 0 Тогда
		ИмеющиесяМаркеры[0].Заголовок = ИмеющиесяМаркеры[0].Заголовок + ?(СНовойСтроки, "<br/>", "") + Заголовок;
		ИмеющиесяМаркеры[0].ЗаголовокСписка = ИмеющиесяМаркеры[0].ЗаголовокСписка + "<br/>" + ЗаголовокСписка;		
		Возврат;
	КонецЕсли;
		
	//добавляем новый маркер
	маркер = Маркеры.Добавить();
	маркер.Иконка = нРег(Иконка);
	маркер.Широта = Окр(Широта, 8);
	маркер.Долгота = Окр(Долгота, 8);
	маркер.Заголовок = "" + ?(Не ПустаяСтрока(Префикс), Префикс + ":<br/>", "") + Заголовок;
	маркер.ЗаголовокСписка = ЗаголовокСписка;
	маркер.ВремяМаркера = ВремяМаркера;	
КонецПроцедуры

//функция возвращает таблицу с документами сформированными агентом за день
функция ПолучитьДокументы(Агент, ДатаТрека, НачалоРаботы, КонецРаботы, ОтображатьДокументы = "Все", спКонтрагенты = Неопределено) Экспорт
	массивКонтрагентов = Неопределено;	
	Если ТипЗнч(спКонтрагенты) = ТипЗнч(Справочники.Контрагенты.ПустаяСсылка()) Тогда
		массивКонтрагентов = новый Массив;
		массивКонтрагентов.Добавить(спКонтрагенты);
	ИначеЕсли ТипЗнч(спКонтрагенты) = ТипЗнч(новый СписокЗначений) Тогда
		массивКонтрагентов = спКонтрагенты.выгрузитьЗначения();
	КонецЕсли;	
	
	ЗапросДокументы = Новый запрос();
	
	Если Истина Тогда
		ЗапросДокументы.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Объект
		|ПОМЕСТИТЬ ДокументыЗаДень
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = &ДатаСоздания
		|	И НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК ДАТА), ДЕНЬ) = &Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Документ.Ссылка КАК Ссылка,
		|	Документ.Дата КАК Дата,
		|	Документ.Номер КАК Номер,
		|	" + ?(СпособОрганизацииТТ = 0 И СоответствиеКонтрагента = 1, 
				"ВЫБОР
				|	КОГДА Документ.Сделка ССЫЛКА Документ.ЗаказПокупателя" + ?(Конфигурация = "Комплексная" ИЛИ Конфигурация = "Молокозавод", "", "
				|			ИЛИ Документ.Сделка ССЫЛКА Документ.РеализацияТоваровУслуг") + "
				|		ТОГДА ВЫБОР
				|				КОГДА Документ.Сделка.Грузополучатель = &ПустойКонтрагент
				|					ТОГДА Документ.Контрагент
				|				ИНАЧЕ ЕСТЬNULL(Документ.Сделка.Грузополучатель, Документ.Контрагент)
				|			КОНЕЦ
				|	ИНАЧЕ Документ.Контрагент
				|КОНЕЦ",
				"Документ.Контрагент") + " КАК Контрагент, 
		|	Документ.Проведен КАК Проведен,
		|	ЛОЖЬ КАК ИгнорироватьПроведение
		|ПОМЕСТИТЬ Документы
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК Документ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыЗаДень КАК ДокументыЗаДень
		|		ПО Документ.Ссылка = ДокументыЗаДень.Объект
		|ГДЕ
		|	Документ.Ответственный = &Ответственный
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Документ.Ссылка,
		|	Документ.Дата,
		|	Документ.Номер,
		|	Документ." + ?(СпособОрганизацииТТ = 0 И СоответствиеКонтрагента = 1, "Грузополучатель", "Контрагент") + ",
		|	Документ.Проведен,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.ЗаказПокупателя КАК Документ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыЗаДень КАК ДокументыЗаДень
		|		ПО Документ.Ссылка = ДокументыЗаДень.Объект
		|ГДЕ
		|	Документ.Ответственный = &Ответственный
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Документ.Ссылка,
		|	Документ.Дата,
		|	Документ.Номер,
		|	Документ.ОпрашиваемоеЛицо,
		|	ЛОЖЬ,
		|	ИСТИНА
		|ИЗ
		|	Документ.Опрос КАК Документ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыЗаДень КАК ДокументыЗаДень
		|		ПО Документ.Ссылка = ДокументыЗаДень.Объект
		|ГДЕ
		|	Документ.Ответственный = &Ответственный
		|	И Документ.ОпрашиваемоеЛицо ССЫЛКА Справочник.Контрагенты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Документ.Ссылка,
		|	Документ.Дата,
		|	Документ.Номер,
		|	Документ." + ?(СпособОрганизацииТТ = 0 И СоответствиеКонтрагента = 1, "Грузоотправитель", "Контрагент") + ",
		|	Документ.Проведен,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК Документ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыЗаДень КАК ДокументыЗаДень
		|		ПО Документ.Ссылка = ДокументыЗаДень.Объект
		|ГДЕ
		|	Документ.Ответственный = &Ответственный
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Документ.Ссылка,
		|	Документ.Дата,
		|	Документ.Номер,
		|	Документ.Контрагент,
		|	Документ.Проведен,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК Документ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыЗаДень КАК ДокументыЗаДень
		|		ПО Документ.Ссылка = ДокументыЗаДень.Объект
		|ГДЕ
		|	Документ.Ответственный = &Ответственный
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Документ.Ссылка,
		|	Документ.Дата,
		|	Документ.Номер,
		|	Документ." + ?(СпособОрганизацииТТ = 0 И СоответствиеКонтрагента = 1, "Грузополучатель", "Контрагент") + ",
		|	Документ.Проведен,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК Документ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыЗаДень КАК ДокументыЗаДень
		|		ПО Документ.Ссылка = ДокументыЗаДень.Объект
		|ГДЕ
		|	Документ.Ответственный = &Ответственный
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Документ.Ссылка,
		|	Документ.Дата,
		|	Документ.Номер,
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
		|	Документ.Проведен,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.ЧекККМ КАК Документ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыЗаДень КАК ДокументыЗаДень
		|		ПО Документ.Ссылка = ДокументыЗаДень.Объект
		|ГДЕ
		|	Документ.Ответственный = &Ответственный
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Документ.Ссылка,
		|	Документ.Дата,
		|	Документ.Номер,
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
		|	ЛОЖЬ,
		|	ИСТИНА
		|ИЗ
		|	Документ.ИнвентаризацияТоваровНаСкладе КАК Документ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыЗаДень КАК ДокументыЗаДень
		|		ПО Документ.Ссылка = ДокументыЗаДень.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствДокументаУнКод
		|		ПО (ЗначенияСвойствДокументаУнКод.Объект = Документ.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектовСобытия
		|		ПО (ЗначенияСвойствОбъектовСобытия.Свойство = ЗначенияСвойствДокументаУнКод.Свойство)
		|			И (ЗначенияСвойствОбъектовСобытия.Значение = ЗначенияСвойствДокументаУнКод.Значение)
		|			И (ЗначенияСвойствОбъектовСобытия.Объект <> Документ.Ссылка)
		|ГДЕ
		|	ЗначенияСвойствДокументаУнКод.Свойство = &УникКодДокумента
		|	И Документ.Ответственный = &Ответственный
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Документ.Ссылка,
		|	Документ.Дата,
		|	Документ.Номер,
		|	Документ.Контрагент,
		|	Документ.Проведен,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.УстановкаЦенНоменклатурыКонтрагентов КАК Документ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыЗаДень КАК ДокументыЗаДень
		|		ПО Документ.Ссылка = ДокументыЗаДень.Объект
		|ГДЕ
		|	Документ.Ответственный = &Ответственный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДокументСобытие.Ссылка КАК Ссылка,
		|	МАКСИМУМ(ЗначенияСвойствОбъектовДокументы.Объект) КАК Документ,
		|	ДокументСобытие.Дата КАК Дата,
		|	ДокументСобытие.Номер КАК Номер,
		|	ДокументСобытие.Контрагент КАК Контрагент,
		|	ВЫБОР
		|		КОГДА ДокументСобытие.СостояниеСобытия = &Запланировано
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Запланировано
		|ПОМЕСТИТЬ События
		|ИЗ
		|	Документ.Событие КАК ДокументСобытие
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектовСобытия
		|		ПО ДокументСобытие.Ссылка = ЗначенияСвойствОбъектовСобытия.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектовДокументы
		|		ПО (ЗначенияСвойствОбъектовСобытия.Свойство = ЗначенияСвойствОбъектовДокументы.Свойство)
		|			И (ЗначенияСвойствОбъектовСобытия.Значение = ЗначенияСвойствОбъектовДокументы.Значение)
		|			И (ЗначенияСвойствОбъектовСобытия.Объект <> ЗначенияСвойствОбъектовДокументы.Объект)
		|			И (ЗначенияСвойствОбъектовСобытия.Свойство = &УникКодДокумента)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документы КАК Документ
		|		ПО (ЗначенияСвойствОбъектовДокументы.Объект = Документ.Ссылка)
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ДокументСобытие.НачалоСобытия, ДЕНЬ) <= НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
		|	И НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) <= КОНЕЦПЕРИОДА(ДокументСобытие.ОкончаниеСобытия, ДЕНЬ)
		|	И ДокументСобытие.Ответственный = &Ответственный
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументСобытие.Ссылка,
		|	ДокументСобытие.Дата,
		|	ДокументСобытие.Номер,
		|	ДокументСобытие.Контрагент,
		|	ВЫБОР
		|		КОГДА ДокументСобытие.СостояниеСобытия = &Запланировано
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументСобытие.Ссылка,
		|	NULL,
		|	ДокументСобытие.Дата,
		|	ДокументСобытие.Номер,
		|	ДокументСобытие.Контрагент,
		|	ИСТИНА
		|ИЗ
		|	Документ.Событие КАК ДокументСобытие
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ДокументСобытие.НачалоСобытия, ДЕНЬ) <= НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
		|	И НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) <= КОНЕЦПЕРИОДА(ДокументСобытие.ОкончаниеСобытия, ДЕНЬ)
		|	И ДокументСобытие.Ответственный = &Ответственный
		|	И ДокументСобытие.СостояниеСобытия = &Запланировано
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	NULL КАК Событие,
		|	ДокументыЗаДень.Ссылка КАК Документ,
		|	ДокументыЗаДень.Дата КАК Дата,
		|	ДокументыЗаДень.Номер КАК Номер,
		|	ДокументыЗаДень.Контрагент КАК Контрагент,
		|	ДокументыЗаДень.Проведен КАК Проведен,
		|	ДокументыЗаДень.ИгнорироватьПроведение КАК ИгнорироватьПроведение,
		|	ИСТИНА КАК ОтображатьНаКарте,
		|	ЛОЖЬ КАК Запланировано
		|ПОМЕСТИТЬ ДокументыИСобытия
		|ИЗ
		|	Документы КАК ДокументыЗаДень
		|		ЛЕВОЕ СОЕДИНЕНИЕ События КАК События
		|		ПО ДокументыЗаДень.Ссылка = События.Документ
		|ГДЕ
		|	ЕСТЬNULL(События.Документ, ИСТИНА) = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	События.Ссылка,
		|	События.Документ,
		|	События.Дата,
		|	События.Номер,
		|	События.Контрагент,
		|	ЛОЖЬ,
		|	ИСТИНА,
		|	(НЕ События.Запланировано),
		|	События.Запланировано
		|ИЗ
		|	События КАК События
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Документы.Событие КАК Событие,
		|	ЕСТЬNULL(Документы.Документ, Документы.Событие) КАК Ссылка,
		|	Документы.Контрагент КАК Контрагент,
		|	Документы.Дата КАК Дата,
		|	Документы.Номер КАК Номер,
		|	ЕСТЬNULL(ДокументУнКод.Значение, ЕСТЬNULL(СобытиеУнКод.Значение, НЕОПРЕДЕЛЕНО)) КАК Значение,
		|	ЕСТЬNULL(ДокументДатаСоздания.Значение, ЕСТЬNULL(СобытиеДатаСоздания.Значение, Документы.Дата)) КАК ДатаСоздания,
		|	ЕСТЬNULL(ДокументВремяРаботы.Значение, ЕСТЬNULL(СобытиеВремяРаботы.Значение, 0)) КАК ВремяРаботы,
		|	Документы.ОтображатьНаКарте КАК ОтображатьНаКарте,
		|	Документы.Запланировано КАК Запланировано,
		|	0 КАК ШиротаСоздан,
		|	0 КАК ДолготаСоздан,
		|	0 КАК ШиротаВыгружен,
		|	0 КАК ДолготаВыгружен
		|ИЗ
		|	ДокументыИСобытия КАК Документы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ДокументУнКод
		|		ПО Документы.Документ = ДокументУнКод.Объект
		|			И (ДокументУнКод.Свойство = &УникКодДокумента)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ДокументДатаСоздания
		|		ПО Документы.Документ = ДокументДатаСоздания.Объект
		|			И (ДокументДатаСоздания.Свойство = &ДатаСоздания)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ДокументВремяРаботы
		|		ПО Документы.Документ = ДокументВремяРаботы.Объект
		|			И (ДокументВремяРаботы.Свойство = &ВремяРаботы)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СобытиеУнКод
		|		ПО Документы.Событие = СобытиеУнКод.Объект
		|			И (СобытиеУнКод.Свойство = &УникКодДокумента)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СобытиеДатаСоздания
		|		ПО Документы.Событие = СобытиеДатаСоздания.Объект
		|			И (СобытиеДатаСоздания.Свойство = &ДатаСоздания)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СобытиеВремяРаботы
		|		ПО Документы.Событие = СобытиеВремяРаботы.Объект
		|			И (СобытиеВремяРаботы.Свойство = &ВремяРаботы)";
		
		УсловиеПоДокументам = "";
		Если ОтображатьДокументы = "Все" Тогда
		Иначе
			УсловиеПоДокументам = УсловиеПоДокументам
				+ "
				|	И (Документы.Проведен = " + ?(ОтображатьДокументы = "Проведенные", "Истина", "Ложь") + "
				|		ИЛИ Документы.ИгнорироватьПроведение = ИСТИНА)";
		КонецЕсли;
		
		Если массивКонтрагентов = Неопределено Тогда
		Иначе
			УсловиеПоДокументам = УсловиеПоДокументам
				+ "
				|	И (Документы.Контрагент В(&массивКонтрагентов))";
		КонецЕсли;
			
		Если УсловиеПоДокументам = "" Тогда
		Иначе
			ЗапросДокументы.Текст = ЗапросДокументы.Текст + "
			|ГДЕ ИСТИНА " 
			+ УсловиеПоДокументам;
		КонецЕсли;
		
	КонецЕсли;	
	
	ЗапросДокументы.УстановитьПараметр("ПустаяСтрока", "");	
	ЗапросДокументы.УстановитьПараметр("Дата", НачалоДня(ДатаТрека));
	ЗапросДокументы.УстановитьПараметр("Запланировано", Перечисления.СостоянияСобытий.Запланировано);
	ЗапросДокументы.УстановитьПараметр("Ответственный", Агент);
	ЗапросДокументы.УстановитьПараметр("массивКонтрагентов", массивКонтрагентов);
	ЗапросДокументы.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	ЗапросДокументы.УстановитьПараметр("ДатаСозданияДокумента", 
		ИнициализироватьСвойствоОбъекта(
			"Дата создания документа",
			Новый ОписаниеТипов("Дата"),
			ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы));
	ЗапросДокументы.УстановитьПараметр("УникКодДокумента", 
		ИнициализироватьСвойствоОбъекта(
			"Уник.код документа",
			Новый ОписаниеТипов("Строка"),
			ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы));
	ЗапросДокументы.УстановитьПараметр("ДатаСоздания", 
		ИнициализироватьСвойствоОбъекта(
			"Дата создания документа",
			Новый ОписаниеТипов("Дата"),
			ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы));
	ЗапросДокументы.УстановитьПараметр("ВремяРаботы", 
		ИнициализироватьСвойствоОбъекта(
			"Время затраченное на создание документа в КПК(мин)",
			Новый ОписаниеТипов("Число"),
			ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы));
			
	ДокументыЗаДату = ЗапросДокументы.Выполнить().Выгрузить();
	документыЗаРабочийДень = ДокументыЗаДату.СкопироватьКолонки();	
	датаДокумента = "";
	
	ЧасовойПояс=ПолучитьНастройку(Агент,"ЧасовойПояс",99);	
	
	Для каждого стр из ДокументыЗаДату Цикл
		//23.10.14
		//добавление невыполненных задание в карточку контрагента на треке
		Если ЗначениеЗаполнено(стр.Значение) Тогда
		//это или внеплановый документ или связка документ+задание или выполненное задание
			датаДокумента = ?(ЗначениеЗаполнено(стр.ДатаСоздания), 
				стр.ДатаСоздания, 
				//КонвертироватьUTCВремяВЛокальное(стр.ДатаСоздания, ЧасовойПояс), 
				ДатаИзСтрокиСКПК(Прав(стр.Значение, 19)));
			Если НачалоРаботы <= датаДокумента И датаДокумента <= КонецРаботы Тогда
				новСтр = документыЗаРабочийДень.Добавить();
				ЗаполнитьЗначенияСвойств(новСтр, стр);
				новСТр.ДатаСоздания = датаДокумента;
			КонецЕсли;		
		Иначе
		//это невыполненное плановое задание
			датаДокумента = стр.Событие.НачалоСобытия;
			Если (НачалоРаботы <= датаДокумента И датаДокумента <= КонецРаботы)
				ИЛИ стр.Запланировано Тогда
				новСтр = документыЗаРабочийДень.Добавить();
				ЗаполнитьЗначенияСвойств(новСтр, стр);
				//датой создания нельзя делать дату/время на которое назначено задание, тк оно не выполнено
				//и из-за этого может сбиться порядок посещений, для запланированных заданий
				//датой выполнения можно назначить время окончания рабочего дня тк 
				//это не повлияет на порядок посещений
				//новСТр.ДатаСоздания = датаДокумента;				
				новСТр.ДатаСоздания = КонецРаботы;				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	документыЗаРабочийДень.Сортировать("ДатаСоздания");
	
	Возврат документыЗаРабочийДень
КонецФункции

// Процедура возвращает данные по фактическому маршруту агента
// Параметры
//	Макет - МакетКомпоновкиДанных, содержащий все параметры отображаемого отчета
//	МассивАгентов - массив ссылок на элементы справочника Пользователи (Агентов), по которым строится отчет
//	ТаблФактМаршрутов - выходной параметр, таблица фактических длин и дат маршрутов агентов
//		содержит колонки
//			Агент - СправочникСсылка.Пользователи, посетивший контрагента
//			Дата - Дата и время посещения
//			ДлинаФакт - Число, длина сегмента маршрута в км
//	ТаблФактПорядок - выходной параметр, таблица фактического порядка посещений контрагентов агентами
//		содержит колонки
//			Агент - СправочникСсылка.Пользователи, посетивший контрагента
//			Дата - дата и время посещения
//			Контрагент - посещенный контрагент
//			ПорядокФакт - число, порядковый номер посещения	
//
Процедура ВыбратьФактМаршруты(МассивАгентов, ДатаНачала, ДатаКонца, ТаблФактМаршрутов = Неопределено, ТаблФактПорядок = Неопределено, ПоДокументам = Ложь) Экспорт
	ТаблФактМаршрутов=Новый ТаблицаЗначений;
	ТаблФактМаршрутов.Колонки.Добавить("Агент",Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблФактМаршрутов.Колонки.Добавить("Дата",Новый ОписаниеТипов("Дата"));
	ТаблФактМаршрутов.Колонки.Добавить("ДлинаФакт",Новый ОписаниеТипов("Число"));
	
	ЗапросДок=Новый Запрос;
	Если Истина Тогда
		ЗапросДок.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Объект КАК Объект,
		|	ЗначенияСвойствОбъектов.Значение КАК Дата
		|ПОМЕСТИТЬ ДокументыЗаДень
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = &ДатаСоздания
		|	И НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК ДАТА), ДЕНЬ) МЕЖДУ &ДатаНачала И &ДатаКонца
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ		
		|	ДокументыЗаДень.Дата КАК Дата,
		|	Документ.Ссылка КАК Документ,
		|	Документ.Ответственный КАК Ответственный,
		|	" + ?(СпособОрганизацииТТ = 0 И СоответствиеКонтрагента = 1, 
				"ВЫБОР
				|	КОГДА Документ.Сделка ССЫЛКА Документ.ЗаказПокупателя" + ?(Конфигурация = "Торговля", "
				|			ИЛИ Документ.Сделка ССЫЛКА Документ.РеализацияТоваровУслуг", "") + "
				|		ТОГДА ВЫБОР
				|				КОГДА Документ.Сделка.Грузополучатель = &ПустойКонтрагент
				|					ТОГДА Документ.Контрагент
				|				ИНАЧЕ ЕСТЬNULL(Документ.Сделка.Грузополучатель, Документ.Контрагент)
				|			КОНЕЦ
				|	ИНАЧЕ Документ.Контрагент
				|КОНЕЦ",
				"Документ.Контрагент") + " КАК Контрагент
		|ПОМЕСТИТЬ Документы
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК Документ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыЗаДень КАК ДокументыЗаДень
		|		ПО Документ.Ссылка = ДокументыЗаДень.Объект
		|ГДЕ
		|	Документ.Ответственный В(&Ответственные)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыЗаДень.Дата,
		|	Документ.Ссылка,
		|	Документ.Ответственный,
		|	Документ." + ?(СпособОрганизацииТТ = 0 И СоответствиеКонтрагента = 1, "Грузополучатель", "Контрагент") + "
		|ИЗ
		|	Документ.ЗаказПокупателя КАК Документ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыЗаДень КАК ДокументыЗаДень
		|		ПО Документ.Ссылка = ДокументыЗаДень.Объект
		|ГДЕ
		|	Документ.Ответственный В(&Ответственные)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыЗаДень.Дата,
		|	Документ.Ссылка,
		|	Документ.Ответственный,
		|	Документ.ОпрашиваемоеЛицо
		|ИЗ
		|	Документ.Опрос КАК Документ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыЗаДень КАК ДокументыЗаДень
		|		ПО Документ.Ссылка = ДокументыЗаДень.Объект
		|ГДЕ
		|	Документ.Ответственный В(&Ответственные)
		|	И Документ.ОпрашиваемоеЛицо ССЫЛКА Справочник.Контрагенты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыЗаДень.Дата,
		|	Документ.Ссылка,
		|	Документ.Ответственный,
		|	Документ." + ?(СпособОрганизацииТТ = 0 И СоответствиеКонтрагента = 1, "Грузоотправитель", "Контрагент") + "
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК Документ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыЗаДень КАК ДокументыЗаДень
		|		ПО Документ.Ссылка = ДокументыЗаДень.Объект
		|ГДЕ
		|	Документ.Ответственный В(&Ответственные)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыЗаДень.Дата,
		|	Документ.Ссылка,
		|	Документ.Ответственный,
		|	Документ.Контрагент
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК Документ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыЗаДень КАК ДокументыЗаДень
		|		ПО Документ.Ссылка = ДокументыЗаДень.Объект
		|ГДЕ
		|	Документ.Ответственный В(&Ответственные)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыЗаДень.Дата,
		|	Документ.Ссылка,
		|	Документ.Ответственный,
		|	Документ." + ?(СпособОрганизацииТТ = 0 И СоответствиеКонтрагента = 1, "Грузополучатель", "Контрагент") + "
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК Документ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыЗаДень КАК ДокументыЗаДень
		|		ПО Документ.Ссылка = ДокументыЗаДень.Объект
		|ГДЕ
		|	Документ.Ответственный В(&Ответственные)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыЗаДень.Дата,
		|	Документ.Ссылка,
		|	Документ.Ответственный,
		|	Документ.Контрагент
		|ИЗ
		|	Документ.УстановкаЦенНоменклатурыКонтрагентов КАК Документ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыЗаДень КАК ДокументыЗаДень
		|		ПО Документ.Ссылка = ДокументыЗаДень.Объект
		|ГДЕ
		|	Документ.Ответственный В(&Ответственные)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыЗаДень.Дата,
		|	Документ.Ссылка,
		|	Документ.Ответственный,
		|	Документ.Контрагент
		|ИЗ
		|	Документ.Событие КАК Документ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыЗаДень КАК ДокументыЗаДень
		|		ПО Документ.Ссылка = ДокументыЗаДень.Объект" + ?(ПоДокументам, "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ДокументУнКод
		|		ПО Документ.Ссылка = ДокументУнКод.Объект
		|			И (ДокументУнКод.Свойство = &УникКодДокумента)		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ДокументДокумент
		|		ПО (ДокументДокумент.Значение = ДокументУнКод.Значение)
		|			И (ДокументДокумент.Объект <> Документ.Ссылка)
		|			И (ДокументДокумент.Свойство = &УникКодДокумента)
		|			И НЕ (ДокументДокумент.Объект ССЫЛКА Документ.Событие)", "") + "		
		|ГДЕ
		|	Документ.Ответственный В(&Ответственные)
		|	И НЕ Документ.СостояниеСобытия = &Запланировано" + ?(ПоДокументам, "
		|   И ДокументДокумент.Объект ЕСТЬ NULL", "") + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Документы.Контрагент КАК Контрагент,
		|	Документы.Дата КАК Дата,
		|	Документ.Ответственный КАК Агент,
		|	ЕСТЬNULL(ДокументУнКод.Значение, НЕОПРЕДЕЛЕНО) КАК УникКодДок,
		|	ЕСТЬNULL(ДокументВремяРаботы.Значение, 0) КАК ВремяЗатраченное" + ?(ПоДокументам,",
		|	Документы.Документ КАК Документ,
		|	ЕСТЬNULL(ДокументЗадание.Объект, НЕОПРЕДЕЛЕНО) КАК Задание", "") + "
		|ИЗ
		|	Документы КАК Документы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ДокументУнКод
		|		ПО Документы.Документ = ДокументУнКод.Объект
		|			И (ДокументУнКод.Свойство = &УникКодДокумента)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ДокументВремяРаботы
		|		ПО Документы.Документ = ДокументВремяРаботы.Объект
		|			И (ДокументВремяРаботы.Свойство = &ВремяРаботы)" + ?(ПоДокументам, "				
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ДокументЗадание
		|		ПО (ДокументЗадание.Значение = ДокументУнКод.Значение)
		|			И (ДокументЗадание.Объект <> Документы.Документ)
		|			И (ДокументЗадание.Свойство = &УникКодДокумента)
		|			И (ДокументЗадание.Объект ССЫЛКА Документ.Событие)
		|			И НЕ(Документы.Документ ССЫЛКА Документ.Событие)", "");
	КонецЕсли;	
	
	ЗапросДок.Параметры.Вставить("Ответственные",МассивАгентов);
	ЗапросДок.Параметры.Вставить("Запланировано",Перечисления.СостоянияСобытий.Запланировано);
	ЗапросДок.Параметры.Вставить("ДатаНачала", ДатаНачала);
	ЗапросДок.Параметры.Вставить("ДатаКонца", ДатаКонца);
	ЗапросДок.Параметры.Вставить("УникКодДокумента", ПВХУникКодДокумента);
	ЗапросДок.Параметры.Вставить("ВремяРаботы", ПВХУВремяСозданияДокумента);
	ЗапросДок.Параметры.Вставить("ДатаСоздания", ПВХУДатаСозданияДокумента);
	ЗапросДок.Параметры.Вставить("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	ТаблДок=ЗапросДок.Выполнить().Выгрузить();
	ТаблДок.Колонки.Добавить("ВремяПосещенияФакт",Новый ОписаниеТипов("Дата"));
	ТаблДок.Колонки.Добавить("ВремяПребыванияФакт",Новый ОписаниеТипов("Число"));
	МассивНаУдаление=Новый Массив;
	ЧасовыеПоясаАгентов = Новый Соответствие();
	ЧасовойПояс = Неопределено;
	Для Каждого Стр Из ТаблДок Цикл
		ЧасовойПояс = ЧасовыеПоясаАгентов.Получить(стр.Агент);
		Если ЧасовойПояс = Неопределено Тогда
			ЧасовойПояс = ПолучитьНастройку(стр.Агент,"ЧасовойПояс",99);
			ЧасовыеПоясаАгентов.Вставить(стр.Агент, ЧасовойПояс);
		КонецЕсли;		
		ДатаКонца2 = ?(ЗначениеЗаполнено(стр.Дата), 
			стр.Дата,
			//КонвертироватьUTCВремяВЛокальное(стр.Дата, ЧасовойПояс), 
			ДатаИзСтрокиСКПК(Прав(Стр.УникКодДок,19)));
		Стр.ВремяПосещенияФакт=ДатаКонца2-Стр.ВремяПребыванияФакт*60;
		Стр.Дата=НачалоДня(Стр.ВремяПосещенияФакт);
		Если Стр.Дата>ДатаКонца2 Тогда
			МассивНаУдаление.Добавить(Стр);
			Продолжить;
		КонецЕсли;
		Стр.ВремяПосещенияФакт=ДатаИзДатаИВремя(ДатаПустая(), Стр.ВремяПосещенияФакт);
		Стр.ВремяПребыванияФакт=Число(Стр.ВремяЗатраченное);
	КонецЦикла;
	Для Каждого Стр Из МассивНаУдаление Цикл
		ТаблДок.Удалить(Стр);
	КонецЦикла;
	ТаблФото=ПолучитьФотографии(ДатаНачала, ДатаКонца, МассивАгентов);
	Для Каждого Стр Из ТаблФото Цикл
		Если ТипЗнч(Стр.Объект)<>Тип("СправочникСсылка.Контрагенты") Тогда Продолжить; КонецЕсли;
		
		НовСтр=ТаблДок.Добавить();
		НовСтр.Агент=Стр.Агент;
		НовСтр.Дата=НачалоДня(Стр.Дата);
		НовСтр.Контрагент=Стр.Объект;
		НовСтр.ВремяПосещенияФакт=ДатаИзДатаИВремя(ДатаПустая(), Стр.Дата);
		НовСтр.ВремяПребыванияФакт=1;
	КонецЦикла;
	
	ЗапросПорядок=Новый Запрос;
	ЗапросПорядок.Текст="
		|ВЫБРАТЬ *
		|ПОМЕСТИТЬ ТаблДок
		|ИЗ &ТаблДок КАК ВнешТабл;
		|
		|ВЫБРАТЬ Агент,Дата,Контрагент, " + ?(ПоДокументам, "Документ,Задание,", "") + "
		|	ВремяПосещенияФакт, РАЗНОСТЬДАТ(ВремяПосещенияФакт,ВремяВыхода,МИНУТА) КАК ВремяПребыванияФакт
		|ИЗ (
		|	ВЫБРАТЬ Агент,Дата,Контрагент," + ?(ПоДокументам, "Документ,Задание,", "") + "
		|		МИНИМУМ(ВремяПосещенияФакт) КАК ВремяПосещенияФакт,
		|		МАКСИМУМ(ДОБАВИТЬКДАТЕ(ВремяПосещенияФакт,МИНУТА,ВремяПребыванияФакт)) КАК ВремяВыхода
		|	ИЗ ТаблДок
		|	СГРУППИРОВАТЬ ПО Агент,Дата,Контрагент" + ?(ПоДокументам, ",Документ,Задание", "") + "
		|) КАК Подзапрос
		|УПОРЯДОЧИТЬ ПО Агент,Дата,ВремяПосещенияФакт
		|";
	ЗапросПорядок.Параметры.Вставить("ТаблДок",ТаблДок);
	ТаблФактПорядок=ЗапросПорядок.Выполнить().Выгрузить();
	ТаблФактПорядок.Колонки.Добавить("ПорядокФакт",Новый ОписаниеТипов("Число"));
	ТекАгент=Неопределено; ТекДата=Неопределено; Порядок=1;
	Для Каждого Стр Из ТаблФактПорядок Цикл
		Стр.ВремяПребыванияФакт=Стр.ВремяПребыванияФакт+5; //Задержка на войти-выйти
		Если (ТекАгент<>Стр.Агент) ИЛИ (ТекДата<>Стр.Дата) Тогда
			ТекАгент=Стр.Агент; ТекДата=Стр.Дата;
			Порядок=1;
		КонецЕсли;
		Стр.ПорядокФакт=Порядок;
		
		Порядок=Порядок+1;
	КонецЦикла;
	
	РасстояниеДоКонтрагента=200;
	ВремяПребыванияУКонтрагента=60;
	ТаблАгентов=ПолучитьТаблицуАгентов();
	Для Каждого Агент Из МассивАгентов Цикл
		Каталог=ПолучитьКаталог("Agents\"+СокрЛП(Агент.ФизЛицо.Код)+"\GPS");
		ДатаМаршрута=ДатаНачала;
		Пока ДатаМаршрута<=ДатаКонца Цикл
			ДлинаМаршрута=0;
			ПутьКФайлу=Каталог+"\GPS_"+Формат(ДатаМаршрута,"ДФ=yyyyMMdd")+".txt";
			Файл=Новый Файл(ПутьКФайлу);
			Если Файл.Существует() Тогда
				ДлинаМаршрута = ПолучитьДлинуМаршрутаАгента(Агент, ДатаМаршрута, ПутьКФайлу);
				Если ДлинаМаршрута>=50 Тогда
					НовСтр=ТаблФактМаршрутов.Добавить();
					НовСтр.Агент=Агент;
					НовСтр.Дата=ДатаМаршрута;
					НовСтр.ДлинаФакт=Окр(ДлинаМаршрута/1000, 1);
				КонецЕсли;
			КонецЕсли;
			
			ДатаМаршрута=НачалоДня(ДатаМаршрута+30*60*60);
		КонецЦикла;
	КонецЦикла;
Конецпроцедуры

// Процедура возвращает данные по фактическому маршруту агента
// Параметры
//	Макет - МакетКомпоновкиДанных, содержащий все параметры отображаемого отчета
//	МассивАгентов - массив ссылок на элементы справочника Пользователи (Агентов), по которым строится отчет
//	ТаблПланМаршрутов - выходной параметр, таблица плановых длин и дат маршрутов агентов
//		содержит колонки
//			Агент - СправочникСсылка.Пользователи, посетивший контрагента
//			Дата - Дата и время посещения
//			ДлинаПлан - Число, длина сегмента маршрута в км
//	ТаблПланПорядок - выходной параметр, таблица планового порядка посещений контрагентов агентами
//		содержит колонки
//			Агент - СправочникСсылка.Пользователи, посетивший контрагента
//			Дата - дата и время посещения
//			Контрагент - посещенный контрагент
//			ПорядокПлан - число, порядковый номер посещения	
//			ВремяПосещенияПлан - Дата и время планового посещения
//			ВремяПребыванияПлан - Число, плановое время пребывания у контрагента в минутах
//
Процедура ВыбратьПланМаршруты(МассивАгентов, ДатаНачала, ДатаКонца, ТаблПланМаршрутов = Неопределено, ТаблПланПорядок = Неопределено, Форма) Экспорт 
	ТаблПланМаршрутов=Новый ТаблицаЗначений;
	ТаблПланМаршрутов.Колонки.Добавить("Агент",Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблПланМаршрутов.Колонки.Добавить("Дата",Новый ОписаниеТипов("Дата"));
	ТаблПланМаршрутов.Колонки.Добавить("ДлинаПлан",Новый ОписаниеТипов("Число"));
	
	ТаблПланПорядок=Новый ТаблицаЗначений;
	ТаблПланПорядок.Колонки.Добавить("Агент",Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблПланПорядок.Колонки.Добавить("Дата",Новый ОписаниеТипов("Дата"));
	ТаблПланПорядок.Колонки.Добавить("Контрагент",Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблПланПорядок.Колонки.Добавить("ПорядокПлан",Новый ОписаниеТипов("Число"));
	ТаблПланПорядок.Колонки.Добавить("ВремяПосещенияПлан",Новый ОписаниеТипов("Дата"));
	ТаблПланПорядок.Колонки.Добавить("ВремяПребыванияПлан",Новый ОписаниеТипов("Число"));
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	Подзапрос.Агент КАК Агент,
	             |	НАЧАЛОПЕРИОДА(Подзапрос.Дата, ДЕНЬ) КАК Дата,
	             |	Подзапрос.НачалоСобытия КАК НачалоСобытия,
	             |	Подзапрос.Контрагент КАК Контрагент,
	             |	Подзапрос.ВремяВыполнения КАК ВремяВыполнения
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		События.Ответственный КАК Агент,
	             |		События.Дата КАК Дата,
	             |		События.Контрагент КАК Контрагент,
	             |		МИНИМУМ(События.НачалоСобытия) КАК НачалоСобытия,
	             |		СУММА(РАЗНОСТЬДАТ(События.НачалоСобытия, События.ОкончаниеСобытия, МИНУТА)) КАК ВремяВыполнения
	             |	ИЗ
	             |		Документ.Событие КАК События
	             |	ГДЕ
	             |		События.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
	             |		И (НЕ События.ПометкаУдаления)
	             |		И События.Ответственный В(&МассивАгентов)
	             |	
	             |	СГРУППИРОВАТЬ ПО
	             |		События.Ответственный,
	             |		События.Дата,
	             |		События.Контрагент) КАК Подзапрос
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Агент,
	             |	Дата,
	             |	НачалоСобытия,
	             |	Контрагент
	             |ИТОГИ
	             |	СУММА(ВремяВыполнения)
	             |ПО
	             |	Агент,
	             |	Дата,
	             |	НачалоСобытия,
	             |	Контрагент";
				 
	ТаблПуть=Новый ТаблицаЗначений;
	ТаблПуть.Колонки.Добавить("Контрагент",Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ПрокладкаМаршрутов=ПолучитьФорму("ПрокладкаМаршрутов",Форма);
	РасчетПутейБольшеНеЗапускать=Ложь;
	
	Запрос.Параметры.Вставить("ДатаНачала",ДатаНачала);
	Запрос.Параметры.Вставить("ДатаКонца",ДатаКонца);
	Запрос.Параметры.Вставить("МассивАгентов",МассивАгентов);
	ВыборкаАгентов=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Агент");
	Пока ВыборкаАгентов.Следующий() Цикл
		ВыборкаДат=ВыборкаАгентов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Дата");
		Пока ВыборкаДат.Следующий() Цикл
			ВыборкаСобытий=ВыборкаДат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"НачалоСобытия");
			Порядок=1;
			ТаблПуть.Очистить();
			Пока ВыборкаСобытий.Следующий() Цикл
				ВыборкаКонтрагентов=ВыборкаСобытий.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Контрагент");
				Пока ВыборкаКонтрагентов.Следующий() Цикл
					НовСтр=ТаблПланПорядок.Добавить();
					НовСтр.Агент=ВыборкаКонтрагентов.Агент;
					НовСтр.Дата=НачалоДня(ВыборкаКонтрагентов.Дата);
					НовСтр.Контрагент=ВыборкаКонтрагентов.Контрагент;
					НовСтр.ПорядокПлан=Порядок;
					НовСтр.ВремяПосещенияПлан=ДатаИзДатаИВремя(ДатаПустая(), ВыборкаКонтрагентов.НачалоСобытия);
					НовСтр.ВремяПребыванияПлан=5+ВыборкаКонтрагентов.ВремяВыполнения%1440;
					
					НовСтр=ТаблПуть.Добавить();
					НовСтр.Контрагент=ВыборкаКонтрагентов.Контрагент;
					
					Порядок=Порядок+1;
				КонецЦикла;
			КонецЦикла;
			
			Если Не РасчетПутейБольшеНеЗапускать Тогда
				НачальнаяТочкаМаршрута = ПолучитьНастройку(
					ВыборкаАгентов.Агент,
					"НачальнаяТочкаМаршрута",
					Справочники.Контрагенты.ПустаяСсылка());
				КонечнаяТочкаМаршрута = ПолучитьНастройку(
					ВыборкаАгентов.Агент,
					"КонечнаяТочкаМаршрута",
					Справочники.Контрагенты.ПустаяСсылка());
				Если ЗначениеЗаполнено(НачальнаяТочкаМаршрута) Тогда
					НовСтр=ТаблПуть.Вставить(0);
					НовСтр.Контрагент=НачальнаяТочкаМаршрута;
				КонецЕсли;
				Если ЗначениеЗаполнено(КонечнаяТочкаМаршрута) Тогда
					НовСтр=ТаблПуть.Добавить();
					НовСтр.Контрагент=КонечнаяТочкаМаршрута;
				КонецЕсли;
				
				ОбщееВремяВПути=0; ОбщаяДлинаПути=0;
				Если ПрокладкаМаршрутов.РассчитатьПараметрыПути(ВыборкаАгентов.Агент,ТаблПуть,ОбщееВремяВПути, ОбщаяДлинаПути) Тогда
					НовСтр=ТаблПланМаршрутов.Добавить();
					НовСтр.Агент=ВыборкаАгентов.Агент;
					НовСтр.Дата=НачалоДня(ВыборкаДат.Дата);
					НовСтр.ДлинаПлан=ОбщаяДлинаПути/1000;
				Иначе
					РасчетПутейБольшеНеЗапускать=Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьФотографииДокументов(Агент, ДатаТрека, НачалоРаботы, КонецРаботы, ЧасовойПояс) Экспорт
	фотоДокументов = новый ТаблицаЗначений();
	фотоДокументов.Колонки.Добавить("Документ");
	фотоДокументов.Колонки.Добавить("Контрагент");
	фотоДокументов.Колонки.Добавить("Дата", 
		Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	фотоДокументов.Колонки.Добавить("Время", 
		Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	фотоДокументов.Колонки.Добавить("Путь", 
		Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	фотоДокументов.Колонки.Добавить("Метаданные", 
		Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	фотоДокументов.Колонки.Добавить("Ориентация", 
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Любой)));
	фотоДокументов.Колонки.Добавить("Широта", 
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 10, ДопустимыйЗнак.Любой)));
	фотоДокументов.Колонки.Добавить("Долгота", 
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 10, ДопустимыйЗнак.Любой)));
	фотоДокументов.Колонки.Добавить("Корректность", 
		Новый ОписаниеТипов("Булево"));
	фотоДокументов.Колонки.Добавить("ТекстОшибки", 
		Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	
	БД = ОткрытьВнешнююБД(Ложь);
	Если БД = Ложь Тогда
		Предупреждение("Не удалось получить данные файла mobi_s.mdb, проверьте лог ошибок!", 10);
		Возврат фотоДокументов;
	КонецЕсли;
	
	текстЗапроса=
	"Select TOP 1000 photoDate, ObjectId, Filename, MobiObjectType, ObjectTypeName " 
	+ "From IncomingPhotos "
	+ "Where "
	+ "MobiObjectType in (12, 14, 16, 18, 19, 35, 37) "
	+ "and photoDate >= "+ДатаДляAccess(НачалоДня(ДатаТрека)) + " "
	+ "and photoDate <= "+ДатаДляAccess(КонецДня(ДатаТрека)) + " "
	+ "and FileName like """ + СокрЛП(Агент.ФизЛицо.Код) + "\%""";
	
	НаборЗаписей = БД.Execute(ТекстЗапроса);
	Пока НЕ НаборЗаписей.EOF Цикл		
		дата = НаборЗаписей.Fields("photoDate").Value;
		ИдОбъекта = СокрЛП(НаборЗаписей.Fields("ObjectId").Value);
		ИмяФайла = СокрЛП(НаборЗаписей.Fields("Filename").Value);
		МобиТипОбъекта = НаборЗаписей.Fields("MobiObjectType").Value;
		НазваниеТипаОбъекта = СокрЛП(НаборЗаписей.Fields("ObjectTypeName").Value);
		ПолноеИмяФайла = "" + КаталогЛогФайлов + "\Agents\" + ИмяФайла;
		
		Если СуществуетФайл(ПолноеИмяФайла) Тогда
			КодАгентаАвтораДокумента = СтрПолучитьСтроку(СтрЗаменить(ИмяФайла, "\", Символы.ПС), 1);
			ПолучитьИмяФайлаПоКомпонентам = 
				СтрЗаменить(
					СтрПолучитьСтроку(
						СтрЗаменить(
							ИмяФайла, 
							"\", 
							ЭтотОбъект.Разделительстрок), 
						4), 
					"_", 
					ЭтотОбъект.разделительстрок);
			ВремяФайла = ДатаИзИмениФайлаДатаВремя(, СтрПолучитьСтроку(ПолучитьИмяФайлаПоКомпонентам, 3));
			СтрФото = фотоДокументов.Добавить();					
			СтрФото.Документ = ПолучитьДокументСсылкаПоGUID(ИдОбъекта, НазваниеТипаОбъекта);
			типЗнчДокумента = ТипЗнч(СтрФото.Документ);
			
			Если типЗнчДокумента = ТипЗнч(Документы.Опрос.ПустаяСсылка()) Тогда
				СтрФото.Контрагент = СтрФото.Документ.ОпрашиваемоеЛицо
			ИначеЕсли СтрФото.Документ.Метаданные().Реквизиты.Найти("Контрагент") = Неопределено Тогда
				СтрФото.Контрагент = Неопределено;
			Иначе
				СтрФото.Контрагент = СтрФото.Документ.Контрагент;
			КонецЕсли;
			
			СтрФото.Путь = ПолноеИмяФайла;
			СтрФото.Время = ВремяФайла;  //брать из текущего файла		
			СтрФото.Дата = ДатаИзДатаИВремя(дата, времяФайла);		
			СтрФото.Корректность = Истина;
			СтрФото.Ориентация = 0;
			
			Попытка
				МетаданныеФото = ПолучитьМетаданныеФото(БД, СтрФото.Путь);
				
				ДатаВремяФото = ДатаПустая();						
				СтрФото.Корректность = ПроверитьМетаданныеФото(
				МетаданныеФото,         //метаданные фотографии которые необходимо проанализировать
				ЧасовойПояс,		//часовой пояс (из настроек) агента который сделал фото
				СтрФото.Дата,			//дата файла с фото из имени файла
				СтрФото.Документ, 	//ссылка на объект который соответствует фотографии
				,					//применимо только для контрагентов, если истина то фотография анализируется как фотография нового клиента
				,					//код объекта, передаваемый из учетной системы в КПК
				,					//географическая широта объекта (для контрагентов)
				,					//географическая долгота объекта (для контрагентов)
				,					//максимальное расстояние для засчитывания посещения контрагента 
				Истина, 
				СтрФото.ТекстОшибки, //текстовое описание результата проверки метаданных
				,					//контрагент, у которого была выполнена фотография товара
				, //комментарий к фото, указанный агентом при съемке
				СтрФото.Ориентация,	//ориентация фото, для автоповорота изображения в журнале
				СтрФото.Широта,		//географическая широта в которой была сделана фотография (из метаданных)
				СтрФото.Долгота,		//географическая долгота в которой была сделана фотография (из метаданных)
				ДатаВремяФото);		//дата и время когда было сделано фото (из метаданных)
				Если ЗначениеЗаполнено(ДатаВремяФото) Тогда
					//СтрФото.Дата = ДатаВремяФото;
					СтрФото.Время = ТолькоВремя(ДатаВремяФото);
				КонецЕсли;	
			Исключение
				СтрФото.ТекстОшибки = "Неизвестная ошибка";
				СтрФото.Корректность = Ложь;
			КонецПопытки;
			
			СтрФото.Метаданные = МетаданныеФото;
			
		КонецЕсли;
		НаборЗаписей.MoveNext();
	КонецЦикла; 		
	ЗакрытьВнешнююБД(БД);	
	Возврат фотоДокументов;
КонецФункции

// функция вычисляет координаты центра минимального прямоугольника охватывающего все точки из СписокКоординат
// Параметры
//	СписокКоординат - Таблица значений, которая должна содержать колонки Широта и Долгота с типом Число
//		из этого списка выбираются крайние левая/правая, верхняя/нижняя. Координатами центра карты будут 
//		Центр.широта = (Левая.Широта + Правая.Широта) / 2
//		Центр.Долгота = (Верхняя.Долгота + Нижняя.Долгота) / 2
//
Функция ПолучитьКоординатыЦентраКарты(СписокКоординатОригинал) Экспорт
	Если СписокКоординатОригинал.Количество() = 0 Тогда
		КоординатыЦентра  = Новый КоординатыГеографическойСхемы(0, 0);
		Возврат КоординатыЦентра;	
	КонецЕсли;
	СписокКоординат = СписокКоординатОригинал.Скопировать(, "Широта, Долгота");
	СписокКоординат.Сортировать("Широта");
	Строка = СписокКоординат.Получить(0);
	КоординатыВосток  = Новый КоординатыГеографическойСхемы(Строка.Широта,Строка.Долгота);
	Строка = СписокКоординат.Получить(СписокКоординат.Количество()-1);
	КоординатыЗапад  = Новый КоординатыГеографическойСхемы(Строка.Широта,Строка.Долгота);
	СписокКоординат.Сортировать("Долгота");
	Строка = СписокКоординат.Получить(0);
	КоординатыЮг  = Новый КоординатыГеографическойСхемы(Строка.Широта,Строка.Долгота);
	Строка = СписокКоординат.Получить(СписокКоординат.Количество()-1);
	КоординатыСевер  = Новый КоординатыГеографическойСхемы(Строка.Широта,Строка.Долгота);
	
	КоординатыЦентра  = Новый КоординатыГеографическойСхемы(
		(КоординатыВосток.Широта + КоординатыЗапад.Широта) / 2,
		(КоординатыЮг.Долгота + КоординатыСевер.Долгота) /2);
	Возврат КоординатыЦентра;	
КонецФункции

функция ПолучитьRouterDll(ПредложитьАвтоустановку = Истина) Экспорт
	Роутер=Неопределено;
	Попытка
		ЗагрузитьВнешнююКомпоненту("Router.dll");
		Роутер=Новый("AddIn.Router");
	Исключение
		Если ПредложитьАвтоустановку Тогда
			форма = ПолучитьФорму("ФормаНетРоутерДлл");
			форма.ОткрытьМодально();		
		КонецЕсли;
	КонецПопытки;	
	Возврат Роутер;
КонецФункции

//////////////////////////////////////////////////////
//ОСНОВНЫЕ ОПЕРАТОРЫ ПРОГРАММЫ

ВебЦвета = Новый Структура;
ВебЦвета.Вставить("IndianRed",13458524);
ВебЦвета.Вставить("LightCoral",15761536);
ВебЦвета.Вставить("Salmon",16416882);
ВебЦвета.Вставить("DarkSalmon",15308410);
ВебЦвета.Вставить("LightSalmon",16752762);
ВебЦвета.Вставить("Red",16711680);
ВебЦвета.Вставить("Crimson",14423100);
ВебЦвета.Вставить("FireBrick",11674146);
ВебЦвета.Вставить("DarkRed",9109504);
ВебЦвета.Вставить("Pink",16761035);
ВебЦвета.Вставить("LightPink",16758465);
ВебЦвета.Вставить("HotPink",16738740);
ВебЦвета.Вставить("DeepPink",16716947);
ВебЦвета.Вставить("MediumVioletRed",13047173);
ВебЦвета.Вставить("PaleVioletRed",14381203);
ВебЦвета.Вставить("Coral",16744272);
ВебЦвета.Вставить("Tomato",16737095);
ВебЦвета.Вставить("OrangeRed",16729344);
ВебЦвета.Вставить("DarkOrange",16747520);
ВебЦвета.Вставить("Orange",16753920);
ВебЦвета.Вставить("Gold",16766720);
ВебЦвета.Вставить("Yellow",16776960);
ВебЦвета.Вставить("LightYellow",16777184);
ВебЦвета.Вставить("LemonChiffon",16775885);
ВебЦвета.Вставить("LightGoldenrodYellow",16448210);
ВебЦвета.Вставить("PapayaWhip",16773077);
ВебЦвета.Вставить("Moccasin",16770229);
ВебЦвета.Вставить("PeachPuff",16767673);
ВебЦвета.Вставить("PaleGoldenrod",15657130);
ВебЦвета.Вставить("Khaki",15787660);
ВебЦвета.Вставить("DarkKhaki",12433259);
ВебЦвета.Вставить("Lavender",15132410);
ВебЦвета.Вставить("Thistle",14204888);
ВебЦвета.Вставить("Plum",14524637);
ВебЦвета.Вставить("Violet",15631086);
ВебЦвета.Вставить("Orchid",14315734);
ВебЦвета.Вставить("Fuchsia",16711935);
ВебЦвета.Вставить("Magenta",16711935);
ВебЦвета.Вставить("MediumOrchid",12211667);
ВебЦвета.Вставить("MediumPurple",9662683);
ВебЦвета.Вставить("BlueViolet",9055202);
ВебЦвета.Вставить("DarkViolet",9699539);
ВебЦвета.Вставить("DarkOrchid",10040012);
ВебЦвета.Вставить("DarkMagenta",9109643);
ВебЦвета.Вставить("Purple",8388736);
ВебЦвета.Вставить("Indigo",4915330);
ВебЦвета.Вставить("DarkSlateBlue",4734347);
ВебЦвета.Вставить("SlateBlue",6970061);
ВебЦвета.Вставить("MediumSlateBlue",8087790);
ВебЦвета.Вставить("GreenYellow",11403055);
ВебЦвета.Вставить("Chartreuse",8388352);
ВебЦвета.Вставить("LawnGreen",8190976);
ВебЦвета.Вставить("Lime",65280);
ВебЦвета.Вставить("LimeGreen",3329330);
ВебЦвета.Вставить("PaleGreen",10025880);
ВебЦвета.Вставить("LightGreen",9498256);
ВебЦвета.Вставить("MediumSpringGreen",64154);
ВебЦвета.Вставить("SpringGreen",65407);
ВебЦвета.Вставить("MediumSeaGreen",3978097);
ВебЦвета.Вставить("SeaGreen",3050327);
ВебЦвета.Вставить("ForestGreen",2263842);
ВебЦвета.Вставить("Green",32768);
ВебЦвета.Вставить("DarkGreen",25600);
ВебЦвета.Вставить("YellowGreen",10145074);
ВебЦвета.Вставить("OliveDrab",7048739);
ВебЦвета.Вставить("Olive",8421376);
ВебЦвета.Вставить("DarkOliveGreen",5597999);
ВебЦвета.Вставить("MediumAquamarine",6737322);
ВебЦвета.Вставить("DarkSeaGreen",9419919);
ВебЦвета.Вставить("LightSeaGreen",2142890);
ВебЦвета.Вставить("DarkCyan",35723);
ВебЦвета.Вставить("Teal",32896);
ВебЦвета.Вставить("Aqua",65535);
ВебЦвета.Вставить("Cyan",65535);
ВебЦвета.Вставить("LightCyan",14745599);
ВебЦвета.Вставить("PaleTurquoise",11529966);
ВебЦвета.Вставить("Aquamarine",8388564);
ВебЦвета.Вставить("Turquoise",4251856);
ВебЦвета.Вставить("MediumTurquoise",4772300);
ВебЦвета.Вставить("DarkTurquoise",52945);
ВебЦвета.Вставить("CadetBlue",6266528);
ВебЦвета.Вставить("SteelBlue",4620980);
ВебЦвета.Вставить("LightSteelBlue",11584734);
ВебЦвета.Вставить("PowderBlue",11591910);
ВебЦвета.Вставить("LightBlue",11393254);
ВебЦвета.Вставить("SkyBlue",8900331);
ВебЦвета.Вставить("LightSkyBlue",8900346);
ВебЦвета.Вставить("DeepSkyBlue",49151);
ВебЦвета.Вставить("DodgerBlue",2003199);
ВебЦвета.Вставить("CornflowerBlue",6591981);
ВебЦвета.Вставить("RoyalBlue",4286945);
ВебЦвета.Вставить("Blue",255);
ВебЦвета.Вставить("MediumBlue",205);
ВебЦвета.Вставить("DarkBlue",139);
ВебЦвета.Вставить("Navy",128);
ВебЦвета.Вставить("MidnightBlue",1644912);
ВебЦвета.Вставить("Cornsilk",16775388);
ВебЦвета.Вставить("BlanchedAlmond",16772045);
ВебЦвета.Вставить("Bisque",16770244);
ВебЦвета.Вставить("NavajoWhite",16768685);
ВебЦвета.Вставить("Wheat",16113331);
ВебЦвета.Вставить("BurlyWood",14596231);
ВебЦвета.Вставить("Tan",13808780);
ВебЦвета.Вставить("RosyBrown",12357519);
ВебЦвета.Вставить("SandyBrown",16032864);
ВебЦвета.Вставить("Goldenrod",14329120);
ВебЦвета.Вставить("DarkGoldenrod",12092939);
ВебЦвета.Вставить("Peru",13468991);
ВебЦвета.Вставить("Chocolate",13789470);
ВебЦвета.Вставить("SaddleBrown",9127187);
ВебЦвета.Вставить("Sienna",10506797);
ВебЦвета.Вставить("Brown",10824234);
ВебЦвета.Вставить("Maroon",8388608);
ВебЦвета.Вставить("White",16777215);
ВебЦвета.Вставить("Snow",16775930);
ВебЦвета.Вставить("Honeydew",15794160);
ВебЦвета.Вставить("MintCream",16121850);
ВебЦвета.Вставить("Azure",15794175);
ВебЦвета.Вставить("AliceBlue",15792383);
ВебЦвета.Вставить("GhostWhite",16316671);
ВебЦвета.Вставить("WhiteSmoke",16119285);
ВебЦвета.Вставить("Seashell",16774638);
ВебЦвета.Вставить("Beige",16119260);
ВебЦвета.Вставить("OldLace",16643558);
ВебЦвета.Вставить("FloralWhite",16775920);
ВебЦвета.Вставить("Ivory",16777200);
ВебЦвета.Вставить("AntiqueWhite",16444375);
ВебЦвета.Вставить("Linen",16445670);
ВебЦвета.Вставить("LavenderBlush",16773365);
ВебЦвета.Вставить("MistyRose",16770273);
ВебЦвета.Вставить("Gainsboro",14474460);
ВебЦвета.Вставить("LightGrey",13882323);
ВебЦвета.Вставить("Silver",12632256);
ВебЦвета.Вставить("DarkGray",11119017);
ВебЦвета.Вставить("Gray",8421504);
ВебЦвета.Вставить("DimGray",6908265);
ВебЦвета.Вставить("LightSlateGray",7833753);
ВебЦвета.Вставить("SlateGray",7372944);
ВебЦвета.Вставить("DarkSlateGray",3100495);
ВебЦвета.Вставить("Black",0);
ВебЦвета.Вставить("Cream",16776176);
ВебЦвета.Вставить("LightGoldenRod", 16772235);
ВебЦвета.Вставить("LightGray",13882323);
ВебЦвета.Вставить("LightSlateBlue", 8679679);
ВебЦвета.Вставить("MediumGray", 10526884);
ВебЦвета.Вставить("MediumGreen", 12639424);
ВебЦвета.Вставить("VioletRed", 13639824);

ОшибкиПриЗапуске = "";
                             
НазваниеКонфигурации = Метаданные.Имя;
Если Найти(НазваниеКонфигурации, "KT2000") <> 0 Тогда
	Если Найти(НазваниеКонфигурации, "KT2000_Alcohol_Trade") <> 0 Тогда
		Конфигурация = "Торговля";
	Иначе 
		Конфигурация = "Комплексная";
	КонецЕсли;
ИначеЕсли Найти(НазваниеКонфигурации,  "УправлениеТорговлейДляУкраины") <> 0 Тогда
	Конфигурация = "ТорговляУкраина";
ИначеЕсли Найти(НазваниеКонфигурации,  "УправлениеТорговлейДляКазахстана") <> 0 Тогда
	Конфигурация = "ТорговляКазахстан";
ИначеЕсли Найти(НазваниеКонфигурации,  "УправлениеТорговымПредприятиемДляКазахстана") <> 0 Тогда
	Конфигурация = "УТПКазахстан";	
ИначеЕсли Найти(НазваниеКонфигурации,  "УправлениеТорговымПредприятиемДляУкраины") <> 0 Тогда
	Конфигурация = "УТПУкраина";	
ИначеЕсли Найти(НазваниеКонфигурации, "УправлениеТорговлей")<> 0 тогда
	Если СравнитьВерсии(Метаданные.Версия, "10.3.6.8", ".") < 0 Тогда
		ОшибкиПриЗапуске = ОшибкиПриЗапуске + ?(ПустаяСтрока(ОшибкиПриЗапуске), "", Символы.ПС)
		+ "Работа Моби-С не гарантируется, необходима версия конфигурации не ниже 10.3.6.8, текущая версия "
		+ Метаданные.Версия + "." + Символы.ПС + "Рекомендуем обновить конфигурацию минимум до версии 10.3.6.8.";
	КонецЕсли;
	Конфигурация = "Торговля";
ИначеЕсли Найти(НазваниеКонфигурации, "УправлениеПроизводственнымПредприятиемДляУкраины") <> 0 тогда
    Конфигурация = "УППУкраина";
ИначеЕсли Найти(НазваниеКонфигурации, "УправлениеПроизводственнымПредприятиемДляКазахстана") <> 0 тогда
    Конфигурация = "УППКазахстан";
ИначеЕсли Найти(НазваниеКонфигурации, "УправлениеПроизводственнымПредприятием")<> 0 тогда
    Конфигурация = "УПП";
ИначеЕсли Найти(НазваниеКонфигурации, "УправлениеРемонтнымПредприятием")<> 0 тогда
    Конфигурация = "УПП";
ИначеЕсли Найти(НазваниеКонфигурации, "КомплекснаяАвтоматизация")<> 0 тогда
    Конфигурация = "Комплексная";
ИначеЕсли Найти(НазваниеКонфигурации, "Молокозавод")<> 0 тогда
    Конфигурация = "Молокозавод";
Иначе
	Конфигурация="???";
	ОшибкиПриЗапуске = ОшибкиПриЗапуске + ?(ПустаяСтрока(ОшибкиПриЗапуске), "", Символы.ПС) 
		+ "Запуск Моби-С на неизвестной Моби-С конфигурации";
КонецЕсли; 

//проверим есть ли оповещения;
Попытка
	Задача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
    ЕстьЗадачиПользователя = Истина;
Исключение
    ЕстьЗадачиПользователя = Ложь;
КонецПопытки;

Таб=Символы.Таб;
РазделительСтрок=Символы.ВК+Символы.ПС;
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
ДлинаКодаКонтрагенты = Метаданные.Справочники.Контрагенты.ДлинаКода;

///ОсновнойТипЦенПоУмолчанию -попробую подставить по умолчанию названием содержащим "Розн"
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
|	ТипыЦенНоменклатуры.Ссылка КАК ТипЦенПоУмолчанию
|ИЗ
|	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры
|ГДЕ
|	ТипыЦенНоменклатуры.Наименование ПОДОБНО ""%Розн%""
|	И (НЕ ТипыЦенНоменклатуры.ПометкаУдаления)
|	И ТипыЦенНоменклатуры.ВалютаЦены = &ВалютаЦены
|	И (НЕ ТипыЦенНоменклатуры.Рассчитывается)";
Запрос.УстановитьПараметр("ВалютаЦены",мВалютаРегламентированногоУчета);				

Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();
Если НЕ Результат.Пустой() Тогда
	Выборка.Следующий();
	ОсновнойТипЦенПоУмолчанию=Выборка.ТипЦенПоУмолчанию;
Иначе
	ОсновнойТипЦенПоУмолчанию=Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
КонецЕсли; 

//ОсновнаяСтатьяДвиженияДенежныхСредств -попробую подставить по умолчанию
Если Конфигурация = "Торговля" Тогда
	ОсновнаяСтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПокупателя;
ИначеЕсли Конфигурация="УПП" ИЛИ Конфигурация="Комплексная" ИЛИ Конфигурация="Молокозавод" Тогда
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СтатьиДвиженияДенежныхСредств.Ссылка КАК СтатьяДвиженияДенежныхСредств
	|ИЗ
	|	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|ГДЕ
	|	(НЕ СтатьиДвиженияДенежныхСредств.ПометкаУдаления)
	|	И СтатьиДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств = &ДДС_ОтПокупателя";
	
	Запрос.УстановитьПараметр("ДДС_ОтПокупателя", Перечисления.ВидыДвиженийДенежныхСредств.СредстваПолученныеОтПокупателейИЗаказчиков);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если НЕ Результат.Пустой() Тогда
		Выборка.Следующий();
		ОсновнаяСтатьяДвиженияДенежныхСредств=Выборка.СтатьяДвиженияДенежныхСредств;
	Иначе
		ОсновнаяСтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	КонецЕсли;
Иначе
	ОсновнаяСтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
КонецЕсли;

ВерсияОбработки   = "5.5.3";   //версия этого файла с обработкой
ВерсияPocketServer= "5.5";       //версия файла PocketServer.dll
ВерсияПротокола   = "5.5";     //Можем работать только с этой версией Моби-С
РедакцияДистрибутива = "3";    // 07.05.2015
ВерсияДистрибутива = ВерсияПротокола + "." + РедакцияДистрибутива;
Порт=1234; //порт для обмена с КПК 
СервернаяКомпонента = "PocketServer55.dll";
ИмяСервернойКомпоненты = "AddIn.PocketServer55";
Если ВерсияПлатформы() = "8.1" Тогда
	ИмяСервера = "AddIn.Server55";
Иначе
	ИмяСервера = "AddIn.Сервер.Server55";
КонецЕсли;

РССохраненныеНастройкиИмяОбъекта = "Mobi-C";

ЦветВыполненныеЗадания = WebЦвета.Аквамарин;
ЦветПросроченныеЗадания = новый Цвет(226, 211, 147);
ЦветаСтиляЦветФонаПоля = ЦветаСтиля.ЦветФонаПоля;
ЦветаТекущаяДата = WebЦвета.Голубой;
УзорЗадания = ТипУзораТабличногоДокумента.Узор12;

ПорядокОкругленияЦен = Новый Соответствие;
ПорядокОкругленияЦен.Вставить(Перечисления.ПорядкиОкругления.ПустаяСсылка(), 0.01);
Для Каждого Порядок Из Перечисления.ПорядкиОкругления Цикл
	ПорядокОкругленияЦен.Вставить(Порядок, Число(Строка(Порядок)));
КонецЦикла;

ФорматТТНеЗадан = "<Не задан>";

ЕстьТоварыВАнкете = Ложь;
Попытка
	ЕстьТоварыВАнкете = НЕ (Метаданные.Документы.Опрос.ТабличныеЧасти.Вопросы.Реквизиты.Найти("Номенклатура") = Неопределено);
Исключение
	ЕстьТоварыВАнкете = Ложь;
КонецПопытки;
	
ИконкаКлиентПосещенный = "Маршрут_";//"Клиент";
ИконкаКлиентНеПосещенный = "Маршрут_красная";//"КлиентНепосещенный";

ИнтерфейсыПользователей=Новый Соответствие;
//Интерфейс для Федорова
//ИнтерфейсыПользователей.Вставить(Справочники.Пользователи.НайтиПоНаименованию("Федоров Борис Михайлович"), "ФормаОсновная");
//Интерфейс для всех остальных
//ИнтерфейсыПользователей.Вставить(Справочники.Пользователи.ПустаяСсылка(), "РабочееМестоТерриториальногоМенеджера");
